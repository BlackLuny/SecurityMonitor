!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
OBJS	Makefile	/^OBJS = vmcs.o$/;"	m
hypercall_handler	eventHandler.c	/^void hypercall_handler()$/;"	f
gvaToGPA	guest_IA32ePage.c	/^GPA_t gvaToGPA(const GVA_t gva, const GPA_t startGPAofPageTable)$/;"	f
traverseIA32ePDPT	guest_IA32ePage.c	/^inline void traverseIA32ePDPT(const VMID_t vmid, const APPID_t appID, const GPA_t startGPAofPDPT, void* (*do_something)(const VMID_t vmID, const APPID_t appID, GPA_t gpa))$/;"	f
traverseIA32ePDT	guest_IA32ePage.c	/^inline void traverseIA32ePDT(const VMID_t vmid, const APPID_t appID, const GPA_t startGPAofPDT, void* (*do_something)(const VMID_t vmID, const APPID_t appID, GPA_t gpa))$/;"	f
traverseIA32ePT	guest_IA32ePage.c	/^inline void traverseIA32ePT(const VMID_t vmid, const APPID_t appID, const GPA_t startGPAofPT, void* (*do_something)(const VMID_t vmID, const APPID_t appID, GPA_t gpa))$/;"	f
traverseIA32ePages	guest_IA32ePage.c	/^void traverseIA32ePages(const VMID_t vmid, const APPID_t appID, const GPA_t startGPAofPageTable, void* (*do_something)(const VMID_t vmID, const APPID_t appID, GPA_t gpa))$/;"	f
clear_guest_status	guest_state.c	/^void clear_guest_status()$/;"	f
getGuestRSP	guest_state.c	/^GVA_t getGuestRSP()$/;"	f
getSystemCallHandlerGPA	guest_state.c	/^GPA_t getSystemCallHandlerGPA()$/;"	f
getTSSGVA	guest_state.c	/^GVA_t getTSSGVA()$/;"	f
get_ept_base_HPA	guest_state.c	/^GPA_t get_ept_base_HPA()$/;"	f
get_page_table_base_GPA	guest_state.c	/^GPA_t get_page_table_base_GPA()$/;"	f
restore_guest_status	guest_state.c	/^void restore_guest_status(struct guest_sensitive_stats *guest_status)$/;"	f
saveSystemCallHandlerAddress	guest_state.c	/^void saveSystemCallHandlerAddress(const GVA_t addr)$/;"	f
save_guest_status	guest_state.c	/^void save_guest_status(struct guest_sensitive_stats *guest_status)$/;"	f
syscallHandlerAddress	guest_state.c	/^GPA_t syscallHandlerAddress = 0;$/;"	v
traverseGuestPages	guest_state.c	/^void traverseGuestPages(const VMID_t vmid, const APPID_t appID, const GPA_t startGPAofPageTable, void* (*do_something)(const VMID_t vmID, const APPID_t appID, GPA_t gpa))$/;"	f
letter_M	html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_M"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;M&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
details	html/event_handler_8c.html	/^<hr\/><a name="details" id="details"><\/a><h2>상세한 설명<\/h2>$/;"	a
func-members	html/event_handler_8c.html	/^<tr><td colspan="2"><h2><a name="func-members"><\/a>$/;"	a
l00001	html/event_handler_8c_source.html	/^<a href="event_handler_8c.html">이 파일의 문서화 페이지로 가기<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 $/;"	a
l00006	html/event_handler_8c_source.html	/^<a name="l00006"><\/a>00006 <span class="preprocessor">#include &lt;<a class="code" href="event_handler_8h.html" title="Catching &amp; handling of memory-related events.">eventHandler.h<\/a>&gt;<\/span>$/;"	a
l00007	html/event_handler_8c_source.html	/^<a name="l00007"><\/a>00007 <span class="preprocessor">#include &lt;<a class="code" href="monitor__types_8h.html" title="Definitions of types that are used in this project.">monitor_types.h<\/a>&gt;<\/span>$/;"	a
l00008	html/event_handler_8c_source.html	/^<a name="l00008"><\/a>00008 <span class="preprocessor">#include &lt;<a class="code" href="guest__state_8h.html" title="High-level facilities to get guest VM&#39;s information.">guest_state.h<\/a>&gt;<\/span>$/;"	a
l00009	html/event_handler_8c_source.html	/^<a name="l00009"><\/a>00009 <span class="preprocessor">#include &lt;<a class="code" href="memory__ownership__table_8h.html" title="Definition of data structrues &amp; constants for memory ownership table. .">memory_ownership_table.h<\/a>&gt;<\/span>$/;"	a
l00010	html/event_handler_8c_source.html	/^<a name="l00010"><\/a>00010 $/;"	a
l00011	html/event_handler_8c_source.html	/^<a name="l00011"><\/a><a class="code" href="event_handler_8h.html#a89bbf08a67ab2dc3c540ee1cb1904535">00011<\/a> <span class="keywordtype">void<\/span> <a class="code" href="event_handler_8c.html#a89bbf08a67ab2dc3c540ee1cb1904535" title="This function handles hypercall invoked from guest application.  The goal of this function is to star...">hypercall_handler<\/a>()$/;"	a
l00012	html/event_handler_8c_source.html	/^<a name="l00012"><\/a>00012 {$/;"	a
l00013	html/event_handler_8c_source.html	/^<a name="l00013"><\/a>00013     <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> pagetable_start_GPA;$/;"	a
l00014	html/event_handler_8c_source.html	/^<a name="l00014"><\/a>00014     pagetable_start_GPA = <a class="code" href="guest__state_8c.html#a4fe3391f0854e7d1c8b553adb4284436" title="Get the start address of page table.">get_page_table_base_GPA<\/a>();$/;"	a
l00015	html/event_handler_8c_source.html	/^<a name="l00015"><\/a>00015 $/;"	a
l00016	html/event_handler_8c_source.html	/^<a name="l00016"><\/a>00016     <span class="keywordflow">if<\/span>(pagetable_start_GPA)$/;"	a
l00017	html/event_handler_8c_source.html	/^<a name="l00017"><\/a>00017     {$/;"	a
l00018	html/event_handler_8c_source.html	/^<a name="l00018"><\/a>00018         printf(<span class="stringliteral">&quot;Protection start\\n&quot;<\/span>);$/;"	a
l00019	html/event_handler_8c_source.html	/^<a name="l00019"><\/a>00019         <a class="code" href="memory__ownership__table_8h.html#aa0e8340e3e2dc314a25b0c93fdfd54ab" title="Start to protect of currently running process&#39;s pages.">protectCurrentApplication<\/a>();$/;"	a
l00020	html/event_handler_8c_source.html	/^<a name="l00020"><\/a>00020     }$/;"	a
l00021	html/event_handler_8c_source.html	/^<a name="l00021"><\/a>00021 }$/;"	a
l00022	html/event_handler_8c_source.html	/^<a name="l00022"><\/a>00022 $/;"	a
l00023	html/event_handler_8c_source.html	/^<a name="l00023"><\/a>00023 $/;"	a
l00001	html/event_handler_8d_source.html	/^<div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 core\/security_module\/eventHandler.o: core\/security_module\/eventHandler.c \\$/;"	a
l00002	html/event_handler_8d_source.html	/^<a name="l00002"><\/a>00002 $/;"	a
l00003	html/event_handler_8d_source.html	/^<a name="l00003"><\/a>00003 core\/security_module\/eventHandler.c \\$/;"	a
l00004	html/event_handler_8d_source.html	/^<a name="l00004"><\/a>00004 <\/pre><\/div><\/div><!-- contents -->$/;"	a
details	html/event_handler_8h.html	/^<hr\/><a name="details" id="details"><\/a><h2>상세한 설명<\/h2>$/;"	a
func-members	html/event_handler_8h.html	/^<tr><td colspan="2"><h2><a name="func-members"><\/a>$/;"	a
l00001	html/event_handler_8h_source.html	/^<a href="event_handler_8h.html">이 파일의 문서화 페이지로 가기<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 $/;"	a
l00018	html/event_handler_8h_source.html	/^<a name="l00018"><\/a>00018 <span class="preprocessor">#ifndef __EVENT_HANDLER_H__<\/span>$/;"	a
l00019	html/event_handler_8h_source.html	/^<a name="l00019"><\/a>00019 <span class="preprocessor"><\/span><span class="preprocessor">#define __EVENT_HANDLER_H__<\/span>$/;"	a
l00020	html/event_handler_8h_source.html	/^<a name="l00020"><\/a>00020 <span class="preprocessor"><\/span>$/;"	a
l00021	html/event_handler_8h_source.html	/^<a name="l00021"><\/a>00021 <span class="keywordtype">void<\/span> <a class="code" href="event_handler_8c.html#a89bbf08a67ab2dc3c540ee1cb1904535" title="This function handles hypercall invoked from guest application.  The goal of this function is to star...">hypercall_handler<\/a>();$/;"	a
l00022	html/event_handler_8h_source.html	/^<a name="l00022"><\/a>00022 $/;"	a
l00023	html/event_handler_8h_source.html	/^<a name="l00023"><\/a>00023 <span class="preprocessor">#endif<\/span>$/;"	a
details	html/guest___i_a32e_page_8c.html	/^<hr\/><a name="details" id="details"><\/a><h2>상세한 설명<\/h2>$/;"	a
func-members	html/guest___i_a32e_page_8c.html	/^<tr><td colspan="2"><h2><a name="func-members"><\/a>$/;"	a
l00001	html/guest___i_a32e_page_8c_source.html	/^<a href="guest___i_a32e_page_8c.html">이 파일의 문서화 페이지로 가기<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 $/;"	a
l00005	html/guest___i_a32e_page_8c_source.html	/^<a name="l00005"><\/a>00005 <span class="preprocessor">#include &lt;<a class="code" href="guest___i_a32e_page_8h.html" title="functions and constants to support IA32e paging mode of guest VM">guest_IA32ePage.h<\/a>&gt;<\/span>$/;"	a
l00006	html/guest___i_a32e_page_8c_source.html	/^<a name="l00006"><\/a>00006 <span class="preprocessor">#include &lt;<a class="code" href="monitor__util_8h.html" title="This file exists for supporting some uiility functions.">monitor_util.h<\/a>&gt;<\/span>$/;"	a
l00007	html/guest___i_a32e_page_8c_source.html	/^<a name="l00007"><\/a>00007 <span class="preprocessor">#include &lt;<a class="code" href="monitor__types_8h.html" title="Definitions of types that are used in this project.">monitor_types.h<\/a>&gt;<\/span>$/;"	a
l00008	html/guest___i_a32e_page_8c_source.html	/^<a name="l00008"><\/a>00008 $/;"	a
l00009	html/guest___i_a32e_page_8c_source.html	/^<a name="l00009"><\/a><a class="code" href="guest___i_a32e_page_8h.html#af233f3d87b0a388e0c534d928167e20a">00009<\/a> <span class="keywordtype">void<\/span> <a class="code" href="guest___i_a32e_page_8c.html#af233f3d87b0a388e0c534d928167e20a" title="Traverse all pages based on IA32e paging mode. It traverse at PML4 level.">traverseIA32ePages<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> startGPAofPageTable, <span class="keywordtype">void<\/span>* (*do_something)(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> gpa))$/;"	a
l00010	html/guest___i_a32e_page_8c_source.html	/^<a name="l00010"><\/a>00010 {$/;"	a
l00011	html/guest___i_a32e_page_8c_source.html	/^<a name="l00011"><\/a>00011     <span class="keywordtype">int<\/span> pml4Index;$/;"	a
l00012	html/guest___i_a32e_page_8c_source.html	/^<a name="l00012"><\/a>00012     <span class="keywordflow">for<\/span>(pml4Index = 0 ; pml4Index &lt; <a class="code" href="guest___i_a32e_page_8h.html#a95899c079745b0d248c7999db30739ce" title="The maximum number of guest PML4 entries.">MAX_GUEST_PML4_INDEX<\/a> ; pml4Index++)$/;"	a
l00013	html/guest___i_a32e_page_8c_source.html	/^<a name="l00013"><\/a>00013     {$/;"	a
l00014	html/guest___i_a32e_page_8c_source.html	/^<a name="l00014"><\/a>00014         <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> currentPML4EntryGPA;$/;"	a
l00015	html/guest___i_a32e_page_8c_source.html	/^<a name="l00015"><\/a>00015         <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> currentPML4EntryHPA;$/;"	a
l00016	html/guest___i_a32e_page_8c_source.html	/^<a name="l00016"><\/a>00016         <a class="code" href="monitor__types_8h.html#a0c8a2300d54b9380cad96861cc51469d" title="A type definition for guest page table entry.">PGT_ENTRY_t<\/a> *pCurrentPML4Entry, currentPML4Entry;$/;"	a
l00017	html/guest___i_a32e_page_8c_source.html	/^<a name="l00017"><\/a>00017         <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> startGPAofPDPT;$/;"	a
l00018	html/guest___i_a32e_page_8c_source.html	/^<a name="l00018"><\/a>00018 $/;"	a
l00019	html/guest___i_a32e_page_8c_source.html	/^<a name="l00019"><\/a>00019         currentPML4EntryGPA = (startGPAofPageTable | (pml4Index &lt;&lt; <a class="code" href="guest___i_a32e_page_8h.html#a4f9f11d3f1d992b8d528dc6ce8702000" title="The left-shift value for PML4 entry.">GUEST_PML4_INDEX_SHIFT<\/a>));$/;"	a
l00020	html/guest___i_a32e_page_8c_source.html	/^<a name="l00020"><\/a>00020         currentPML4EntryHPA = <a class="code" href="monitor__util_8h.html#a19ca3fbdba02a8a291fbf56b030e7323" title="This function converts guest physical address to host physical address.">gpaToHPA<\/a>(currentPML4EntryGPA, 0);$/;"	a
l00021	html/guest___i_a32e_page_8c_source.html	/^<a name="l00021"><\/a>00021         <span class="keywordflow">if<\/span>(!currentPML4EntryHPA)$/;"	a
l00022	html/guest___i_a32e_page_8c_source.html	/^<a name="l00022"><\/a>00022         {$/;"	a
l00023	html/guest___i_a32e_page_8c_source.html	/^<a name="l00023"><\/a>00023             <span class="keywordflow">continue<\/span>;$/;"	a
l00024	html/guest___i_a32e_page_8c_source.html	/^<a name="l00024"><\/a>00024         }$/;"	a
l00025	html/guest___i_a32e_page_8c_source.html	/^<a name="l00025"><\/a>00025         pCurrentPML4Entry = (<a class="code" href="monitor__types_8h.html#a0c8a2300d54b9380cad96861cc51469d" title="A type definition for guest page table entry.">PGT_ENTRY_t<\/a>*)<a class="code" href="monitor__util_8h.html#ac66e271532851a5737a7968ddc1390e4" title="This function maps host physical address into hypervisor&#39;s virtual memory.">mapHPAintoHVA<\/a>(currentPML4EntryHPA,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a0c8a2300d54b9380cad96861cc51469d" title="A type definition for guest page table entry.">PGT_ENTRY_t<\/a>));$/;"	a
l00026	html/guest___i_a32e_page_8c_source.html	/^<a name="l00026"><\/a>00026         <span class="keywordflow">if<\/span>(!pCurrentPML4Entry)$/;"	a
l00027	html/guest___i_a32e_page_8c_source.html	/^<a name="l00027"><\/a>00027         {$/;"	a
l00028	html/guest___i_a32e_page_8c_source.html	/^<a name="l00028"><\/a>00028             <span class="keywordflow">continue<\/span>;$/;"	a
l00029	html/guest___i_a32e_page_8c_source.html	/^<a name="l00029"><\/a>00029         }$/;"	a
l00030	html/guest___i_a32e_page_8c_source.html	/^<a name="l00030"><\/a>00030         currentPML4Entry = *pCurrentPML4Entry;$/;"	a
l00031	html/guest___i_a32e_page_8c_source.html	/^<a name="l00031"><\/a>00031         <a class="code" href="monitor__util_8h.html#ae5b8234f7d553177a9d3f932fe1c112b" title="This function maps host physical address into hypervisor&#39;s virtual memory.">unmapHPAintoHVA<\/a>((<span class="keywordtype">void<\/span>*)pCurrentPML4Entry,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a0c8a2300d54b9380cad96861cc51469d" title="A type definition for guest page table entry.">PGT_ENTRY_t<\/a>));$/;"	a
l00032	html/guest___i_a32e_page_8c_source.html	/^<a name="l00032"><\/a>00032 $/;"	a
l00033	html/guest___i_a32e_page_8c_source.html	/^<a name="l00033"><\/a>00033         startGPAofPDPT = currentPML4Entry &amp; <a class="code" href="guest___i_a32e_page_8h.html#a71ab36e768a6cf0cff31a9e288abe306" title="A mask that is used to extract base HPA of EPT PDP from EPT PML4 entry.">EPT_PML4_ENTRY_MASK<\/a>;$/;"	a
l00034	html/guest___i_a32e_page_8c_source.html	/^<a name="l00034"><\/a>00034         $/;"	a
l00035	html/guest___i_a32e_page_8c_source.html	/^<a name="l00035"><\/a>00035         <span class="keywordflow">if<\/span>(startGPAofPDPT &amp;&amp; (currentPML4Entry &amp; 0x01) &amp;&amp; !(currentPML4Entry &amp; 0x80))$/;"	a
l00036	html/guest___i_a32e_page_8c_source.html	/^<a name="l00036"><\/a>00036         {$/;"	a
l00037	html/guest___i_a32e_page_8c_source.html	/^<a name="l00037"><\/a>00037             printf(<span class="stringliteral">&quot;%llx\\n&quot;<\/span>,currentPML4Entry);$/;"	a
l00038	html/guest___i_a32e_page_8c_source.html	/^<a name="l00038"><\/a>00038             <a class="code" href="guest___i_a32e_page_8c.html#acc5be7aa7fcf4568891e6620f0b94141" title="Traverse all pages based on IA32e paging mode. It traverse at page directory pointer (PDP) level...">traverseIA32ePDPT<\/a>(vmid, appID, startGPAofPDPT,do_something);$/;"	a
l00039	html/guest___i_a32e_page_8c_source.html	/^<a name="l00039"><\/a>00039         }$/;"	a
l00040	html/guest___i_a32e_page_8c_source.html	/^<a name="l00040"><\/a>00040     }$/;"	a
l00041	html/guest___i_a32e_page_8c_source.html	/^<a name="l00041"><\/a>00041 }$/;"	a
l00042	html/guest___i_a32e_page_8c_source.html	/^<a name="l00042"><\/a>00042 $/;"	a
l00043	html/guest___i_a32e_page_8c_source.html	/^<a name="l00043"><\/a><a class="code" href="guest___i_a32e_page_8h.html#acc5be7aa7fcf4568891e6620f0b94141">00043<\/a> <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="guest___i_a32e_page_8c.html#acc5be7aa7fcf4568891e6620f0b94141" title="Traverse all pages based on IA32e paging mode. It traverse at page directory pointer (PDP) level...">traverseIA32ePDPT<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> startGPAofPDPT, <span class="keywordtype">void<\/span>* (*do_something)(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> gpa))$/;"	a
l00044	html/guest___i_a32e_page_8c_source.html	/^<a name="l00044"><\/a>00044 {$/;"	a
l00045	html/guest___i_a32e_page_8c_source.html	/^<a name="l00045"><\/a>00045     <span class="keywordtype">int<\/span> pdpIndex;$/;"	a
l00046	html/guest___i_a32e_page_8c_source.html	/^<a name="l00046"><\/a>00046     <span class="keywordflow">for<\/span>(pdpIndex = 0 ; pdpIndex &lt; <a class="code" href="guest___i_a32e_page_8h.html#aea301bb20ba8cf3d3c28e8153142c4e7" title="The maximum number of guest PDP table entries.">MAX_GUEST_PDP_INDEX<\/a> ; pdpIndex++)$/;"	a
l00047	html/guest___i_a32e_page_8c_source.html	/^<a name="l00047"><\/a>00047     {$/;"	a
l00048	html/guest___i_a32e_page_8c_source.html	/^<a name="l00048"><\/a>00048         <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> currentPDPTEntryGPA;$/;"	a
l00049	html/guest___i_a32e_page_8c_source.html	/^<a name="l00049"><\/a>00049         <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> currentPDPTEntryHPA;$/;"	a
l00050	html/guest___i_a32e_page_8c_source.html	/^<a name="l00050"><\/a>00050         <a class="code" href="monitor__types_8h.html#a0c8a2300d54b9380cad96861cc51469d" title="A type definition for guest page table entry.">PGT_ENTRY_t<\/a> *pCurrentPDPTEntry, currentPDPTEntry;$/;"	a
l00051	html/guest___i_a32e_page_8c_source.html	/^<a name="l00051"><\/a>00051         <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> startGPAofPDT;$/;"	a
l00052	html/guest___i_a32e_page_8c_source.html	/^<a name="l00052"><\/a>00052 $/;"	a
l00053	html/guest___i_a32e_page_8c_source.html	/^<a name="l00053"><\/a>00053         currentPDPTEntryGPA = (startGPAofPDPT | (pdpIndex &lt;&lt; <a class="code" href="guest___i_a32e_page_8h.html#a97220f3f7ecb24472d9d17523e5a5b3c" title="The left-shift value for PDP table entry.">GUEST_PDP_INDEX_SHIFT<\/a>));$/;"	a
l00054	html/guest___i_a32e_page_8c_source.html	/^<a name="l00054"><\/a>00054         currentPDPTEntryHPA = <a class="code" href="monitor__util_8h.html#a19ca3fbdba02a8a291fbf56b030e7323" title="This function converts guest physical address to host physical address.">gpaToHPA<\/a>(currentPDPTEntryGPA, 0);$/;"	a
l00055	html/guest___i_a32e_page_8c_source.html	/^<a name="l00055"><\/a>00055         <span class="keywordflow">if<\/span>(!currentPDPTEntryHPA)$/;"	a
l00056	html/guest___i_a32e_page_8c_source.html	/^<a name="l00056"><\/a>00056         {$/;"	a
l00057	html/guest___i_a32e_page_8c_source.html	/^<a name="l00057"><\/a>00057             <span class="keywordflow">continue<\/span>;$/;"	a
l00058	html/guest___i_a32e_page_8c_source.html	/^<a name="l00058"><\/a>00058         }$/;"	a
l00059	html/guest___i_a32e_page_8c_source.html	/^<a name="l00059"><\/a>00059         pCurrentPDPTEntry = (<a class="code" href="monitor__types_8h.html#a0c8a2300d54b9380cad96861cc51469d" title="A type definition for guest page table entry.">PGT_ENTRY_t<\/a>*)<a class="code" href="monitor__util_8h.html#ac66e271532851a5737a7968ddc1390e4" title="This function maps host physical address into hypervisor&#39;s virtual memory.">mapHPAintoHVA<\/a>(currentPDPTEntryHPA,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a0c8a2300d54b9380cad96861cc51469d" title="A type definition for guest page table entry.">PGT_ENTRY_t<\/a>));$/;"	a
l00060	html/guest___i_a32e_page_8c_source.html	/^<a name="l00060"><\/a>00060         <span class="keywordflow">if<\/span>(!pCurrentPDPTEntry)$/;"	a
l00061	html/guest___i_a32e_page_8c_source.html	/^<a name="l00061"><\/a>00061         {$/;"	a
l00062	html/guest___i_a32e_page_8c_source.html	/^<a name="l00062"><\/a>00062             <span class="keywordflow">continue<\/span>;$/;"	a
l00063	html/guest___i_a32e_page_8c_source.html	/^<a name="l00063"><\/a>00063         }$/;"	a
l00064	html/guest___i_a32e_page_8c_source.html	/^<a name="l00064"><\/a>00064         currentPDPTEntry = *pCurrentPDPTEntry;$/;"	a
l00065	html/guest___i_a32e_page_8c_source.html	/^<a name="l00065"><\/a>00065         <a class="code" href="monitor__util_8h.html#ae5b8234f7d553177a9d3f932fe1c112b" title="This function maps host physical address into hypervisor&#39;s virtual memory.">unmapHPAintoHVA<\/a>((<span class="keywordtype">void<\/span>*)pCurrentPDPTEntry,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a0c8a2300d54b9380cad96861cc51469d" title="A type definition for guest page table entry.">PGT_ENTRY_t<\/a>));$/;"	a
l00066	html/guest___i_a32e_page_8c_source.html	/^<a name="l00066"><\/a>00066 $/;"	a
l00067	html/guest___i_a32e_page_8c_source.html	/^<a name="l00067"><\/a>00067         startGPAofPDT = currentPDPTEntry &amp; <a class="code" href="guest___i_a32e_page_8h.html#aca4d6718af5283d4aa065fac24e64e54" title="A mask that is used to extract base HPA of EPT PDP from EPT PDP table entry.">EPT_PDP_ENTRY_MASK<\/a>;  $/;"	a
l00068	html/guest___i_a32e_page_8c_source.html	/^<a name="l00068"><\/a>00068 $/;"	a
l00069	html/guest___i_a32e_page_8c_source.html	/^<a name="l00069"><\/a>00069         <span class="keywordflow">if<\/span>(startGPAofPDT &amp;&amp; (currentPDPTEntry &amp; 0x01) &amp;&amp; !(currentPDPTEntry &amp; 0x80))$/;"	a
l00070	html/guest___i_a32e_page_8c_source.html	/^<a name="l00070"><\/a>00070         {$/;"	a
l00071	html/guest___i_a32e_page_8c_source.html	/^<a name="l00071"><\/a>00071             <a class="code" href="guest___i_a32e_page_8c.html#a7253467a3aa5a9560748b75c4b7c57d5" title="Traverse all pages based on IA32e paging mode. It traverse at page directory (PD) level...">traverseIA32ePDT<\/a>(vmid, appID, startGPAofPDT, do_something);$/;"	a
l00072	html/guest___i_a32e_page_8c_source.html	/^<a name="l00072"><\/a>00072         }$/;"	a
l00073	html/guest___i_a32e_page_8c_source.html	/^<a name="l00073"><\/a>00073     }$/;"	a
l00074	html/guest___i_a32e_page_8c_source.html	/^<a name="l00074"><\/a>00074 }$/;"	a
l00075	html/guest___i_a32e_page_8c_source.html	/^<a name="l00075"><\/a>00075 $/;"	a
l00076	html/guest___i_a32e_page_8c_source.html	/^<a name="l00076"><\/a>00076 $/;"	a
l00077	html/guest___i_a32e_page_8c_source.html	/^<a name="l00077"><\/a><a class="code" href="guest___i_a32e_page_8h.html#a7253467a3aa5a9560748b75c4b7c57d5">00077<\/a> <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="guest___i_a32e_page_8c.html#a7253467a3aa5a9560748b75c4b7c57d5" title="Traverse all pages based on IA32e paging mode. It traverse at page directory (PD) level...">traverseIA32ePDT<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> startGPAofPDT, <span class="keywordtype">void<\/span>* (*do_something)(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> gpa))$/;"	a
l00078	html/guest___i_a32e_page_8c_source.html	/^<a name="l00078"><\/a>00078 {$/;"	a
l00079	html/guest___i_a32e_page_8c_source.html	/^<a name="l00079"><\/a>00079     <span class="keywordtype">int<\/span> pdIndex;$/;"	a
l00080	html/guest___i_a32e_page_8c_source.html	/^<a name="l00080"><\/a>00080     <span class="keywordflow">for<\/span>(pdIndex = 0 ; pdIndex &lt; <a class="code" href="guest___i_a32e_page_8h.html#a614095969a102b7d4637860c27460e35" title="The maximum number of guest page directory (PD) entries.">MAX_GUEST_PD_INDEX<\/a> ; pdIndex++)$/;"	a
l00081	html/guest___i_a32e_page_8c_source.html	/^<a name="l00081"><\/a>00081     {$/;"	a
l00082	html/guest___i_a32e_page_8c_source.html	/^<a name="l00082"><\/a>00082         <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> currentPDTEntryGPA;$/;"	a
l00083	html/guest___i_a32e_page_8c_source.html	/^<a name="l00083"><\/a>00083         <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> currentPDTEntryHPA;$/;"	a
l00084	html/guest___i_a32e_page_8c_source.html	/^<a name="l00084"><\/a>00084         <a class="code" href="monitor__types_8h.html#a0c8a2300d54b9380cad96861cc51469d" title="A type definition for guest page table entry.">PGT_ENTRY_t<\/a> *pCurrentPDTEntry, currentPDTEntry;$/;"	a
l00085	html/guest___i_a32e_page_8c_source.html	/^<a name="l00085"><\/a>00085         <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> startGPAofPT;$/;"	a
l00086	html/guest___i_a32e_page_8c_source.html	/^<a name="l00086"><\/a>00086 $/;"	a
l00087	html/guest___i_a32e_page_8c_source.html	/^<a name="l00087"><\/a>00087         currentPDTEntryGPA = (startGPAofPDT | (pdIndex &lt;&lt; <a class="code" href="guest___i_a32e_page_8h.html#aebfd7bdceef07644bb6ddb5d9f647d7b" title="The left-shift value for PD table entry.">GUEST_PD_INDEX_SHIFT<\/a>));$/;"	a
l00088	html/guest___i_a32e_page_8c_source.html	/^<a name="l00088"><\/a>00088         currentPDTEntryHPA = <a class="code" href="monitor__util_8h.html#a19ca3fbdba02a8a291fbf56b030e7323" title="This function converts guest physical address to host physical address.">gpaToHPA<\/a>(currentPDTEntryGPA, 0);$/;"	a
l00089	html/guest___i_a32e_page_8c_source.html	/^<a name="l00089"><\/a>00089         <span class="keywordflow">if<\/span>(!currentPDTEntryHPA)$/;"	a
l00090	html/guest___i_a32e_page_8c_source.html	/^<a name="l00090"><\/a>00090         {$/;"	a
l00091	html/guest___i_a32e_page_8c_source.html	/^<a name="l00091"><\/a>00091             <span class="keywordflow">continue<\/span>;$/;"	a
l00092	html/guest___i_a32e_page_8c_source.html	/^<a name="l00092"><\/a>00092         }$/;"	a
l00093	html/guest___i_a32e_page_8c_source.html	/^<a name="l00093"><\/a>00093         pCurrentPDTEntry = (<a class="code" href="monitor__types_8h.html#a0c8a2300d54b9380cad96861cc51469d" title="A type definition for guest page table entry.">PGT_ENTRY_t<\/a>*)<a class="code" href="monitor__util_8h.html#ac66e271532851a5737a7968ddc1390e4" title="This function maps host physical address into hypervisor&#39;s virtual memory.">mapHPAintoHVA<\/a>(currentPDTEntryHPA,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a0c8a2300d54b9380cad96861cc51469d" title="A type definition for guest page table entry.">PGT_ENTRY_t<\/a>));$/;"	a
l00094	html/guest___i_a32e_page_8c_source.html	/^<a name="l00094"><\/a>00094         <span class="keywordflow">if<\/span>(!pCurrentPDTEntry)$/;"	a
l00095	html/guest___i_a32e_page_8c_source.html	/^<a name="l00095"><\/a>00095         {$/;"	a
l00096	html/guest___i_a32e_page_8c_source.html	/^<a name="l00096"><\/a>00096             <span class="keywordflow">continue<\/span>;$/;"	a
l00097	html/guest___i_a32e_page_8c_source.html	/^<a name="l00097"><\/a>00097         }$/;"	a
l00098	html/guest___i_a32e_page_8c_source.html	/^<a name="l00098"><\/a>00098         currentPDTEntry = *pCurrentPDTEntry;$/;"	a
l00099	html/guest___i_a32e_page_8c_source.html	/^<a name="l00099"><\/a>00099         <a class="code" href="monitor__util_8h.html#ae5b8234f7d553177a9d3f932fe1c112b" title="This function maps host physical address into hypervisor&#39;s virtual memory.">unmapHPAintoHVA<\/a>((<span class="keywordtype">void<\/span>*)pCurrentPDTEntry,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a0c8a2300d54b9380cad96861cc51469d" title="A type definition for guest page table entry.">PGT_ENTRY_t<\/a>));$/;"	a
l00100	html/guest___i_a32e_page_8c_source.html	/^<a name="l00100"><\/a>00100 $/;"	a
l00101	html/guest___i_a32e_page_8c_source.html	/^<a name="l00101"><\/a>00101         startGPAofPT = currentPDTEntry &amp; <a class="code" href="guest___i_a32e_page_8h.html#a23ff1894aab21877ab61e8d453aacaec" title="A mask that is used to extract base HPA of EPT PT from EPT PD table entry.">EPT_PD_ENTRY_MASK<\/a>;$/;"	a
l00102	html/guest___i_a32e_page_8c_source.html	/^<a name="l00102"><\/a>00102         $/;"	a
l00103	html/guest___i_a32e_page_8c_source.html	/^<a name="l00103"><\/a>00103         <span class="keywordflow">if<\/span>(startGPAofPT &amp;&amp; (currentPDTEntry &amp; 0x01) &amp;&amp; !(currentPDTEntry &amp; 0x80))$/;"	a
l00104	html/guest___i_a32e_page_8c_source.html	/^<a name="l00104"><\/a>00104         {$/;"	a
l00105	html/guest___i_a32e_page_8c_source.html	/^<a name="l00105"><\/a>00105             <a class="code" href="guest___i_a32e_page_8c.html#ab5dc18fd91ff94f88a941b35972f43ad" title="Traverse all pages based on IA32e paging mode. It traverse at page table (PT) level.">traverseIA32ePT<\/a>(vmid, appID, startGPAofPT,do_something);            $/;"	a
l00106	html/guest___i_a32e_page_8c_source.html	/^<a name="l00106"><\/a>00106         }$/;"	a
l00107	html/guest___i_a32e_page_8c_source.html	/^<a name="l00107"><\/a>00107 $/;"	a
l00108	html/guest___i_a32e_page_8c_source.html	/^<a name="l00108"><\/a>00108     }$/;"	a
l00109	html/guest___i_a32e_page_8c_source.html	/^<a name="l00109"><\/a>00109 }$/;"	a
l00110	html/guest___i_a32e_page_8c_source.html	/^<a name="l00110"><\/a>00110 $/;"	a
l00111	html/guest___i_a32e_page_8c_source.html	/^<a name="l00111"><\/a><a class="code" href="guest___i_a32e_page_8h.html#ab5dc18fd91ff94f88a941b35972f43ad">00111<\/a> <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="guest___i_a32e_page_8c.html#ab5dc18fd91ff94f88a941b35972f43ad" title="Traverse all pages based on IA32e paging mode. It traverse at page table (PT) level.">traverseIA32ePT<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> startGPAofPT, <span class="keywordtype">void<\/span>* (*do_something)(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> gpa))$/;"	a
l00112	html/guest___i_a32e_page_8c_source.html	/^<a name="l00112"><\/a>00112 {$/;"	a
l00113	html/guest___i_a32e_page_8c_source.html	/^<a name="l00113"><\/a>00113     <span class="keywordtype">int<\/span> ptIndex;$/;"	a
l00114	html/guest___i_a32e_page_8c_source.html	/^<a name="l00114"><\/a>00114     <span class="keywordflow">for<\/span>(ptIndex = 0 ; ptIndex &lt; <a class="code" href="guest___i_a32e_page_8h.html#a865a49bc90d4a6ea369beaf5337b215d" title="The maximum number of guest page table (PT) entries.">MAX_GUEST_PT_INDEX<\/a> ; ptIndex++)$/;"	a
l00115	html/guest___i_a32e_page_8c_source.html	/^<a name="l00115"><\/a>00115     {$/;"	a
l00116	html/guest___i_a32e_page_8c_source.html	/^<a name="l00116"><\/a>00116         <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> currentPTEntryGPA;$/;"	a
l00117	html/guest___i_a32e_page_8c_source.html	/^<a name="l00117"><\/a>00117         <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> currentPTEntryHPA;$/;"	a
l00118	html/guest___i_a32e_page_8c_source.html	/^<a name="l00118"><\/a>00118         <a class="code" href="monitor__types_8h.html#a0c8a2300d54b9380cad96861cc51469d" title="A type definition for guest page table entry.">PGT_ENTRY_t<\/a> *pCurrentPTEntry, currentPTEntry;$/;"	a
l00119	html/guest___i_a32e_page_8c_source.html	/^<a name="l00119"><\/a>00119         <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> pageGPA;$/;"	a
l00120	html/guest___i_a32e_page_8c_source.html	/^<a name="l00120"><\/a>00120 $/;"	a
l00121	html/guest___i_a32e_page_8c_source.html	/^<a name="l00121"><\/a>00121         currentPTEntryGPA = (startGPAofPT | (ptIndex &lt;&lt; <a class="code" href="guest___i_a32e_page_8h.html#abe8d240c883a8cac849d53fd22590794" title="The left-shift value for page table entry.">GUEST_PT_INDEX_SHIFT<\/a>));$/;"	a
l00122	html/guest___i_a32e_page_8c_source.html	/^<a name="l00122"><\/a>00122         currentPTEntryHPA = <a class="code" href="monitor__util_8h.html#a19ca3fbdba02a8a291fbf56b030e7323" title="This function converts guest physical address to host physical address.">gpaToHPA<\/a>(currentPTEntryGPA, 0);$/;"	a
l00123	html/guest___i_a32e_page_8c_source.html	/^<a name="l00123"><\/a>00123         <span class="keywordflow">if<\/span>(!currentPTEntryHPA)$/;"	a
l00124	html/guest___i_a32e_page_8c_source.html	/^<a name="l00124"><\/a>00124         {$/;"	a
l00125	html/guest___i_a32e_page_8c_source.html	/^<a name="l00125"><\/a>00125             <span class="keywordflow">continue<\/span>;$/;"	a
l00126	html/guest___i_a32e_page_8c_source.html	/^<a name="l00126"><\/a>00126         }$/;"	a
l00127	html/guest___i_a32e_page_8c_source.html	/^<a name="l00127"><\/a>00127         pCurrentPTEntry = (<a class="code" href="monitor__types_8h.html#a0c8a2300d54b9380cad96861cc51469d" title="A type definition for guest page table entry.">PGT_ENTRY_t<\/a>*)<a class="code" href="monitor__util_8h.html#ac66e271532851a5737a7968ddc1390e4" title="This function maps host physical address into hypervisor&#39;s virtual memory.">mapHPAintoHVA<\/a>(currentPTEntryHPA,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a0c8a2300d54b9380cad96861cc51469d" title="A type definition for guest page table entry.">PGT_ENTRY_t<\/a>));$/;"	a
l00128	html/guest___i_a32e_page_8c_source.html	/^<a name="l00128"><\/a>00128         <span class="keywordflow">if<\/span>(!pCurrentPTEntry)$/;"	a
l00129	html/guest___i_a32e_page_8c_source.html	/^<a name="l00129"><\/a>00129         {$/;"	a
l00130	html/guest___i_a32e_page_8c_source.html	/^<a name="l00130"><\/a>00130             <span class="keywordflow">continue<\/span>;$/;"	a
l00131	html/guest___i_a32e_page_8c_source.html	/^<a name="l00131"><\/a>00131         }$/;"	a
l00132	html/guest___i_a32e_page_8c_source.html	/^<a name="l00132"><\/a>00132         currentPTEntry = *pCurrentPTEntry;$/;"	a
l00133	html/guest___i_a32e_page_8c_source.html	/^<a name="l00133"><\/a>00133         <a class="code" href="monitor__util_8h.html#ae5b8234f7d553177a9d3f932fe1c112b" title="This function maps host physical address into hypervisor&#39;s virtual memory.">unmapHPAintoHVA<\/a>((<span class="keywordtype">void<\/span>*)pCurrentPTEntry,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a0c8a2300d54b9380cad96861cc51469d" title="A type definition for guest page table entry.">PGT_ENTRY_t<\/a>));$/;"	a
l00134	html/guest___i_a32e_page_8c_source.html	/^<a name="l00134"><\/a>00134 $/;"	a
l00135	html/guest___i_a32e_page_8c_source.html	/^<a name="l00135"><\/a>00135         pageGPA = currentPTEntry &amp; <a class="code" href="guest___i_a32e_page_8h.html#a369c8c91c392e3da4f0368c4640563df" title="A mask that is used to extract base HPA of page from EPT page table entry.">EPT_PT_ENTRY_MASK<\/a>;$/;"	a
l00136	html/guest___i_a32e_page_8c_source.html	/^<a name="l00136"><\/a>00136         <span class="keywordflow">if<\/span>(do_something &amp;&amp; (currentPTEntry &amp; 0x01))$/;"	a
l00137	html/guest___i_a32e_page_8c_source.html	/^<a name="l00137"><\/a>00137         {$/;"	a
l00138	html/guest___i_a32e_page_8c_source.html	/^<a name="l00138"><\/a>00138 $/;"	a
l00139	html/guest___i_a32e_page_8c_source.html	/^<a name="l00139"><\/a>00139             (*do_something)(vmid, appID, pageGPA);          $/;"	a
l00140	html/guest___i_a32e_page_8c_source.html	/^<a name="l00140"><\/a>00140         }$/;"	a
l00141	html/guest___i_a32e_page_8c_source.html	/^<a name="l00141"><\/a>00141 $/;"	a
l00142	html/guest___i_a32e_page_8c_source.html	/^<a name="l00142"><\/a>00142     }$/;"	a
l00143	html/guest___i_a32e_page_8c_source.html	/^<a name="l00143"><\/a>00143 }$/;"	a
l00001	html/guest___i_a32e_page_8d_source.html	/^<div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 core\/security_module\/guest_IA32ePage.o: \\$/;"	a
l00002	html/guest___i_a32e_page_8d_source.html	/^<a name="l00002"><\/a>00002  core\/security_module\/guest_IA32ePage.c \\$/;"	a
l00003	html/guest___i_a32e_page_8d_source.html	/^<a name="l00003"><\/a>00003 <\/pre><\/div><\/div><!-- contents -->$/;"	a
define-members	html/guest___i_a32e_page_8h.html	/^<tr><td colspan="2"><h2><a name="define-members"><\/a>$/;"	a
details	html/guest___i_a32e_page_8h.html	/^<hr\/><a name="details" id="details"><\/a><h2>상세한 설명<\/h2>$/;"	a
func-members	html/guest___i_a32e_page_8h.html	/^<tr><td colspan="2"><h2><a name="func-members"><\/a>$/;"	a
l00001	html/guest___i_a32e_page_8h_source.html	/^<a href="guest___i_a32e_page_8h.html">이 파일의 문서화 페이지로 가기<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 $/;"	a
l00172	html/guest___i_a32e_page_8h_source.html	/^<a name="l00172"><\/a>00172 <span class="preprocessor">#ifndef __IA32E_PAGE_H__<\/span>$/;"	a
l00173	html/guest___i_a32e_page_8h_source.html	/^<a name="l00173"><\/a>00173 <span class="preprocessor"><\/span><span class="preprocessor">#define __IA32E_PAGE_H__<\/span>$/;"	a
l00174	html/guest___i_a32e_page_8h_source.html	/^<a name="l00174"><\/a>00174 <span class="preprocessor"><\/span>$/;"	a
l00175	html/guest___i_a32e_page_8h_source.html	/^<a name="l00175"><\/a>00175 <span class="preprocessor">#include &lt;<a class="code" href="monitor__types_8h.html" title="Definitions of types that are used in this project.">monitor_types.h<\/a>&gt;<\/span>$/;"	a
l00176	html/guest___i_a32e_page_8h_source.html	/^<a name="l00176"><\/a>00176 $/;"	a
l00177	html/guest___i_a32e_page_8h_source.html	/^<a name="l00177"><\/a>00177 $/;"	a
l00178	html/guest___i_a32e_page_8h_source.html	/^<a name="l00178"><\/a><a class="code" href="guest___i_a32e_page_8h.html#a71ab36e768a6cf0cff31a9e288abe306">00178<\/a> <span class="preprocessor">#define EPT_PML4_ENTRY_MASK     ((U64_t)(~0xFFF))<\/span>$/;"	a
l00179	html/guest___i_a32e_page_8h_source.html	/^<a name="l00179"><\/a><a class="code" href="guest___i_a32e_page_8h.html#aca4d6718af5283d4aa065fac24e64e54">00179<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_PDP_ENTRY_MASK      ((U64_t)(~0xFFF))<\/span>$/;"	a
l00180	html/guest___i_a32e_page_8h_source.html	/^<a name="l00180"><\/a><a class="code" href="guest___i_a32e_page_8h.html#a23ff1894aab21877ab61e8d453aacaec">00180<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_PD_ENTRY_MASK       ((U64_t)(~0xFFF))<\/span>$/;"	a
l00181	html/guest___i_a32e_page_8h_source.html	/^<a name="l00181"><\/a><a class="code" href="guest___i_a32e_page_8h.html#a369c8c91c392e3da4f0368c4640563df">00181<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_PT_ENTRY_MASK       ((U64_t)(~0xFFF))<\/span>$/;"	a
l00182	html/guest___i_a32e_page_8h_source.html	/^<a name="l00182"><\/a>00182 <span class="preprocessor"><\/span>    $/;"	a
l00183	html/guest___i_a32e_page_8h_source.html	/^<a name="l00183"><\/a><a class="code" href="guest___i_a32e_page_8h.html#a95899c079745b0d248c7999db30739ce">00183<\/a> <span class="preprocessor">#define MAX_GUEST_PML4_INDEX    (0x1FF + 1)<\/span>$/;"	a
l00184	html/guest___i_a32e_page_8h_source.html	/^<a name="l00184"><\/a><a class="code" href="guest___i_a32e_page_8h.html#aea301bb20ba8cf3d3c28e8153142c4e7">00184<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define MAX_GUEST_PDP_INDEX     (0x1FF + 1)<\/span>$/;"	a
l00185	html/guest___i_a32e_page_8h_source.html	/^<a name="l00185"><\/a><a class="code" href="guest___i_a32e_page_8h.html#a614095969a102b7d4637860c27460e35">00185<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define MAX_GUEST_PD_INDEX      (0x1FF + 1)<\/span>$/;"	a
l00186	html/guest___i_a32e_page_8h_source.html	/^<a name="l00186"><\/a><a class="code" href="guest___i_a32e_page_8h.html#a865a49bc90d4a6ea369beaf5337b215d">00186<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define MAX_GUEST_PT_INDEX      (0x1FF + 1)<\/span>$/;"	a
l00187	html/guest___i_a32e_page_8h_source.html	/^<a name="l00187"><\/a>00187 <span class="preprocessor"><\/span>$/;"	a
l00188	html/guest___i_a32e_page_8h_source.html	/^<a name="l00188"><\/a><a class="code" href="guest___i_a32e_page_8h.html#a4f9f11d3f1d992b8d528dc6ce8702000">00188<\/a> <span class="preprocessor">#define GUEST_PML4_INDEX_SHIFT  (3)<\/span>$/;"	a
l00189	html/guest___i_a32e_page_8h_source.html	/^<a name="l00189"><\/a><a class="code" href="guest___i_a32e_page_8h.html#a97220f3f7ecb24472d9d17523e5a5b3c">00189<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define GUEST_PDP_INDEX_SHIFT   (3)<\/span>$/;"	a
l00190	html/guest___i_a32e_page_8h_source.html	/^<a name="l00190"><\/a><a class="code" href="guest___i_a32e_page_8h.html#aebfd7bdceef07644bb6ddb5d9f647d7b">00190<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define GUEST_PD_INDEX_SHIFT    (3)<\/span>$/;"	a
l00191	html/guest___i_a32e_page_8h_source.html	/^<a name="l00191"><\/a><a class="code" href="guest___i_a32e_page_8h.html#abe8d240c883a8cac849d53fd22590794">00191<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define GUEST_PT_INDEX_SHIFT    (3)<\/span>$/;"	a
l00192	html/guest___i_a32e_page_8h_source.html	/^<a name="l00192"><\/a>00192 <span class="preprocessor"><\/span>$/;"	a
l00193	html/guest___i_a32e_page_8h_source.html	/^<a name="l00193"><\/a>00193 $/;"	a
l00194	html/guest___i_a32e_page_8h_source.html	/^<a name="l00194"><\/a>00194 $/;"	a
l00195	html/guest___i_a32e_page_8h_source.html	/^<a name="l00195"><\/a>00195 <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="guest___i_a32e_page_8c.html#af233f3d87b0a388e0c534d928167e20a" title="Traverse all pages based on IA32e paging mode. It traverse at PML4 level.">traverseIA32ePages<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid,               $/;"	a
l00196	html/guest___i_a32e_page_8h_source.html	/^<a name="l00196"><\/a>00196                         <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID,            $/;"	a
l00197	html/guest___i_a32e_page_8h_source.html	/^<a name="l00197"><\/a>00197                         <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> startGPAofPageTable, $/;"	a
l00198	html/guest___i_a32e_page_8h_source.html	/^<a name="l00198"><\/a>00198                         <span class="keywordtype">void<\/span>* (*do_something)(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> gpa) $/;"	a
l00199	html/guest___i_a32e_page_8h_source.html	/^<a name="l00199"><\/a>00199                         );$/;"	a
l00200	html/guest___i_a32e_page_8h_source.html	/^<a name="l00200"><\/a>00200 $/;"	a
l00201	html/guest___i_a32e_page_8h_source.html	/^<a name="l00201"><\/a>00201 <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="guest___i_a32e_page_8c.html#acc5be7aa7fcf4568891e6620f0b94141" title="Traverse all pages based on IA32e paging mode. It traverse at page directory pointer (PDP) level...">traverseIA32ePDPT<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid,                $/;"	a
l00202	html/guest___i_a32e_page_8h_source.html	/^<a name="l00202"><\/a>00202                         <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID,            $/;"	a
l00203	html/guest___i_a32e_page_8h_source.html	/^<a name="l00203"><\/a>00203                         <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> startGPAofPDPT, $/;"	a
l00204	html/guest___i_a32e_page_8h_source.html	/^<a name="l00204"><\/a>00204                         <span class="keywordtype">void<\/span>* (*do_something)(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> gpa) $/;"	a
l00205	html/guest___i_a32e_page_8h_source.html	/^<a name="l00205"><\/a>00205                         );$/;"	a
l00206	html/guest___i_a32e_page_8h_source.html	/^<a name="l00206"><\/a>00206 $/;"	a
l00207	html/guest___i_a32e_page_8h_source.html	/^<a name="l00207"><\/a>00207 <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="guest___i_a32e_page_8c.html#a7253467a3aa5a9560748b75c4b7c57d5" title="Traverse all pages based on IA32e paging mode. It traverse at page directory (PD) level...">traverseIA32ePDT<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid,                 $/;"	a
l00208	html/guest___i_a32e_page_8h_source.html	/^<a name="l00208"><\/a>00208                         <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID,            $/;"	a
l00209	html/guest___i_a32e_page_8h_source.html	/^<a name="l00209"><\/a>00209                         <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> startGPAofPDT, $/;"	a
l00210	html/guest___i_a32e_page_8h_source.html	/^<a name="l00210"><\/a>00210                         <span class="keywordtype">void<\/span>* (*do_something)(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> gpa) $/;"	a
l00211	html/guest___i_a32e_page_8h_source.html	/^<a name="l00211"><\/a>00211                         );$/;"	a
l00212	html/guest___i_a32e_page_8h_source.html	/^<a name="l00212"><\/a>00212 $/;"	a
l00213	html/guest___i_a32e_page_8h_source.html	/^<a name="l00213"><\/a>00213 <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="guest___i_a32e_page_8c.html#ab5dc18fd91ff94f88a941b35972f43ad" title="Traverse all pages based on IA32e paging mode. It traverse at page table (PT) level.">traverseIA32ePT<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid,              $/;"	a
l00214	html/guest___i_a32e_page_8h_source.html	/^<a name="l00214"><\/a>00214                         <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID,            $/;"	a
l00215	html/guest___i_a32e_page_8h_source.html	/^<a name="l00215"><\/a>00215                         <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> startGPAofPT, $/;"	a
l00216	html/guest___i_a32e_page_8h_source.html	/^<a name="l00216"><\/a>00216                         <span class="keywordtype">void<\/span>* (*do_something)(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> gpa) $/;"	a
l00217	html/guest___i_a32e_page_8h_source.html	/^<a name="l00217"><\/a>00217                         );$/;"	a
l00218	html/guest___i_a32e_page_8h_source.html	/^<a name="l00218"><\/a>00218 <span class="preprocessor">#endif<\/span>$/;"	a
details	html/guest__state_8c.html	/^<hr\/><a name="details" id="details"><\/a><h2>상세한 설명<\/h2>$/;"	a
func-members	html/guest__state_8c.html	/^<tr><td colspan="2"><h2><a name="func-members"><\/a>$/;"	a
l00001	html/guest__state_8c_source.html	/^<a href="guest__state_8c.html">이 파일의 문서화 페이지로 가기<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 $/;"	a
l00004	html/guest__state_8c_source.html	/^<a name="l00004"><\/a>00004 <span class="preprocessor">#include &lt;<a class="code" href="guest__state_8h.html" title="High-level facilities to get guest VM&#39;s information.">guest_state.h<\/a>&gt;<\/span>$/;"	a
l00005	html/guest__state_8c_source.html	/^<a name="l00005"><\/a>00005 <span class="preprocessor">#include &lt;<a class="code" href="vmcs_8h.html" title="Definition of constants related to VMCS.">vmcs.h<\/a>&gt;<\/span>$/;"	a
l00006	html/guest__state_8c_source.html	/^<a name="l00006"><\/a>00006 <span class="preprocessor">#include &lt;<a class="code" href="guest___i_a32e_page_8h.html" title="functions and constants to support IA32e paging mode of guest VM">guest_IA32ePage.h<\/a>&gt;<\/span>$/;"	a
l00007	html/guest__state_8c_source.html	/^<a name="l00007"><\/a>00007 $/;"	a
l00008	html/guest__state_8c_source.html	/^<a name="l00008"><\/a><a class="code" href="guest__state_8h.html#a4fe3391f0854e7d1c8b553adb4284436">00008<\/a> <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> <a class="code" href="guest__state_8c.html#a4fe3391f0854e7d1c8b553adb4284436" title="Get the start address of page table.">get_page_table_base_GPA<\/a>()$/;"	a
l00009	html/guest__state_8c_source.html	/^<a name="l00009"><\/a>00009 {$/;"	a
l00010	html/guest__state_8c_source.html	/^<a name="l00010"><\/a>00010     <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> cr3Value;$/;"	a
l00011	html/guest__state_8c_source.html	/^<a name="l00011"><\/a>00011     cr3Value = <a class="code" href="vmcs_8h.html#a78803919617e6c9fb6020ede0a20efac" title="get the value of the guest CR3 control register">get_guest_cr3_value<\/a>();$/;"	a
l00012	html/guest__state_8c_source.html	/^<a name="l00012"><\/a>00012     cr3Value = cr3Value &amp; <a class="code" href="guest__state_8h.html#a11dd8a149642208c1e97f359d9c7cbf5" title="A mask which is used to extract the base physical address of page table from CR3 control register val...">CR3_MASK<\/a>;$/;"	a
l00013	html/guest__state_8c_source.html	/^<a name="l00013"><\/a>00013     <span class="keywordflow">return<\/span> cr3Value;$/;"	a
l00014	html/guest__state_8c_source.html	/^<a name="l00014"><\/a>00014 }$/;"	a
l00015	html/guest__state_8c_source.html	/^<a name="l00015"><\/a>00015 $/;"	a
l00016	html/guest__state_8c_source.html	/^<a name="l00016"><\/a>00016 $/;"	a
l00017	html/guest__state_8c_source.html	/^<a name="l00017"><\/a><a class="code" href="guest__state_8h.html#a33fb594e7472da1af81f2abf272a64b2">00017<\/a> <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> <a class="code" href="guest__state_8c.html#a33fb594e7472da1af81f2abf272a64b2" title="Get the start address of extended page table.">get_ept_base_HPA<\/a>()$/;"	a
l00018	html/guest__state_8c_source.html	/^<a name="l00018"><\/a>00018 {$/;"	a
l00019	html/guest__state_8c_source.html	/^<a name="l00019"><\/a>00019     <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> eptpValue;$/;"	a
l00020	html/guest__state_8c_source.html	/^<a name="l00020"><\/a>00020     eptpValue = <a class="code" href="vmcs_8h.html#a5c020f2b6689be533301e18f9b9061ae" title="get the value of guest&#39;s EPTP field in the VMCS">get_guest_eptp_value<\/a>();$/;"	a
l00021	html/guest__state_8c_source.html	/^<a name="l00021"><\/a>00021     eptpValue = eptpValue &amp; <a class="code" href="guest__state_8h.html#a6b539707d3e99cfd58c92476e9a98fd6" title="A mask which is used to extract the base physical address of page table from EPTP field in a VMCS  Se...">EPTP_MASK<\/a>;$/;"	a
l00022	html/guest__state_8c_source.html	/^<a name="l00022"><\/a>00022 $/;"	a
l00023	html/guest__state_8c_source.html	/^<a name="l00023"><\/a>00023     <span class="keywordflow">return<\/span> eptpValue;$/;"	a
l00024	html/guest__state_8c_source.html	/^<a name="l00024"><\/a>00024 }$/;"	a
l00025	html/guest__state_8c_source.html	/^<a name="l00025"><\/a>00025 $/;"	a
l00026	html/guest__state_8c_source.html	/^<a name="l00026"><\/a><a class="code" href="guest__state_8h.html#a3d8f41db587aed7fce30c4edcd4aaaf6">00026<\/a> <span class="keywordtype">void<\/span> <a class="code" href="guest__state_8c.html#a3d8f41db587aed7fce30c4edcd4aaaf6" title="Traverse all pages that start from startGPAofPageTable and do something for each page.">traverseGuestPages<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> startGPAofPageTable, <span class="keywordtype">void<\/span>* (*do_something)(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> gpa))$/;"	a
l00027	html/guest__state_8c_source.html	/^<a name="l00027"><\/a>00027 {$/;"	a
l00028	html/guest__state_8c_source.html	/^<a name="l00028"><\/a>00028     <a class="code" href="guest___i_a32e_page_8c.html#af233f3d87b0a388e0c534d928167e20a" title="Traverse all pages based on IA32e paging mode. It traverse at PML4 level.">traverseIA32ePages<\/a>(vmid, appID, startGPAofPageTable, do_something);$/;"	a
l00029	html/guest__state_8c_source.html	/^<a name="l00029"><\/a>00029 }$/;"	a
l00001	html/guest__state_8d_source.html	/^<div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 core\/security_module\/guest_state.o: core\/security_module\/guest_state.c \\$/;"	a
l00002	html/guest__state_8d_source.html	/^<a name="l00002"><\/a>00002 $/;"	a
l00003	html/guest__state_8d_source.html	/^<a name="l00003"><\/a>00003 core\/security_module\/guest_state.c \\$/;"	a
l00004	html/guest__state_8d_source.html	/^<a name="l00004"><\/a>00004 <\/pre><\/div><\/div><!-- contents -->$/;"	a
define-members	html/guest__state_8h.html	/^<tr><td colspan="2"><h2><a name="define-members"><\/a>$/;"	a
details	html/guest__state_8h.html	/^<hr\/><a name="details" id="details"><\/a><h2>상세한 설명<\/h2>$/;"	a
func-members	html/guest__state_8h.html	/^<tr><td colspan="2"><h2><a name="func-members"><\/a>$/;"	a
l00001	html/guest__state_8h_source.html	/^<a href="guest__state_8h.html">이 파일의 문서화 페이지로 가기<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 $/;"	a
l00033	html/guest__state_8h_source.html	/^<a name="l00033"><\/a>00033 <span class="preprocessor">#ifndef __GUEST_STATE_H__<\/span>$/;"	a
l00034	html/guest__state_8h_source.html	/^<a name="l00034"><\/a>00034 <span class="preprocessor"><\/span><span class="preprocessor">#define __GUEST_STATE_H__<\/span>$/;"	a
l00035	html/guest__state_8h_source.html	/^<a name="l00035"><\/a>00035 <span class="preprocessor"><\/span><span class="preprocessor">#include &lt;<a class="code" href="monitor__types_8h.html" title="Definitions of types that are used in this project.">monitor_types.h<\/a>&gt;<\/span>$/;"	a
l00036	html/guest__state_8h_source.html	/^<a name="l00036"><\/a>00036 <span class="preprocessor">#include &lt;<a class="code" href="vmcs_8h.html" title="Definition of constants related to VMCS.">vmcs.h<\/a>&gt;<\/span>$/;"	a
l00037	html/guest__state_8h_source.html	/^<a name="l00037"><\/a>00037 $/;"	a
l00038	html/guest__state_8h_source.html	/^<a name="l00038"><\/a><a class="code" href="guest__state_8h.html#a11dd8a149642208c1e97f359d9c7cbf5">00038<\/a> <span class="preprocessor">#define CR3_MASK (~((U64_t)0xFFF))<\/span>$/;"	a
l00039	html/guest__state_8h_source.html	/^<a name="l00039"><\/a><a class="code" href="guest__state_8h.html#a6b539707d3e99cfd58c92476e9a98fd6">00039<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define EPTP_MASK (~((U64_t)0xFFF))<\/span>$/;"	a
l00040	html/guest__state_8h_source.html	/^<a name="l00040"><\/a>00040 <span class="preprocessor"><\/span>$/;"	a
l00041	html/guest__state_8h_source.html	/^<a name="l00041"><\/a>00041 $/;"	a
l00042	html/guest__state_8h_source.html	/^<a name="l00042"><\/a>00042 <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> <a class="code" href="guest__state_8c.html#a4fe3391f0854e7d1c8b553adb4284436" title="Get the start address of page table.">get_page_table_base_GPA<\/a>();$/;"	a
l00043	html/guest__state_8h_source.html	/^<a name="l00043"><\/a>00043 <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> <a class="code" href="guest__state_8c.html#a33fb594e7472da1af81f2abf272a64b2" title="Get the start address of extended page table.">get_ept_base_HPA<\/a>();$/;"	a
l00044	html/guest__state_8h_source.html	/^<a name="l00044"><\/a>00044 $/;"	a
l00045	html/guest__state_8h_source.html	/^<a name="l00045"><\/a>00045 <span class="keywordtype">void<\/span> <a class="code" href="guest__state_8c.html#a3d8f41db587aed7fce30c4edcd4aaaf6" title="Traverse all pages that start from startGPAofPageTable and do something for each page.">traverseGuestPages<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid,              $/;"	a
l00046	html/guest__state_8h_source.html	/^<a name="l00046"><\/a>00046                         <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID,            $/;"	a
l00047	html/guest__state_8h_source.html	/^<a name="l00047"><\/a>00047                         <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> startGPAofPageTable, $/;"	a
l00048	html/guest__state_8h_source.html	/^<a name="l00048"><\/a>00048                         <span class="keywordtype">void<\/span>* (*do_something)(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> gpa) $/;"	a
l00049	html/guest__state_8h_source.html	/^<a name="l00049"><\/a>00049                         );$/;"	a
l00050	html/guest__state_8h_source.html	/^<a name="l00050"><\/a>00050 $/;"	a
l00051	html/guest__state_8h_source.html	/^<a name="l00051"><\/a>00051 <span class="preprocessor">#endif<\/span>$/;"	a
usage	html/installdox	/^sub usage {$/;"	s
Array	html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	c
Array.push	html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	m
C	html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	v
E	html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	v
F	html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	v
K	html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	f
e	html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	f
j	html/jquery.js	/^var I=(K>0?this.clone(true):this).get();o.fn[F].apply(o(L[K]),I);J=J.concat(I)}return this.pushStack(J,E,G)}});o.each({removeAttr:function(E){o.attr(this,E,"");if(this.nodeType==1){this.removeAttribute(E)}},addClass:function(E){o.className.add(this,E)},removeClass:function(E){o.className.remove(this,E)},toggleClass:function(F,E){if(typeof E!=="boolean"){E=!o.className.has(this,F)}o.className[E?"add":"remove"](this,F)},remove:function(E){if(!E||o.filter(E,[this]).length){o("*",this).add([this]).each(function(){o.event.remove(this);o.removeData(this)});if(this.parentNode){this.parentNode.removeChild(this)}}},empty:function(){o(this).children().remove();while(this.firstChild){this.removeChild(this.firstChild)}}},function(E,F){o.fn[E]=function(){return this.each(F,arguments)}});function j(E,F){return E[0]&&parseInt(o.curCSS(E[0],F,true),10)||0}var h="jQuery"+e(),v=0,A={};o.extend({cache:{},data:function(F,E,G){F=F==l?A:F;var H=F[h];if(!H){H=F[h]=++v}if(E&&!o.cache[H]){o.cache[H]={}}if(G!==g){o.cache[H][E]=G}return E?o.cache[H][E]:H},removeData:function(F,E){F=F==l?A:F;var H=F[h];if(E){if(o.cache[H]){delete o.cache[H][E];E="";for(E in o.cache[H]){break}if(!E){o.removeData(F)}}}else{try{delete F[h]}catch(G){if(F.removeAttribute){F.removeAttribute(h)}}delete o.cache[H]}},queue:function(F,E,H){if(F){E=(E||"fx")+"queue";var G=o.data(F,E);if(!G||o.isArray(H)){G=o.data(F,E,o.makeArray(H))}else{if(H){G.push(H)}}}return G},dequeue:function(H,G){var E=o.queue(H,G),F=E.shift();if(!G||G==="fx"){F=E[0]}if(F!==g){F.call(H)}}});o.fn.extend({data:function(E,G){var H=E.split(".");H[1]=H[1]?"."+H[1]:"";if(G===g){var F=this.triggerHandler("getData"+H[1]+"!",[H[0]]);if(F===g&&this.length){F=o.data(this[0],E)}return F===g&&H[1]?this.data(H[0]):F}else{return this.trigger("setData"+H[1]+"!",[H[0],G]).each(function(){o.data(this,E,G)})}},removeData:function(E){return this.each(function(){o.removeData(this,E)})},queue:function(E,F){if(typeof E!=="string"){F=E;E="fx"}if(F===g){return o.queue(this[0],E)}return this.each(function(){var G=o.queue(this,E,F);if(E=="fx"&&G.length==1){G[0].call(this)}})},dequeue:function(E){return this.each(function(){o.dequeue(this,E)})}});$/;"	f
o.browser.version	html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	p
o.fn.init	html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	c
z	html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	f
details	html/memory__ownership__table_8c.html	/^<hr\/><a name="details" id="details"><\/a><h2>상세한 설명<\/h2>$/;"	a
func-members	html/memory__ownership__table_8c.html	/^<tr><td colspan="2"><h2><a name="func-members"><\/a>$/;"	a
l00001	html/memory__ownership__table_8c_source.html	/^<a href="memory__ownership__table_8c.html">이 파일의 문서화 페이지로 가기<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 $/;"	a
l00012	html/memory__ownership__table_8c_source.html	/^<a name="l00012"><\/a>00012 <span class="preprocessor">#include &lt;<a class="code" href="memory__ownership__table_8h.html" title="Definition of data structrues &amp; constants for memory ownership table. .">memory_ownership_table.h<\/a>&gt;<\/span>$/;"	a
l00013	html/memory__ownership__table_8c_source.html	/^<a name="l00013"><\/a>00013 <span class="preprocessor">#include &lt;<a class="code" href="guest__state_8h.html" title="High-level facilities to get guest VM&#39;s information.">guest_state.h<\/a>&gt;<\/span>$/;"	a
l00014	html/memory__ownership__table_8c_source.html	/^<a name="l00014"><\/a>00014 <span class="preprocessor">#include &lt;<a class="code" href="monitor__util_8h.html" title="This file exists for supporting some uiility functions.">monitor_util.h<\/a>&gt;<\/span>$/;"	a
l00015	html/memory__ownership__table_8c_source.html	/^<a name="l00015"><\/a>00015 <span class="preprocessor">#include &lt;<a class="code" href="monitor__ept_8h.html" title="This file declares some EPT-related functions and defines EPT-related constants.">monitor_ept.h<\/a>&gt;<\/span>$/;"	a
l00016	html/memory__ownership__table_8c_source.html	/^<a name="l00016"><\/a>00016 $/;"	a
l00017	html/memory__ownership__table_8c_source.html	/^<a name="l00017"><\/a>00017 <span class="preprocessor">#ifdef CONFIG_BITVISOR<\/span>$/;"	a
l00018	html/memory__ownership__table_8c_source.html	/^<a name="l00018"><\/a>00018 <span class="preprocessor"><\/span><span class="preprocessor">#include &lt;mm.h&gt;<\/span>$/;"	a
l00019	html/memory__ownership__table_8c_source.html	/^<a name="l00019"><\/a>00019 <span class="preprocessor">#endif<\/span>$/;"	a
l00020	html/memory__ownership__table_8c_source.html	/^<a name="l00020"><\/a>00020 <span class="preprocessor"><\/span>$/;"	a
l00021	html/memory__ownership__table_8c_source.html	/^<a name="l00021"><\/a>00021 <span class="keyword">static<\/span> <span class="keyword">struct <\/span><a class="code" href="structmemory__ownership__table__entry__t.html" title="A structure-type definition for one memory ownership table entry.">memory_ownership_table_entry_t<\/a> memory_ownership_table[<a class="code" href="memory__ownership__table_8h.html#acafa06dcdfd6ded9cab8f00a00310fa0" title="A constant that describes the number of entries that the memory ownership table has to contain...">NUMBER_OF_MEMORY_OWNERSHIP_TABLE_ENTRY<\/a>];$/;"	a
l00022	html/memory__ownership__table_8c_source.html	/^<a name="l00022"><\/a>00022 $/;"	a
l00023	html/memory__ownership__table_8c_source.html	/^<a name="l00023"><\/a><a class="code" href="memory__ownership__table_8c.html#aa0e8340e3e2dc314a25b0c93fdfd54ab">00023<\/a> <span class="keywordtype">void<\/span> <a class="code" href="memory__ownership__table_8h.html#aa0e8340e3e2dc314a25b0c93fdfd54ab" title="Start to protect of currently running process&#39;s pages.">protectCurrentApplication<\/a>()$/;"	a
l00024	html/memory__ownership__table_8c_source.html	/^<a name="l00024"><\/a>00024 {$/;"	a
l00025	html/memory__ownership__table_8c_source.html	/^<a name="l00025"><\/a>00025     <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> newVMID;$/;"	a
l00026	html/memory__ownership__table_8c_source.html	/^<a name="l00026"><\/a>00026     <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> newAPPID;$/;"	a
l00027	html/memory__ownership__table_8c_source.html	/^<a name="l00027"><\/a>00027     <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> cr3GPA;$/;"	a
l00028	html/memory__ownership__table_8c_source.html	/^<a name="l00028"><\/a>00028 $/;"	a
l00029	html/memory__ownership__table_8c_source.html	/^<a name="l00029"><\/a>00029     <a class="code" href="memory__ownership__table_8h.html#ae1d205ac777b83ae72c2dd3b447a65ba" title="Allocate new VM ID &amp; application ID.">allocateNewApplicationIdentifiers<\/a>(&amp;newVMID,&amp;newAPPID);$/;"	a
l00030	html/memory__ownership__table_8c_source.html	/^<a name="l00030"><\/a>00030     cr3GPA = <a class="code" href="guest__state_8c.html#a4fe3391f0854e7d1c8b553adb4284436" title="Get the start address of page table.">get_page_table_base_GPA<\/a>();$/;"	a
l00031	html/memory__ownership__table_8c_source.html	/^<a name="l00031"><\/a>00031     <a class="code" href="guest__state_8c.html#a3d8f41db587aed7fce30c4edcd4aaaf6" title="Traverse all pages that start from startGPAofPageTable and do something for each page.">traverseGuestPages<\/a>(newVMID, newAPPID, cr3GPA, <a class="code" href="memory__ownership__table_8h.html#acffc09bfc5012b61572af3d6ae889d43" title="Set the a frame to closed state.">closePage<\/a>);$/;"	a
l00032	html/memory__ownership__table_8c_source.html	/^<a name="l00032"><\/a>00032     printf(<span class="stringliteral">&quot;Closing end\\n&quot;<\/span>);$/;"	a
l00033	html/memory__ownership__table_8c_source.html	/^<a name="l00033"><\/a>00033 }$/;"	a
l00034	html/memory__ownership__table_8c_source.html	/^<a name="l00034"><\/a>00034 $/;"	a
l00035	html/memory__ownership__table_8c_source.html	/^<a name="l00035"><\/a><a class="code" href="memory__ownership__table_8c.html#ae1d205ac777b83ae72c2dd3b447a65ba">00035<\/a> <span class="keywordtype">void<\/span> <a class="code" href="memory__ownership__table_8h.html#ae1d205ac777b83ae72c2dd3b447a65ba" title="Allocate new VM ID &amp; application ID.">allocateNewApplicationIdentifiers<\/a>(<a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> *new_VMID, <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> *new_APPID)$/;"	a
l00036	html/memory__ownership__table_8c_source.html	/^<a name="l00036"><\/a>00036 {$/;"	a
l00037	html/memory__ownership__table_8c_source.html	/^<a name="l00037"><\/a>00037     <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> allocatedVMID;$/;"	a
l00038	html/memory__ownership__table_8c_source.html	/^<a name="l00038"><\/a>00038     <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> allocatedAppID;$/;"	a
l00039	html/memory__ownership__table_8c_source.html	/^<a name="l00039"><\/a>00039 $/;"	a
l00040	html/memory__ownership__table_8c_source.html	/^<a name="l00040"><\/a>00040     allocatedVMID = <a class="code" href="memory__ownership__table_8h.html#ae2fff5cc4db7b79454cc5340eff858e8" title="This function returns currently running VM&#39;s ID. If it does not exist, this function allocates new on...">allocateNewVMID<\/a>();$/;"	a
l00041	html/memory__ownership__table_8c_source.html	/^<a name="l00041"><\/a>00041     *new_VMID = allocatedVMID;$/;"	a
l00042	html/memory__ownership__table_8c_source.html	/^<a name="l00042"><\/a>00042 $/;"	a
l00043	html/memory__ownership__table_8c_source.html	/^<a name="l00043"><\/a>00043     allocatedAppID = <a class="code" href="memory__ownership__table_8h.html#a5e564d933aee4d6204f23f9eba2d4740" title="This function returns currently running process&#39;s ID. For new process, this function allocates new on...">allocateNewAppID<\/a>();$/;"	a
l00044	html/memory__ownership__table_8c_source.html	/^<a name="l00044"><\/a>00044     *new_APPID = allocatedAppID;$/;"	a
l00045	html/memory__ownership__table_8c_source.html	/^<a name="l00045"><\/a>00045 }$/;"	a
l00046	html/memory__ownership__table_8c_source.html	/^<a name="l00046"><\/a>00046 $/;"	a
l00047	html/memory__ownership__table_8c_source.html	/^<a name="l00047"><\/a><a class="code" href="memory__ownership__table_8c.html#ae2fff5cc4db7b79454cc5340eff858e8">00047<\/a> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> <a class="code" href="memory__ownership__table_8h.html#ae2fff5cc4db7b79454cc5340eff858e8" title="This function returns currently running VM&#39;s ID. If it does not exist, this function allocates new on...">allocateNewVMID<\/a>()$/;"	a
l00048	html/memory__ownership__table_8c_source.html	/^<a name="l00048"><\/a>00048 {$/;"	a
l00049	html/memory__ownership__table_8c_source.html	/^<a name="l00049"><\/a>00049     <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> newVMID;$/;"	a
l00050	html/memory__ownership__table_8c_source.html	/^<a name="l00050"><\/a>00050     newVMID = <a class="code" href="guest__state_8c.html#a33fb594e7472da1af81f2abf272a64b2" title="Get the start address of extended page table.">get_ept_base_HPA<\/a>();$/;"	a
l00051	html/memory__ownership__table_8c_source.html	/^<a name="l00051"><\/a>00051     <span class="keywordflow">return<\/span> newVMID;$/;"	a
l00052	html/memory__ownership__table_8c_source.html	/^<a name="l00052"><\/a>00052 }$/;"	a
l00053	html/memory__ownership__table_8c_source.html	/^<a name="l00053"><\/a>00053 $/;"	a
l00054	html/memory__ownership__table_8c_source.html	/^<a name="l00054"><\/a><a class="code" href="memory__ownership__table_8c.html#aa6dd955e652782e55e14ceec2c99e0b7">00054<\/a> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> <a class="code" href="memory__ownership__table_8h.html#a5e564d933aee4d6204f23f9eba2d4740" title="This function returns currently running process&#39;s ID. For new process, this function allocates new on...">allocateNewAppID<\/a>()$/;"	a
l00055	html/memory__ownership__table_8c_source.html	/^<a name="l00055"><\/a>00055 {$/;"	a
l00056	html/memory__ownership__table_8c_source.html	/^<a name="l00056"><\/a>00056     <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> newAppID;$/;"	a
l00057	html/memory__ownership__table_8c_source.html	/^<a name="l00057"><\/a>00057     newAppID = <a class="code" href="guest__state_8c.html#a4fe3391f0854e7d1c8b553adb4284436" title="Get the start address of page table.">get_page_table_base_GPA<\/a>();   $/;"	a
l00058	html/memory__ownership__table_8c_source.html	/^<a name="l00058"><\/a>00058     <span class="keywordflow">return<\/span> newAppID;$/;"	a
l00059	html/memory__ownership__table_8c_source.html	/^<a name="l00059"><\/a>00059 }$/;"	a
l00060	html/memory__ownership__table_8c_source.html	/^<a name="l00060"><\/a>00060 $/;"	a
l00061	html/memory__ownership__table_8c_source.html	/^<a name="l00061"><\/a><a class="code" href="memory__ownership__table_8c.html#a072c0b2cb03e68adb03689dffe34aa4c">00061<\/a> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> <a class="code" href="memory__ownership__table_8h.html#a072c0b2cb03e68adb03689dffe34aa4c" title="A function which is used to change HPA to index of the memory ownership table.">getMemoryOwnershipTableIndex<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> hpa)$/;"	a
l00062	html/memory__ownership__table_8c_source.html	/^<a name="l00062"><\/a>00062 {$/;"	a
l00063	html/memory__ownership__table_8c_source.html	/^<a name="l00063"><\/a>00063     <span class="keywordflow">return<\/span> hpa &gt;&gt; <a class="code" href="memory__ownership__table_8h.html#af4040dfd1fdb6c10d8ed2631173e5597" title="A constant which is used to change HPA to index of the memory ownership table.">HPA_TO_INDEX_SHIFT<\/a>;$/;"	a
l00064	html/memory__ownership__table_8c_source.html	/^<a name="l00064"><\/a>00064 }$/;"	a
l00065	html/memory__ownership__table_8c_source.html	/^<a name="l00065"><\/a>00065 $/;"	a
l00066	html/memory__ownership__table_8c_source.html	/^<a name="l00066"><\/a><a class="code" href="memory__ownership__table_8c.html#af13e8ca1a88180df93e4af4db30e3244">00066<\/a> <span class="keywordtype">void<\/span>* <a class="code" href="memory__ownership__table_8h.html#acffc09bfc5012b61572af3d6ae889d43" title="Set the a frame to closed state.">closePage<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> gpa)$/;"	a
l00067	html/memory__ownership__table_8c_source.html	/^<a name="l00067"><\/a>00067 {$/;"	a
l00068	html/memory__ownership__table_8c_source.html	/^<a name="l00068"><\/a>00068     <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> targetEPTEntryHPA = 0;$/;"	a
l00069	html/memory__ownership__table_8c_source.html	/^<a name="l00069"><\/a>00069     <a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a> *pTargetEPTEntry, targetEPTEntry;$/;"	a
l00070	html/memory__ownership__table_8c_source.html	/^<a name="l00070"><\/a>00070     <a class="code" href="monitor__util_8h.html#a19ca3fbdba02a8a291fbf56b030e7323" title="This function converts guest physical address to host physical address.">gpaToHPA<\/a>(gpa, &amp;targetEPTEntryHPA);$/;"	a
l00071	html/memory__ownership__table_8c_source.html	/^<a name="l00071"><\/a>00071     <span class="keywordflow">if<\/span>(targetEPTEntryHPA)$/;"	a
l00072	html/memory__ownership__table_8c_source.html	/^<a name="l00072"><\/a>00072     {$/;"	a
l00073	html/memory__ownership__table_8c_source.html	/^<a name="l00073"><\/a>00073         pTargetEPTEntry = <a class="code" href="monitor__util_8h.html#ac66e271532851a5737a7968ddc1390e4" title="This function maps host physical address into hypervisor&#39;s virtual memory.">mapHPAintoHVA<\/a>(targetEPTEntryHPA, <span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a>));$/;"	a
l00074	html/memory__ownership__table_8c_source.html	/^<a name="l00074"><\/a>00074         <span class="keywordflow">if<\/span>(!pTargetEPTEntry)$/;"	a
l00075	html/memory__ownership__table_8c_source.html	/^<a name="l00075"><\/a>00075         {$/;"	a
l00076	html/memory__ownership__table_8c_source.html	/^<a name="l00076"><\/a>00076             printf(<span class="stringliteral">&quot;Error\\n&quot;<\/span>);$/;"	a
l00077	html/memory__ownership__table_8c_source.html	/^<a name="l00077"><\/a>00077             <span class="keywordflow">return<\/span> 0;$/;"	a
l00078	html/memory__ownership__table_8c_source.html	/^<a name="l00078"><\/a>00078         }$/;"	a
l00079	html/memory__ownership__table_8c_source.html	/^<a name="l00079"><\/a>00079 $/;"	a
l00080	html/memory__ownership__table_8c_source.html	/^<a name="l00080"><\/a>00080 $/;"	a
l00081	html/memory__ownership__table_8c_source.html	/^<a name="l00081"><\/a>00081         <span class="keywordflow">if<\/span>(<a class="code" href="memory__ownership__table_8h.html#a59d1447dba2fa1b312cae249d379ccf9" title="change a page&#39;s status">changePageStatus<\/a>(vmID, appID, gpa, <a class="code" href="memory__ownership__table_8h.html#a762dbb1b87d732bb043fdaebe9fa73a9a929f0327e17604ce9713b2a6117bd603">CLOSED<\/a>))$/;"	a
l00082	html/memory__ownership__table_8c_source.html	/^<a name="l00082"><\/a>00082         {$/;"	a
l00083	html/memory__ownership__table_8c_source.html	/^<a name="l00083"><\/a>00083             targetEPTEntry = *pTargetEPTEntry;$/;"	a
l00084	html/memory__ownership__table_8c_source.html	/^<a name="l00084"><\/a>00084             targetEPTEntry &amp;= (~(<a class="code" href="monitor__ept_8h.html#af0f9b8645d450175e29fa94945a7f2ab" title="A mask to extract page attribute from EPT entry The bits [2:0] indicate R\/W\/X attribute of a page...">EPT_ATTRIBUTE_MASK<\/a>));$/;"	a
l00085	html/memory__ownership__table_8c_source.html	/^<a name="l00085"><\/a>00085             *pTargetEPTEntry = targetEPTEntry;$/;"	a
l00086	html/memory__ownership__table_8c_source.html	/^<a name="l00086"><\/a>00086             <a class="code" href="monitor__util_8h.html#ae5b8234f7d553177a9d3f932fe1c112b" title="This function maps host physical address into hypervisor&#39;s virtual memory.">unmapHPAintoHVA<\/a>((<span class="keywordtype">void<\/span>*)pTargetEPTEntry,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a>));            $/;"	a
l00087	html/memory__ownership__table_8c_source.html	/^<a name="l00087"><\/a>00087         }$/;"	a
l00088	html/memory__ownership__table_8c_source.html	/^<a name="l00088"><\/a>00088         <span class="keywordflow">else<\/span>$/;"	a
l00089	html/memory__ownership__table_8c_source.html	/^<a name="l00089"><\/a>00089         {$/;"	a
l00090	html/memory__ownership__table_8c_source.html	/^<a name="l00090"><\/a>00090             <span class="comment">\/\/printf(&quot;Fail\\n&quot;);<\/span>$/;"	a
l00091	html/memory__ownership__table_8c_source.html	/^<a name="l00091"><\/a>00091         }$/;"	a
l00092	html/memory__ownership__table_8c_source.html	/^<a name="l00092"><\/a>00092     }$/;"	a
l00093	html/memory__ownership__table_8c_source.html	/^<a name="l00093"><\/a>00093 $/;"	a
l00094	html/memory__ownership__table_8c_source.html	/^<a name="l00094"><\/a>00094     <span class="keywordflow">return<\/span> 0;$/;"	a
l00095	html/memory__ownership__table_8c_source.html	/^<a name="l00095"><\/a>00095 }$/;"	a
l00096	html/memory__ownership__table_8c_source.html	/^<a name="l00096"><\/a>00096 $/;"	a
l00097	html/memory__ownership__table_8c_source.html	/^<a name="l00097"><\/a><a class="code" href="memory__ownership__table_8c.html#abf5fe4889dc29561c6131dc40c59fc61">00097<\/a> <span class="keywordtype">int<\/span> <a class="code" href="memory__ownership__table_8h.html#a59d1447dba2fa1b312cae249d379ccf9" title="change a page&#39;s status">changePageStatus<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> gpa, <span class="keyword">const<\/span> <span class="keyword">enum<\/span> <a class="code" href="memory__ownership__table_8h.html#a762dbb1b87d732bb043fdaebe9fa73a9" title="A enumeration for describing page state.">page_state_t<\/a> <a class="code" href="structmemory__ownership__table__entry__t.html#ae737ccf446b6f6c963e6621c88b267f5">state<\/a>)$/;"	a
l00098	html/memory__ownership__table_8c_source.html	/^<a name="l00098"><\/a>00098 {$/;"	a
l00099	html/memory__ownership__table_8c_source.html	/^<a name="l00099"><\/a>00099     <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> targetEPTEntryHPA;$/;"	a
l00100	html/memory__ownership__table_8c_source.html	/^<a name="l00100"><\/a>00100     <a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a> *pTargetEPTEntry, targetEPTEntry;$/;"	a
l00101	html/memory__ownership__table_8c_source.html	/^<a name="l00101"><\/a>00101     <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> hpa = <a class="code" href="monitor__util_8h.html#a19ca3fbdba02a8a291fbf56b030e7323" title="This function converts guest physical address to host physical address.">gpaToHPA<\/a>(gpa, &amp;targetEPTEntryHPA);$/;"	a
l00102	html/memory__ownership__table_8c_source.html	/^<a name="l00102"><\/a>00102     <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> index;$/;"	a
l00103	html/memory__ownership__table_8c_source.html	/^<a name="l00103"><\/a>00103     <a class="code" href="monitor__types_8h.html#a5e335338bb0cb66eca6ae05e61c526ef" title="A type definition for a unsigned 8-bits data.">U8_t<\/a> pageAttribute;$/;"	a
l00104	html/memory__ownership__table_8c_source.html	/^<a name="l00104"><\/a>00104 $/;"	a
l00105	html/memory__ownership__table_8c_source.html	/^<a name="l00105"><\/a>00105     index = <a class="code" href="memory__ownership__table_8h.html#a072c0b2cb03e68adb03689dffe34aa4c" title="A function which is used to change HPA to index of the memory ownership table.">getMemoryOwnershipTableIndex<\/a>(hpa);$/;"	a
l00106	html/memory__ownership__table_8c_source.html	/^<a name="l00106"><\/a>00106     <span class="comment">\/\/printf(&quot;Index : %d \/ %d\\n&quot;,index,NUMBER_OF_MEMORY_OWNERSHIP_TABLE_ENTRY);<\/span>$/;"	a
l00107	html/memory__ownership__table_8c_source.html	/^<a name="l00107"><\/a>00107 $/;"	a
l00108	html/memory__ownership__table_8c_source.html	/^<a name="l00108"><\/a>00108     pTargetEPTEntry = <a class="code" href="monitor__util_8h.html#ac66e271532851a5737a7968ddc1390e4" title="This function maps host physical address into hypervisor&#39;s virtual memory.">mapHPAintoHVA<\/a>(targetEPTEntryHPA, <span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a>));$/;"	a
l00109	html/memory__ownership__table_8c_source.html	/^<a name="l00109"><\/a>00109     <span class="keywordflow">if<\/span>(!pTargetEPTEntry)$/;"	a
l00110	html/memory__ownership__table_8c_source.html	/^<a name="l00110"><\/a>00110     {$/;"	a
l00111	html/memory__ownership__table_8c_source.html	/^<a name="l00111"><\/a>00111         printf(<span class="stringliteral">&quot;Error : %s(%d)\\n&quot;<\/span>,__FILE__, __LINE__);$/;"	a
l00112	html/memory__ownership__table_8c_source.html	/^<a name="l00112"><\/a>00112         <span class="keywordflow">return<\/span> 0;$/;"	a
l00113	html/memory__ownership__table_8c_source.html	/^<a name="l00113"><\/a>00113     }$/;"	a
l00114	html/memory__ownership__table_8c_source.html	/^<a name="l00114"><\/a>00114     targetEPTEntry = *pTargetEPTEntry;$/;"	a
l00115	html/memory__ownership__table_8c_source.html	/^<a name="l00115"><\/a>00115     <a class="code" href="monitor__util_8h.html#ae5b8234f7d553177a9d3f932fe1c112b" title="This function maps host physical address into hypervisor&#39;s virtual memory.">unmapHPAintoHVA<\/a>((<span class="keywordtype">void<\/span>*)pTargetEPTEntry,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a>));$/;"	a
l00116	html/memory__ownership__table_8c_source.html	/^<a name="l00116"><\/a>00116 $/;"	a
l00117	html/memory__ownership__table_8c_source.html	/^<a name="l00117"><\/a>00117     pageAttribute = targetEPTEntry &amp; <a class="code" href="monitor__ept_8h.html#af0f9b8645d450175e29fa94945a7f2ab" title="A mask to extract page attribute from EPT entry The bits [2:0] indicate R\/W\/X attribute of a page...">EPT_ATTRIBUTE_MASK<\/a>;$/;"	a
l00118	html/memory__ownership__table_8c_source.html	/^<a name="l00118"><\/a>00118 $/;"	a
l00119	html/memory__ownership__table_8c_source.html	/^<a name="l00119"><\/a>00119 $/;"	a
l00120	html/memory__ownership__table_8c_source.html	/^<a name="l00120"><\/a>00120     <span class="keywordflow">if<\/span>(index &gt;= <a class="code" href="memory__ownership__table_8h.html#acafa06dcdfd6ded9cab8f00a00310fa0" title="A constant that describes the number of entries that the memory ownership table has to contain...">NUMBER_OF_MEMORY_OWNERSHIP_TABLE_ENTRY<\/a>)$/;"	a
l00121	html/memory__ownership__table_8c_source.html	/^<a name="l00121"><\/a>00121     {$/;"	a
l00122	html/memory__ownership__table_8c_source.html	/^<a name="l00122"><\/a>00122         printf(<span class="stringliteral">&quot;%s(%d) - Overflow : %d(%llx) \/ %d \\n&quot;<\/span>,__FILE__,__LINE__,index,hpa,<a class="code" href="memory__ownership__table_8h.html#acafa06dcdfd6ded9cab8f00a00310fa0" title="A constant that describes the number of entries that the memory ownership table has to contain...">NUMBER_OF_MEMORY_OWNERSHIP_TABLE_ENTRY<\/a>);$/;"	a
l00123	html/memory__ownership__table_8c_source.html	/^<a name="l00123"><\/a>00123     }$/;"	a
l00124	html/memory__ownership__table_8c_source.html	/^<a name="l00124"><\/a>00124 $/;"	a
l00125	html/memory__ownership__table_8c_source.html	/^<a name="l00125"><\/a>00125     <span class="keywordflow">if<\/span>( memory_ownership_table[index].<a class="code" href="structmemory__ownership__table__entry__t.html#a51da83c62e5656f11f5539fa4345fc1b">owner_VM<\/a> == 0 &amp;&amp;$/;"	a
l00126	html/memory__ownership__table_8c_source.html	/^<a name="l00126"><\/a>00126         memory_ownership_table[index].<a class="code" href="structmemory__ownership__table__entry__t.html#a8f52b1707f086d4e06056414cf0cadd4">owner_APP<\/a> == 0)$/;"	a
l00127	html/memory__ownership__table_8c_source.html	/^<a name="l00127"><\/a>00127     {$/;"	a
l00128	html/memory__ownership__table_8c_source.html	/^<a name="l00128"><\/a>00128         memory_ownership_table[index].<a class="code" href="structmemory__ownership__table__entry__t.html#a51da83c62e5656f11f5539fa4345fc1b">owner_VM<\/a> = vmID;$/;"	a
l00129	html/memory__ownership__table_8c_source.html	/^<a name="l00129"><\/a>00129         memory_ownership_table[index].<a class="code" href="structmemory__ownership__table__entry__t.html#a8f52b1707f086d4e06056414cf0cadd4">owner_APP<\/a> = appID;$/;"	a
l00130	html/memory__ownership__table_8c_source.html	/^<a name="l00130"><\/a>00130         memory_ownership_table[index].<a class="code" href="structmemory__ownership__table__entry__t.html#ae737ccf446b6f6c963e6621c88b267f5">state<\/a> = <a class="code" href="memory__ownership__table_8h.html#a762dbb1b87d732bb043fdaebe9fa73a9a929f0327e17604ce9713b2a6117bd603">CLOSED<\/a>;$/;"	a
l00131	html/memory__ownership__table_8c_source.html	/^<a name="l00131"><\/a>00131         memory_ownership_table[index].<a class="code" href="structmemory__ownership__table__entry__t.html#a997c69015870109b28461bfe0936cae9">original_permission<\/a> = pageAttribute;$/;"	a
l00132	html/memory__ownership__table_8c_source.html	/^<a name="l00132"><\/a>00132         memory_ownership_table[index].<a class="code" href="structmemory__ownership__table__entry__t.html#a20729fd7e2a7b883cf27718596f2263a">original_page_address<\/a> = 0;$/;"	a
l00133	html/memory__ownership__table_8c_source.html	/^<a name="l00133"><\/a>00133         $/;"	a
l00134	html/memory__ownership__table_8c_source.html	/^<a name="l00134"><\/a>00134         <span class="keywordflow">return<\/span> 1;$/;"	a
l00135	html/memory__ownership__table_8c_source.html	/^<a name="l00135"><\/a>00135     }$/;"	a
l00136	html/memory__ownership__table_8c_source.html	/^<a name="l00136"><\/a>00136     <span class="keywordflow">return<\/span> 0;$/;"	a
l00137	html/memory__ownership__table_8c_source.html	/^<a name="l00137"><\/a>00137 }$/;"	a
l00138	html/memory__ownership__table_8c_source.html	/^<a name="l00138"><\/a>00138 $/;"	a
l00139	html/memory__ownership__table_8c_source.html	/^<a name="l00139"><\/a><a class="code" href="memory__ownership__table_8c.html#ae90bcf6f70a70e565b7b941019874566">00139<\/a> <span class="keyword">struct <\/span><a class="code" href="structmemory__ownership__table__entry__t.html" title="A structure-type definition for one memory ownership table entry.">memory_ownership_table_entry_t<\/a> <a class="code" href="memory__ownership__table_8h.html#ae90bcf6f70a70e565b7b941019874566" title="A function which is used to get an entry of memory ownership table.">getMemoryOwnershipTableEntry<\/a>(const <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> index)$/;"	a
l00140	html/memory__ownership__table_8c_source.html	/^<a name="l00140"><\/a>00140 {$/;"	a
l00141	html/memory__ownership__table_8c_source.html	/^<a name="l00141"><\/a>00141     <span class="keywordflow">return<\/span> memory_ownership_table[index];$/;"	a
l00142	html/memory__ownership__table_8c_source.html	/^<a name="l00142"><\/a>00142 }$/;"	a
l00001	html/memory__ownership__table_8d_source.html	/^<div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 core\/security_module\/memory_ownership_table.o: \\$/;"	a
l00002	html/memory__ownership__table_8d_source.html	/^<a name="l00002"><\/a>00002  core\/security_module\/memory_ownership_table.c \\$/;"	a
l00003	html/memory__ownership__table_8d_source.html	/^<a name="l00003"><\/a>00003 <\/pre><\/div><\/div><!-- contents -->$/;"	a
define-members	html/memory__ownership__table_8h.html	/^<tr><td colspan="2"><h2><a name="define-members"><\/a>$/;"	a
details	html/memory__ownership__table_8h.html	/^<hr\/><a name="details" id="details"><\/a><h2>상세한 설명<\/h2>$/;"	a
enum-members	html/memory__ownership__table_8h.html	/^<tr><td colspan="2"><h2><a name="enum-members"><\/a>$/;"	a
func-members	html/memory__ownership__table_8h.html	/^<tr><td colspan="2"><h2><a name="func-members"><\/a>$/;"	a
nested-classes	html/memory__ownership__table_8h.html	/^<tr><td colspan="2"><h2><a name="nested-classes"><\/a>$/;"	a
l00001	html/memory__ownership__table_8h_source.html	/^<a href="memory__ownership__table_8h.html">이 파일의 문서화 페이지로 가기<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 $/;"	a
l00127	html/memory__ownership__table_8h_source.html	/^<a name="l00127"><\/a>00127 <span class="preprocessor">#ifndef __MEMORY_OWNERSHIP_TABLE_H__<\/span>$/;"	a
l00128	html/memory__ownership__table_8h_source.html	/^<a name="l00128"><\/a>00128 <span class="preprocessor"><\/span><span class="preprocessor">#define __MEMORY_OWNERSHIP_TABLE_H__<\/span>$/;"	a
l00129	html/memory__ownership__table_8h_source.html	/^<a name="l00129"><\/a>00129 <span class="preprocessor"><\/span>$/;"	a
l00130	html/memory__ownership__table_8h_source.html	/^<a name="l00130"><\/a>00130 <span class="preprocessor">#include &lt;<a class="code" href="monitor__types_8h.html" title="Definitions of types that are used in this project.">monitor_types.h<\/a>&gt;<\/span>$/;"	a
l00131	html/memory__ownership__table_8h_source.html	/^<a name="l00131"><\/a>00131 $/;"	a
l00132	html/memory__ownership__table_8h_source.html	/^<a name="l00132"><\/a><a class="code" href="memory__ownership__table_8h.html#a762dbb1b87d732bb043fdaebe9fa73a9">00132<\/a> <span class="keyword">enum<\/span> <a class="code" href="memory__ownership__table_8h.html#a762dbb1b87d732bb043fdaebe9fa73a9" title="A enumeration for describing page state.">page_state_t<\/a>{$/;"	a
l00133	html/memory__ownership__table_8h_source.html	/^<a name="l00133"><\/a><a class="code" href="memory__ownership__table_8h.html#a762dbb1b87d732bb043fdaebe9fa73a9a835c68f50639590aea0ed17283b31e59">00133<\/a>     <a class="code" href="memory__ownership__table_8h.html#a762dbb1b87d732bb043fdaebe9fa73a9a835c68f50639590aea0ed17283b31e59">UNPROTECTED<\/a> = 0,    $/;"	a
l00134	html/memory__ownership__table_8h_source.html	/^<a name="l00134"><\/a><a class="code" href="memory__ownership__table_8h.html#a762dbb1b87d732bb043fdaebe9fa73a9a929f0327e17604ce9713b2a6117bd603">00134<\/a>     <a class="code" href="memory__ownership__table_8h.html#a762dbb1b87d732bb043fdaebe9fa73a9a929f0327e17604ce9713b2a6117bd603">CLOSED<\/a>,             $/;"	a
l00135	html/memory__ownership__table_8h_source.html	/^<a name="l00135"><\/a><a class="code" href="memory__ownership__table_8h.html#a762dbb1b87d732bb043fdaebe9fa73a9a45c1c97bdcce420fc01045ee101a0cf2">00135<\/a>     <a class="code" href="memory__ownership__table_8h.html#a762dbb1b87d732bb043fdaebe9fa73a9a45c1c97bdcce420fc01045ee101a0cf2">OPENED<\/a>,             $/;"	a
l00136	html/memory__ownership__table_8h_source.html	/^<a name="l00136"><\/a><a class="code" href="memory__ownership__table_8h.html#a762dbb1b87d732bb043fdaebe9fa73a9a34d1361202d8c9652ed81b53cda15159">00136<\/a>     <a class="code" href="memory__ownership__table_8h.html#a762dbb1b87d732bb043fdaebe9fa73a9a34d1361202d8c9652ed81b53cda15159">PARTIAL<\/a>,            $/;"	a
l00137	html/memory__ownership__table_8h_source.html	/^<a name="l00137"><\/a><a class="code" href="memory__ownership__table_8h.html#a762dbb1b87d732bb043fdaebe9fa73a9aaac875c4dc08055725dd966fd44e0839">00137<\/a>     <a class="code" href="memory__ownership__table_8h.html#a762dbb1b87d732bb043fdaebe9fa73a9aaac875c4dc08055725dd966fd44e0839">ENCRYPTED<\/a>           $/;"	a
l00138	html/memory__ownership__table_8h_source.html	/^<a name="l00138"><\/a>00138 };$/;"	a
l00139	html/memory__ownership__table_8h_source.html	/^<a name="l00139"><\/a>00139 $/;"	a
l00140	html/memory__ownership__table_8h_source.html	/^<a name="l00140"><\/a><a class="code" href="memory__ownership__table_8h.html#a5fbfcf450c964132bea15b41ea873d5b">00140<\/a> <span class="keyword">enum<\/span> <a class="code" href="memory__ownership__table_8h.html#a5fbfcf450c964132bea15b41ea873d5b" title="A enumeration for describing owner application of a page.">ownerAppID_t<\/a>{$/;"	a
l00141	html/memory__ownership__table_8h_source.html	/^<a name="l00141"><\/a><a class="code" href="memory__ownership__table_8h.html#a5fbfcf450c964132bea15b41ea873d5ba53c6e691e7db9eceefc0fb37cb724cd2">00141<\/a>     <a class="code" href="memory__ownership__table_8h.html#a5fbfcf450c964132bea15b41ea873d5ba53c6e691e7db9eceefc0fb37cb724cd2">KERNEL<\/a> = 0  $/;"	a
l00142	html/memory__ownership__table_8h_source.html	/^<a name="l00142"><\/a>00142 };$/;"	a
l00143	html/memory__ownership__table_8h_source.html	/^<a name="l00143"><\/a>00143 $/;"	a
l00144	html/memory__ownership__table_8h_source.html	/^<a name="l00144"><\/a><a class="code" href="memory__ownership__table_8h.html#acdf4a835f8c3259be5c551296972fb0b">00144<\/a> <span class="keyword">enum<\/span> <a class="code" href="memory__ownership__table_8h.html#acdf4a835f8c3259be5c551296972fb0b" title="A enumeration for describing owner virtual machine of a page.">ownerVMID_t<\/a>$/;"	a
l00145	html/memory__ownership__table_8h_source.html	/^<a name="l00145"><\/a>00145 {$/;"	a
l00146	html/memory__ownership__table_8h_source.html	/^<a name="l00146"><\/a><a class="code" href="memory__ownership__table_8h.html#acdf4a835f8c3259be5c551296972fb0bae30608ab43d58bc03940f0e9bd90a018">00146<\/a>     <a class="code" href="memory__ownership__table_8h.html#acdf4a835f8c3259be5c551296972fb0bae30608ab43d58bc03940f0e9bd90a018">VMM<\/a> = 0     $/;"	a
l00147	html/memory__ownership__table_8h_source.html	/^<a name="l00147"><\/a>00147 };$/;"	a
l00148	html/memory__ownership__table_8h_source.html	/^<a name="l00148"><\/a>00148 $/;"	a
l00149	html/memory__ownership__table_8h_source.html	/^<a name="l00149"><\/a><a class="code" href="structmemory__ownership__table__entry__t.html">00149<\/a> <span class="keyword">struct <\/span><a class="code" href="structmemory__ownership__table__entry__t.html" title="A structure-type definition for one memory ownership table entry.">memory_ownership_table_entry_t<\/a>$/;"	a
l00150	html/memory__ownership__table_8h_source.html	/^<a name="l00150"><\/a>00150 {$/;"	a
l00151	html/memory__ownership__table_8h_source.html	/^<a name="l00151"><\/a><a class="code" href="structmemory__ownership__table__entry__t.html#a51da83c62e5656f11f5539fa4345fc1b">00151<\/a>     <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> <a class="code" href="structmemory__ownership__table__entry__t.html#a51da83c62e5656f11f5539fa4345fc1b">owner_VM<\/a>;                $/;"	a
l00152	html/memory__ownership__table_8h_source.html	/^<a name="l00152"><\/a><a class="code" href="structmemory__ownership__table__entry__t.html#a8f52b1707f086d4e06056414cf0cadd4">00152<\/a>     <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> <a class="code" href="structmemory__ownership__table__entry__t.html#a8f52b1707f086d4e06056414cf0cadd4">owner_APP<\/a>;              $/;"	a
l00153	html/memory__ownership__table_8h_source.html	/^<a name="l00153"><\/a><a class="code" href="structmemory__ownership__table__entry__t.html#ae737ccf446b6f6c963e6621c88b267f5">00153<\/a>     <span class="keyword">enum<\/span> <a class="code" href="memory__ownership__table_8h.html#a762dbb1b87d732bb043fdaebe9fa73a9" title="A enumeration for describing page state.">page_state_t<\/a> <a class="code" href="structmemory__ownership__table__entry__t.html#ae737ccf446b6f6c963e6621c88b267f5">state<\/a>;        $/;"	a
l00154	html/memory__ownership__table_8h_source.html	/^<a name="l00154"><\/a><a class="code" href="structmemory__ownership__table__entry__t.html#a997c69015870109b28461bfe0936cae9">00154<\/a>     <a class="code" href="monitor__types_8h.html#a5e335338bb0cb66eca6ae05e61c526ef" title="A type definition for a unsigned 8-bits data.">U8_t<\/a> <a class="code" href="structmemory__ownership__table__entry__t.html#a997c69015870109b28461bfe0936cae9">original_permission<\/a>;       $/;"	a
l00155	html/memory__ownership__table_8h_source.html	/^<a name="l00155"><\/a><a class="code" href="structmemory__ownership__table__entry__t.html#a20729fd7e2a7b883cf27718596f2263a">00155<\/a>     <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> <a class="code" href="structmemory__ownership__table__entry__t.html#a20729fd7e2a7b883cf27718596f2263a">original_page_address<\/a>;    $/;"	a
l00156	html/memory__ownership__table_8h_source.html	/^<a name="l00156"><\/a>00156 };$/;"	a
l00157	html/memory__ownership__table_8h_source.html	/^<a name="l00157"><\/a>00157 $/;"	a
l00158	html/memory__ownership__table_8h_source.html	/^<a name="l00158"><\/a><a class="code" href="memory__ownership__table_8h.html#a7d467c1d283fdfa1f2081ba1e0d01b6e">00158<\/a> <span class="preprocessor">#define PAGE_SIZE 4096<\/span>$/;"	a
l00159	html/memory__ownership__table_8h_source.html	/^<a name="l00159"><\/a><a class="code" href="memory__ownership__table_8h.html#adea1bd3f15f0c62a2af912434193622e">00159<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define MAX_MEMORY_SIZE ((U64_t)17*1024*1024*1024)<\/span>$/;"	a
l00160	html/memory__ownership__table_8h_source.html	/^<a name="l00160"><\/a><a class="code" href="memory__ownership__table_8h.html#acafa06dcdfd6ded9cab8f00a00310fa0">00160<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define NUMBER_OF_MEMORY_OWNERSHIP_TABLE_ENTRY (MAX_MEMORY_SIZE \/ PAGE_SIZE)<\/span>$/;"	a
l00161	html/memory__ownership__table_8h_source.html	/^<a name="l00161"><\/a><a class="code" href="memory__ownership__table_8h.html#af4040dfd1fdb6c10d8ed2631173e5597">00161<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define HPA_TO_INDEX_SHIFT 12<\/span>$/;"	a
l00162	html/memory__ownership__table_8h_source.html	/^<a name="l00162"><\/a>00162 <span class="preprocessor"><\/span>$/;"	a
l00163	html/memory__ownership__table_8h_source.html	/^<a name="l00163"><\/a>00163 $/;"	a
l00164	html/memory__ownership__table_8h_source.html	/^<a name="l00164"><\/a>00164 <span class="keywordtype">void<\/span> <a class="code" href="memory__ownership__table_8h.html#aa0e8340e3e2dc314a25b0c93fdfd54ab" title="Start to protect of currently running process&#39;s pages.">protectCurrentApplication<\/a>();$/;"	a
l00165	html/memory__ownership__table_8h_source.html	/^<a name="l00165"><\/a>00165 <span class="keywordtype">void<\/span> <a class="code" href="memory__ownership__table_8h.html#ae1d205ac777b83ae72c2dd3b447a65ba" title="Allocate new VM ID &amp; application ID.">allocateNewApplicationIdentifiers<\/a>( <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> *new_VMID, $/;"	a
l00166	html/memory__ownership__table_8h_source.html	/^<a name="l00166"><\/a>00166                                         <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> *new_APPID$/;"	a
l00167	html/memory__ownership__table_8h_source.html	/^<a name="l00167"><\/a>00167                                         );$/;"	a
l00168	html/memory__ownership__table_8h_source.html	/^<a name="l00168"><\/a>00168 $/;"	a
l00169	html/memory__ownership__table_8h_source.html	/^<a name="l00169"><\/a>00169 <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> <a class="code" href="memory__ownership__table_8h.html#ae2fff5cc4db7b79454cc5340eff858e8" title="This function returns currently running VM&#39;s ID. If it does not exist, this function allocates new on...">allocateNewVMID<\/a>();$/;"	a
l00170	html/memory__ownership__table_8h_source.html	/^<a name="l00170"><\/a>00170 <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> <a class="code" href="memory__ownership__table_8h.html#a5e564d933aee4d6204f23f9eba2d4740" title="This function returns currently running process&#39;s ID. For new process, this function allocates new on...">allocateNewAppID<\/a>();$/;"	a
l00171	html/memory__ownership__table_8h_source.html	/^<a name="l00171"><\/a>00171 $/;"	a
l00172	html/memory__ownership__table_8h_source.html	/^<a name="l00172"><\/a>00172 <span class="keywordtype">void<\/span>* <a class="code" href="memory__ownership__table_8h.html#acffc09bfc5012b61572af3d6ae889d43" title="Set the a frame to closed state.">closePage<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, $/;"	a
l00173	html/memory__ownership__table_8h_source.html	/^<a name="l00173"><\/a>00173                 <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> appID, $/;"	a
l00174	html/memory__ownership__table_8h_source.html	/^<a name="l00174"><\/a>00174                 <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> gpa );$/;"	a
l00175	html/memory__ownership__table_8h_source.html	/^<a name="l00175"><\/a>00175 <span class="keywordtype">int<\/span> <a class="code" href="memory__ownership__table_8h.html#a59d1447dba2fa1b312cae249d379ccf9" title="change a page&#39;s status">changePageStatus<\/a>(   <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, $/;"	a
l00176	html/memory__ownership__table_8h_source.html	/^<a name="l00176"><\/a>00176                         <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> appID, $/;"	a
l00177	html/memory__ownership__table_8h_source.html	/^<a name="l00177"><\/a>00177                         <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> gpa,    $/;"	a
l00178	html/memory__ownership__table_8h_source.html	/^<a name="l00178"><\/a>00178                         <span class="keyword">const<\/span> <span class="keyword">enum<\/span> <a class="code" href="memory__ownership__table_8h.html#a762dbb1b87d732bb043fdaebe9fa73a9" title="A enumeration for describing page state.">page_state_t<\/a> state $/;"	a
l00179	html/memory__ownership__table_8h_source.html	/^<a name="l00179"><\/a>00179                         );$/;"	a
l00180	html/memory__ownership__table_8h_source.html	/^<a name="l00180"><\/a>00180 $/;"	a
l00181	html/memory__ownership__table_8h_source.html	/^<a name="l00181"><\/a>00181 <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> <a class="code" href="memory__ownership__table_8h.html#a072c0b2cb03e68adb03689dffe34aa4c" title="A function which is used to change HPA to index of the memory ownership table.">getMemoryOwnershipTableIndex<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> hpa <span class="comment">\/*&lt;&lt; [in] HPA to change *\/<\/span>);$/;"	a
l00182	html/memory__ownership__table_8h_source.html	/^<a name="l00182"><\/a>00182 <span class="keyword">struct <\/span><a class="code" href="structmemory__ownership__table__entry__t.html" title="A structure-type definition for one memory ownership table entry.">memory_ownership_table_entry_t<\/a> <a class="code" href="memory__ownership__table_8h.html#ae90bcf6f70a70e565b7b941019874566" title="A function which is used to get an entry of memory ownership table.">getMemoryOwnershipTableEntry<\/a>(const <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> index <span class="comment">\/*&lt;&lt; [in] index to an entry of memory ownership table *\/<\/span>);$/;"	a
l00183	html/memory__ownership__table_8h_source.html	/^<a name="l00183"><\/a>00183 $/;"	a
l00184	html/memory__ownership__table_8h_source.html	/^<a name="l00184"><\/a>00184 <span class="preprocessor">#endif<\/span>$/;"	a
l00001	html/memoryownershiptable_8c_source.html	/^<div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 <span class="preprocessor">#include &lt;memoryownershiptable.h&gt;<\/span>$/;"	a
l00002	html/memoryownershiptable_8c_source.html	/^<a name="l00002"><\/a>00002 <span class="preprocessor">#include &lt;util.h&gt;<\/span>$/;"	a
l00003	html/memoryownershiptable_8c_source.html	/^<a name="l00003"><\/a>00003 <span class="preprocessor">#include &lt;<a class="code" href="vmcs_8h.html" title="Definition of constants related to VMCS.">vmcs.h<\/a>&gt;<\/span>$/;"	a
l00004	html/memoryownershiptable_8c_source.html	/^<a name="l00004"><\/a>00004 $/;"	a
l00005	html/memoryownershiptable_8c_source.html	/^<a name="l00005"><\/a>00005 <span class="preprocessor">#ifdef CONFIG_BITVISOR<\/span>$/;"	a
l00006	html/memoryownershiptable_8c_source.html	/^<a name="l00006"><\/a>00006 <span class="preprocessor"><\/span><span class="preprocessor">    #include &lt;printf.h&gt;<\/span>$/;"	a
l00007	html/memoryownershiptable_8c_source.html	/^<a name="l00007"><\/a>00007 <span class="preprocessor">#endif<\/span>$/;"	a
l00008	html/memoryownershiptable_8c_source.html	/^<a name="l00008"><\/a>00008 <span class="preprocessor"><\/span>$/;"	a
l00009	html/memoryownershiptable_8c_source.html	/^<a name="l00009"><\/a>00009 $/;"	a
l00010	html/memoryownershiptable_8c_source.html	/^<a name="l00010"><\/a>00010 PHYADDR_t targetApplicationPageTableBasePhysicalAddress = 0;$/;"	a
l00011	html/memoryownershiptable_8c_source.html	/^<a name="l00011"><\/a>00011 OWNERSHIPTABLE_t ownershipTable[MAX_NUMBER_OF_PAGES];$/;"	a
l00012	html/memoryownershiptable_8c_source.html	/^<a name="l00012"><\/a>00012 <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> gpaToHPACache[PD_INDEX_MAX * PT_INDEX_MAX];$/;"	a
l00013	html/memoryownershiptable_8c_source.html	/^<a name="l00013"><\/a>00013 <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> protectingPageTable[PD_INDEX_MAX * PT_INDEX_MAX];$/;"	a
l00014	html/memoryownershiptable_8c_source.html	/^<a name="l00014"><\/a>00014 BOOL_t stop = FALSE;$/;"	a
l00015	html/memoryownershiptable_8c_source.html	/^<a name="l00015"><\/a>00015 $/;"	a
l00016	html/memoryownershiptable_8c_source.html	/^<a name="l00016"><\/a>00016 <span class="comment">\/\/Initialize memory ownership table<\/span>$/;"	a
l00017	html/memoryownershiptable_8c_source.html	/^<a name="l00017"><\/a>00017 <span class="keywordtype">void<\/span> initOwnershipTable()$/;"	a
l00018	html/memoryownershiptable_8c_source.html	/^<a name="l00018"><\/a>00018 {$/;"	a
l00019	html/memoryownershiptable_8c_source.html	/^<a name="l00019"><\/a>00019     <a class="code" href="monitor__types_8h.html#a7d95b1a68a8959f02a82e7b360cd2d2a" title="A type definition for a unsigned 32-bits data.">U32_t<\/a> index;$/;"	a
l00020	html/memoryownershiptable_8c_source.html	/^<a name="l00020"><\/a>00020     <a class="code" href="monitor__types_8h.html#a7d95b1a68a8959f02a82e7b360cd2d2a" title="A type definition for a unsigned 32-bits data.">U32_t<\/a> primaryProcessorBasedVMExecutionControlsVector;$/;"	a
l00021	html/memoryownershiptable_8c_source.html	/^<a name="l00021"><\/a>00021 $/;"	a
l00022	html/memoryownershiptable_8c_source.html	/^<a name="l00022"><\/a>00022     <span class="keywordflow">for<\/span>(index = 0 ; index &lt; MAX_NUMBER_OF_PAGES ; index++)$/;"	a
l00023	html/memoryownershiptable_8c_source.html	/^<a name="l00023"><\/a>00023     {$/;"	a
l00024	html/memoryownershiptable_8c_source.html	/^<a name="l00024"><\/a>00024         sec_memset(ownershipTable + index,0,<span class="keyword">sizeof<\/span>(OWNERSHIPTABLE_t));$/;"	a
l00025	html/memoryownershiptable_8c_source.html	/^<a name="l00025"><\/a>00025         ownershipTable[index].ownerVM = OWNER_VMM;$/;"	a
l00026	html/memoryownershiptable_8c_source.html	/^<a name="l00026"><\/a>00026         ownershipTable[index].ownerApp = OWNER_KERNEL;$/;"	a
l00027	html/memoryownershiptable_8c_source.html	/^<a name="l00027"><\/a>00027     }$/;"	a
l00028	html/memoryownershiptable_8c_source.html	/^<a name="l00028"><\/a>00028     sec_memset(gpaToHPACache,0,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a7d95b1a68a8959f02a82e7b360cd2d2a" title="A type definition for a unsigned 32-bits data.">U32_t<\/a>) * PD_INDEX_MAX * PT_INDEX_MAX);$/;"	a
l00029	html/memoryownershiptable_8c_source.html	/^<a name="l00029"><\/a>00029 $/;"	a
l00030	html/memoryownershiptable_8c_source.html	/^<a name="l00030"><\/a>00030     primaryProcessorBasedVMExecutionControlsVector = sec_getPrimaryProcessorBasedVMExecutionControlsVector();$/;"	a
l00031	html/memoryownershiptable_8c_source.html	/^<a name="l00031"><\/a>00031 }$/;"	a
l00032	html/memoryownershiptable_8c_source.html	/^<a name="l00032"><\/a>00032 $/;"	a
l00033	html/memoryownershiptable_8c_source.html	/^<a name="l00033"><\/a>00033 <span class="comment">\/\/Traverse one VM&#39;s EPT &amp; update memory ownership table<\/span>$/;"	a
l00034	html/memoryownershiptable_8c_source.html	/^<a name="l00034"><\/a>00034 <span class="keywordtype">void<\/span> updateOwnershipTableForOneVM(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, PHYADDR_t *eptPhyBaseAddr)$/;"	a
l00035	html/memoryownershiptable_8c_source.html	/^<a name="l00035"><\/a>00035 {$/;"	a
l00036	html/memoryownershiptable_8c_source.html	/^<a name="l00036"><\/a>00036     traverseEPTPML4(vmid,eptPhyBaseAddr);$/;"	a
l00037	html/memoryownershiptable_8c_source.html	/^<a name="l00037"><\/a>00037 }$/;"	a
l00038	html/memoryownershiptable_8c_source.html	/^<a name="l00038"><\/a>00038 $/;"	a
l00039	html/memoryownershiptable_8c_source.html	/^<a name="l00039"><\/a>00039 <span class="comment">\/\/Traverse EPT PML4<\/span>$/;"	a
l00040	html/memoryownershiptable_8c_source.html	/^<a name="l00040"><\/a>00040 <span class="keywordtype">void<\/span> traverseEPTPML4(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, PHYADDR_t *eptPhyBaseAddr)$/;"	a
l00041	html/memoryownershiptable_8c_source.html	/^<a name="l00041"><\/a>00041 {$/;"	a
l00042	html/memoryownershiptable_8c_source.html	/^<a name="l00042"><\/a>00042     <span class="keywordtype">int<\/span> eptPML4Index;$/;"	a
l00043	html/memoryownershiptable_8c_source.html	/^<a name="l00043"><\/a>00043     <span class="keywordflow">for<\/span>(eptPML4Index = 0 ; eptPML4Index &lt; NUMBER_OF_PML4_ENTRY ; eptPML4Index++)$/;"	a
l00044	html/memoryownershiptable_8c_source.html	/^<a name="l00044"><\/a>00044     {$/;"	a
l00045	html/memoryownershiptable_8c_source.html	/^<a name="l00045"><\/a>00045         PHYADDR_t *currentPML4EntryPhyAddr;$/;"	a
l00046	html/memoryownershiptable_8c_source.html	/^<a name="l00046"><\/a>00046         VIRTADDR_t *currentPML4EntryVirtAddr;$/;"	a
l00047	html/memoryownershiptable_8c_source.html	/^<a name="l00047"><\/a>00047         <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> currentPML4Entry;$/;"	a
l00048	html/memoryownershiptable_8c_source.html	/^<a name="l00048"><\/a>00048 $/;"	a
l00049	html/memoryownershiptable_8c_source.html	/^<a name="l00049"><\/a>00049         currentPML4EntryPhyAddr = ((<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>)eptPhyBaseAddr | ((eptPML4Index &amp; 0xFF) &lt;&lt; PML4_SHIFT));$/;"	a
l00050	html/memoryownershiptable_8c_source.html	/^<a name="l00050"><\/a>00050         currentPML4EntryVirtAddr = getVirtualAddressFromPhysiacalAddress(currentPML4EntryPhyAddr);$/;"	a
l00051	html/memoryownershiptable_8c_source.html	/^<a name="l00051"><\/a>00051         currentPML4Entry = *currentPML4EntryVirtAddr;$/;"	a
l00052	html/memoryownershiptable_8c_source.html	/^<a name="l00052"><\/a>00052         <span class="keywordflow">if<\/span>(currentPML4Entry)$/;"	a
l00053	html/memoryownershiptable_8c_source.html	/^<a name="l00053"><\/a>00053         {$/;"	a
l00054	html/memoryownershiptable_8c_source.html	/^<a name="l00054"><\/a>00054             PHYADDR_t *currentEPTPageDirectoryPointerTableBasePhysicalAddress;$/;"	a
l00055	html/memoryownershiptable_8c_source.html	/^<a name="l00055"><\/a>00055             currentEPTPageDirectoryPointerTableBasePhysicalAddress = currentPML4Entry &amp; PAGE_DIRECTORY_POINTER_TABLE_ENTRY_MASK;$/;"	a
l00056	html/memoryownershiptable_8c_source.html	/^<a name="l00056"><\/a>00056             <span class="keywordflow">if<\/span>(currentEPTPageDirectoryPointerTableBasePhysicalAddress)$/;"	a
l00057	html/memoryownershiptable_8c_source.html	/^<a name="l00057"><\/a>00057             {$/;"	a
l00058	html/memoryownershiptable_8c_source.html	/^<a name="l00058"><\/a>00058                 traverseEPTPageDirectoryPointerTable(vmid, currentEPTPageDirectoryPointerTableBasePhysicalAddress);             $/;"	a
l00059	html/memoryownershiptable_8c_source.html	/^<a name="l00059"><\/a>00059             }$/;"	a
l00060	html/memoryownershiptable_8c_source.html	/^<a name="l00060"><\/a>00060         }$/;"	a
l00061	html/memoryownershiptable_8c_source.html	/^<a name="l00061"><\/a>00061     }$/;"	a
l00062	html/memoryownershiptable_8c_source.html	/^<a name="l00062"><\/a>00062 $/;"	a
l00063	html/memoryownershiptable_8c_source.html	/^<a name="l00063"><\/a>00063 }$/;"	a
l00064	html/memoryownershiptable_8c_source.html	/^<a name="l00064"><\/a>00064 $/;"	a
l00065	html/memoryownershiptable_8c_source.html	/^<a name="l00065"><\/a>00065 $/;"	a
l00066	html/memoryownershiptable_8c_source.html	/^<a name="l00066"><\/a>00066 <span class="comment">\/\/Travers one VM&#39;s EPT Page Directory Pointer Table<\/span>$/;"	a
l00067	html/memoryownershiptable_8c_source.html	/^<a name="l00067"><\/a>00067 <span class="keywordtype">void<\/span> traverseEPTPageDirectoryPointerTable(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, PHYADDR_t *currentEPTPageDirectoryPointerTableBasePhysicalAddress)$/;"	a
l00068	html/memoryownershiptable_8c_source.html	/^<a name="l00068"><\/a>00068 {$/;"	a
l00069	html/memoryownershiptable_8c_source.html	/^<a name="l00069"><\/a>00069     <span class="keywordtype">int<\/span> eptPDPTIndex;$/;"	a
l00070	html/memoryownershiptable_8c_source.html	/^<a name="l00070"><\/a>00070     <span class="keywordflow">for<\/span>(eptPDPTIndex = 0 ; eptPDPTIndex &lt; NUMBER_OF_PAGE_DIRECTORY_POINTER_ENTRY ; eptPDPTIndex++)$/;"	a
l00071	html/memoryownershiptable_8c_source.html	/^<a name="l00071"><\/a>00071     {$/;"	a
l00072	html/memoryownershiptable_8c_source.html	/^<a name="l00072"><\/a>00072         PHYADDR_t *currentEPTPDPTEntryPhyAddr;$/;"	a
l00073	html/memoryownershiptable_8c_source.html	/^<a name="l00073"><\/a>00073         VIRTADDR_t *currentEPTPDPTEntryVirtAddr;$/;"	a
l00074	html/memoryownershiptable_8c_source.html	/^<a name="l00074"><\/a>00074         <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> currentPDPTEntry;$/;"	a
l00075	html/memoryownershiptable_8c_source.html	/^<a name="l00075"><\/a>00075 $/;"	a
l00076	html/memoryownershiptable_8c_source.html	/^<a name="l00076"><\/a>00076         currentEPTPDPTEntryPhyAddr = ((<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>)currentEPTPageDirectoryPointerTableBasePhysicalAddress | ((eptPDPTIndex &amp; 0xFF) &lt;&lt; PDPT_SHIFT));$/;"	a
l00077	html/memoryownershiptable_8c_source.html	/^<a name="l00077"><\/a>00077         currentEPTPDPTEntryVirtAddr = getVirtualAddressFromPhysiacalAddress(currentEPTPDPTEntryPhyAddr);$/;"	a
l00078	html/memoryownershiptable_8c_source.html	/^<a name="l00078"><\/a>00078         currentPDPTEntry = *currentEPTPDPTEntryVirtAddr;$/;"	a
l00079	html/memoryownershiptable_8c_source.html	/^<a name="l00079"><\/a>00079         <span class="keywordflow">if<\/span>(currentPDPTEntry)$/;"	a
l00080	html/memoryownershiptable_8c_source.html	/^<a name="l00080"><\/a>00080         {$/;"	a
l00081	html/memoryownershiptable_8c_source.html	/^<a name="l00081"><\/a>00081             PHYADDR_t *currentEPTPageDirectoryBasePhysicalAddress;$/;"	a
l00082	html/memoryownershiptable_8c_source.html	/^<a name="l00082"><\/a>00082             currentEPTPageDirectoryBasePhysicalAddress = currentPDPTEntry &amp; PAGE_DIECTORY_ENTRY_MASK;$/;"	a
l00083	html/memoryownershiptable_8c_source.html	/^<a name="l00083"><\/a>00083             <span class="comment">\/\/sec_showDataofPhysicalAddress(currentEPTPageDirectoryBasePhysicalAddress);<\/span>$/;"	a
l00084	html/memoryownershiptable_8c_source.html	/^<a name="l00084"><\/a>00084             <span class="keywordflow">if<\/span>(currentEPTPageDirectoryBasePhysicalAddress)$/;"	a
l00085	html/memoryownershiptable_8c_source.html	/^<a name="l00085"><\/a>00085             {$/;"	a
l00086	html/memoryownershiptable_8c_source.html	/^<a name="l00086"><\/a>00086                 traverseEPTPageDirectory(vmid, currentEPTPageDirectoryBasePhysicalAddress);             $/;"	a
l00087	html/memoryownershiptable_8c_source.html	/^<a name="l00087"><\/a>00087             }$/;"	a
l00088	html/memoryownershiptable_8c_source.html	/^<a name="l00088"><\/a>00088 $/;"	a
l00089	html/memoryownershiptable_8c_source.html	/^<a name="l00089"><\/a>00089         }$/;"	a
l00090	html/memoryownershiptable_8c_source.html	/^<a name="l00090"><\/a>00090     }   $/;"	a
l00091	html/memoryownershiptable_8c_source.html	/^<a name="l00091"><\/a>00091 }$/;"	a
l00092	html/memoryownershiptable_8c_source.html	/^<a name="l00092"><\/a>00092 $/;"	a
l00093	html/memoryownershiptable_8c_source.html	/^<a name="l00093"><\/a>00093 <span class="comment">\/\/Traverse one VM&#39;s EPT Page Directory<\/span>$/;"	a
l00094	html/memoryownershiptable_8c_source.html	/^<a name="l00094"><\/a>00094 <span class="keywordtype">void<\/span> traverseEPTPageDirectory(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, PHYADDR_t *currentEPTPageDirectoryBasePhysicalAddress)$/;"	a
l00095	html/memoryownershiptable_8c_source.html	/^<a name="l00095"><\/a>00095 {$/;"	a
l00096	html/memoryownershiptable_8c_source.html	/^<a name="l00096"><\/a>00096     <span class="keywordtype">int<\/span> eptPDIndex;$/;"	a
l00097	html/memoryownershiptable_8c_source.html	/^<a name="l00097"><\/a>00097     <span class="keywordflow">for<\/span>(eptPDIndex = 0 ; eptPDIndex &lt; NUMBER_OF_PAGE_DIRECTORY_ENTRY ; eptPDIndex++)$/;"	a
l00098	html/memoryownershiptable_8c_source.html	/^<a name="l00098"><\/a>00098     {$/;"	a
l00099	html/memoryownershiptable_8c_source.html	/^<a name="l00099"><\/a>00099         PHYADDR_t *currentEPTPDEntryPhyAddr;$/;"	a
l00100	html/memoryownershiptable_8c_source.html	/^<a name="l00100"><\/a>00100         VIRTADDR_t *currentEPTPDEntryVirtAddr;$/;"	a
l00101	html/memoryownershiptable_8c_source.html	/^<a name="l00101"><\/a>00101         <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> currentPDEntry;$/;"	a
l00102	html/memoryownershiptable_8c_source.html	/^<a name="l00102"><\/a>00102 $/;"	a
l00103	html/memoryownershiptable_8c_source.html	/^<a name="l00103"><\/a>00103         currentEPTPDEntryPhyAddr = ((<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>)currentEPTPageDirectoryBasePhysicalAddress | ((eptPDIndex &amp; 0xFF) &lt;&lt; PD_SHIFT));$/;"	a
l00104	html/memoryownershiptable_8c_source.html	/^<a name="l00104"><\/a>00104         currentEPTPDEntryVirtAddr = getVirtualAddressFromPhysiacalAddress(currentEPTPDEntryPhyAddr);$/;"	a
l00105	html/memoryownershiptable_8c_source.html	/^<a name="l00105"><\/a>00105         currentPDEntry = *currentEPTPDEntryVirtAddr;$/;"	a
l00106	html/memoryownershiptable_8c_source.html	/^<a name="l00106"><\/a>00106         <span class="keywordflow">if<\/span>(currentPDEntry)$/;"	a
l00107	html/memoryownershiptable_8c_source.html	/^<a name="l00107"><\/a>00107         {$/;"	a
l00108	html/memoryownershiptable_8c_source.html	/^<a name="l00108"><\/a>00108             PHYADDR_t *currentEPTPageTableBasePhysicalAddress;$/;"	a
l00109	html/memoryownershiptable_8c_source.html	/^<a name="l00109"><\/a>00109             currentEPTPageTableBasePhysicalAddress = currentPDEntry &amp; PAGE_TABLE_ENTRY_MASK;$/;"	a
l00110	html/memoryownershiptable_8c_source.html	/^<a name="l00110"><\/a>00110             <span class="keywordflow">if<\/span>(currentEPTPageTableBasePhysicalAddress)$/;"	a
l00111	html/memoryownershiptable_8c_source.html	/^<a name="l00111"><\/a>00111             {$/;"	a
l00112	html/memoryownershiptable_8c_source.html	/^<a name="l00112"><\/a>00112                 traverseEPTPageTable(vmid, currentEPTPageTableBasePhysicalAddress);             $/;"	a
l00113	html/memoryownershiptable_8c_source.html	/^<a name="l00113"><\/a>00113             }$/;"	a
l00114	html/memoryownershiptable_8c_source.html	/^<a name="l00114"><\/a>00114 $/;"	a
l00115	html/memoryownershiptable_8c_source.html	/^<a name="l00115"><\/a>00115         }$/;"	a
l00116	html/memoryownershiptable_8c_source.html	/^<a name="l00116"><\/a>00116     }   $/;"	a
l00117	html/memoryownershiptable_8c_source.html	/^<a name="l00117"><\/a>00117 }$/;"	a
l00118	html/memoryownershiptable_8c_source.html	/^<a name="l00118"><\/a>00118 $/;"	a
l00119	html/memoryownershiptable_8c_source.html	/^<a name="l00119"><\/a>00119 <span class="comment">\/\/Traverse one VM&#39;s EPT Page Table<\/span>$/;"	a
l00120	html/memoryownershiptable_8c_source.html	/^<a name="l00120"><\/a>00120 <span class="keywordtype">void<\/span> traverseEPTPageTable(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, PHYADDR_t *currentEPTPageTableBasePhysicalAddress)$/;"	a
l00121	html/memoryownershiptable_8c_source.html	/^<a name="l00121"><\/a>00121 {$/;"	a
l00122	html/memoryownershiptable_8c_source.html	/^<a name="l00122"><\/a>00122     <span class="keywordtype">int<\/span> eptPTIndex;$/;"	a
l00123	html/memoryownershiptable_8c_source.html	/^<a name="l00123"><\/a>00123     <span class="keywordflow">for<\/span>(eptPTIndex = 0 ; eptPTIndex &lt; NUMBER_OF_PAGE_DIRECTORY_ENTRY ; eptPTIndex++)$/;"	a
l00124	html/memoryownershiptable_8c_source.html	/^<a name="l00124"><\/a>00124     {$/;"	a
l00125	html/memoryownershiptable_8c_source.html	/^<a name="l00125"><\/a>00125         PHYADDR_t *currentEPTPTEntryPhyAddr;$/;"	a
l00126	html/memoryownershiptable_8c_source.html	/^<a name="l00126"><\/a>00126         VIRTADDR_t *currentEPTPTEntryVirtAddr;$/;"	a
l00127	html/memoryownershiptable_8c_source.html	/^<a name="l00127"><\/a>00127         <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> currentPTEntry;$/;"	a
l00128	html/memoryownershiptable_8c_source.html	/^<a name="l00128"><\/a>00128 $/;"	a
l00129	html/memoryownershiptable_8c_source.html	/^<a name="l00129"><\/a>00129         currentEPTPTEntryPhyAddr = ((<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>)currentEPTPageTableBasePhysicalAddress | ((eptPTIndex &amp; 0xFF) &lt;&lt; PT_SHIFT));$/;"	a
l00130	html/memoryownershiptable_8c_source.html	/^<a name="l00130"><\/a>00130         currentEPTPTEntryVirtAddr = getVirtualAddressFromPhysiacalAddress(currentEPTPTEntryPhyAddr);$/;"	a
l00131	html/memoryownershiptable_8c_source.html	/^<a name="l00131"><\/a>00131         currentPTEntry = *currentEPTPTEntryVirtAddr;$/;"	a
l00132	html/memoryownershiptable_8c_source.html	/^<a name="l00132"><\/a>00132         <span class="keywordflow">if<\/span>(currentPTEntry)$/;"	a
l00133	html/memoryownershiptable_8c_source.html	/^<a name="l00133"><\/a>00133         {$/;"	a
l00134	html/memoryownershiptable_8c_source.html	/^<a name="l00134"><\/a>00134             <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> pageID;$/;"	a
l00135	html/memoryownershiptable_8c_source.html	/^<a name="l00135"><\/a>00135             <a class="code" href="monitor__types_8h.html#a5e335338bb0cb66eca6ae05e61c526ef" title="A type definition for a unsigned 8-bits data.">U8_t<\/a> originalAttr;$/;"	a
l00136	html/memoryownershiptable_8c_source.html	/^<a name="l00136"><\/a>00136             pageID = currentPTEntry &amp; PAGE_TABLE_MASK;$/;"	a
l00137	html/memoryownershiptable_8c_source.html	/^<a name="l00137"><\/a>00137             pageID &gt;&gt;= PAGE_ID_SHIFT;$/;"	a
l00138	html/memoryownershiptable_8c_source.html	/^<a name="l00138"><\/a>00138             originalAttr = currentPTEntry &amp; (~PAGE_TABLE_MASK);$/;"	a
l00139	html/memoryownershiptable_8c_source.html	/^<a name="l00139"><\/a>00139             updateOwnerVMIDofEPTPage(vmid, pageID, originalAttr);$/;"	a
l00140	html/memoryownershiptable_8c_source.html	/^<a name="l00140"><\/a>00140         }$/;"	a
l00141	html/memoryownershiptable_8c_source.html	/^<a name="l00141"><\/a>00141     }   $/;"	a
l00142	html/memoryownershiptable_8c_source.html	/^<a name="l00142"><\/a>00142 }$/;"	a
l00143	html/memoryownershiptable_8c_source.html	/^<a name="l00143"><\/a>00143 $/;"	a
l00144	html/memoryownershiptable_8c_source.html	/^<a name="l00144"><\/a><a class="code" href="monitor__util_8h.html#a19ca3fbdba02a8a291fbf56b030e7323">00144<\/a> PHYADDR_t <a class="code" href="monitor__util_8h.html#a19ca3fbdba02a8a291fbf56b030e7323" title="This function converts guest physical address to host physical address.">gpaToHPA<\/a>(<span class="keyword">const<\/span> GUEST_PHYADDR_t gpa, PHYADDR_t *pageTableEntryPhysicalAddress)$/;"	a
l00145	html/memoryownershiptable_8c_source.html	/^<a name="l00145"><\/a>00145 {$/;"	a
l00146	html/memoryownershiptable_8c_source.html	/^<a name="l00146"><\/a>00146     PHYADDR_t eptPML4BasePhysicalAddress;$/;"	a
l00147	html/memoryownershiptable_8c_source.html	/^<a name="l00147"><\/a>00147     PHYADDR_t eptPML4EntryPhysicalAddress;$/;"	a
l00148	html/memoryownershiptable_8c_source.html	/^<a name="l00148"><\/a>00148     VIRTADDR_t *eptPML4EntryVirtualAddress;$/;"	a
l00149	html/memoryownershiptable_8c_source.html	/^<a name="l00149"><\/a>00149     <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>   selectedEPTPML4Entry;$/;"	a
l00150	html/memoryownershiptable_8c_source.html	/^<a name="l00150"><\/a>00150 $/;"	a
l00151	html/memoryownershiptable_8c_source.html	/^<a name="l00151"><\/a>00151     PHYADDR_t eptPDPTBasePhysicalAddress;$/;"	a
l00152	html/memoryownershiptable_8c_source.html	/^<a name="l00152"><\/a>00152     PHYADDR_t eptPDPTEntryPhysicalAddress;$/;"	a
l00153	html/memoryownershiptable_8c_source.html	/^<a name="l00153"><\/a>00153     VIRTADDR_t *eptPDPTEntryVirtualAddress;$/;"	a
l00154	html/memoryownershiptable_8c_source.html	/^<a name="l00154"><\/a>00154     <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> selectedEPTPDPTEntry;$/;"	a
l00155	html/memoryownershiptable_8c_source.html	/^<a name="l00155"><\/a>00155 $/;"	a
l00156	html/memoryownershiptable_8c_source.html	/^<a name="l00156"><\/a>00156     PHYADDR_t eptPDBasePhysicalAddress;$/;"	a
l00157	html/memoryownershiptable_8c_source.html	/^<a name="l00157"><\/a>00157     PHYADDR_t eptPDEntryPhysicalAddress;$/;"	a
l00158	html/memoryownershiptable_8c_source.html	/^<a name="l00158"><\/a>00158     VIRTADDR_t *eptPDEntryVirtualAddress;$/;"	a
l00159	html/memoryownershiptable_8c_source.html	/^<a name="l00159"><\/a>00159     <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> selectedEPTPDEntry;$/;"	a
l00160	html/memoryownershiptable_8c_source.html	/^<a name="l00160"><\/a>00160 $/;"	a
l00161	html/memoryownershiptable_8c_source.html	/^<a name="l00161"><\/a>00161     PHYADDR_t eptPTBasePhysicalAddress;$/;"	a
l00162	html/memoryownershiptable_8c_source.html	/^<a name="l00162"><\/a>00162     PHYADDR_t eptPTEntryPhysicalAddress;$/;"	a
l00163	html/memoryownershiptable_8c_source.html	/^<a name="l00163"><\/a>00163     VIRTADDR_t *eptPTEntryVirtualAddress;$/;"	a
l00164	html/memoryownershiptable_8c_source.html	/^<a name="l00164"><\/a>00164     <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> selectedEPTPTEntry;$/;"	a
l00165	html/memoryownershiptable_8c_source.html	/^<a name="l00165"><\/a>00165 $/;"	a
l00166	html/memoryownershiptable_8c_source.html	/^<a name="l00166"><\/a>00166     PHYADDR_t hpa = 0;$/;"	a
l00167	html/memoryownershiptable_8c_source.html	/^<a name="l00167"><\/a>00167     <span class="comment">\/\/Traverse EPT PML<\/span>$/;"	a
l00168	html/memoryownershiptable_8c_source.html	/^<a name="l00168"><\/a>00168     sec_getEPTPhyAddr(&amp;eptPML4BasePhysicalAddress);$/;"	a
l00169	html/memoryownershiptable_8c_source.html	/^<a name="l00169"><\/a>00169     eptPML4EntryPhysicalAddress = (eptPML4BasePhysicalAddress | (((gpa &amp; <a class="code" href="monitor__ept_8h.html#ace14d38a20945cb7618b39812883005c" title="A mask used to extract HPA of EPT entry from GPA.">EPT_PML4_GPA_MASK<\/a>) &gt;&gt; <a class="code" href="monitor__ept_8h.html#a3ce3f0ab82d640f2e804b9731ad40372" title="A right-shift value for EPT-PML4 entry address calculation.">EPT_PML4_GPA_SHIFT<\/a>) &lt;&lt; PML4_SHIFT));$/;"	a
l00170	html/memoryownershiptable_8c_source.html	/^<a name="l00170"><\/a>00170     eptPML4EntryVirtualAddress =  mapHPAIntoHVA(eptPML4EntryPhysicalAddress,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>));<span class="comment">\/\/getVirtualAddressFromPhysiacalAddress(eptPML4EntryPhysicalAddress);<\/span>$/;"	a
l00171	html/memoryownershiptable_8c_source.html	/^<a name="l00171"><\/a>00171     selectedEPTPML4Entry = *eptPML4EntryVirtualAddress;$/;"	a
l00172	html/memoryownershiptable_8c_source.html	/^<a name="l00172"><\/a>00172     unmapHPAFromHVA(eptPML4EntryVirtualAddress,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>));$/;"	a
l00173	html/memoryownershiptable_8c_source.html	/^<a name="l00173"><\/a>00173     <span class="keywordflow">if<\/span>(!selectedEPTPML4Entry)$/;"	a
l00174	html/memoryownershiptable_8c_source.html	/^<a name="l00174"><\/a>00174     {$/;"	a
l00175	html/memoryownershiptable_8c_source.html	/^<a name="l00175"><\/a>00175         <span class="keywordflow">return<\/span> 0;$/;"	a
l00176	html/memoryownershiptable_8c_source.html	/^<a name="l00176"><\/a>00176     }$/;"	a
l00177	html/memoryownershiptable_8c_source.html	/^<a name="l00177"><\/a>00177 $/;"	a
l00178	html/memoryownershiptable_8c_source.html	/^<a name="l00178"><\/a>00178 $/;"	a
l00179	html/memoryownershiptable_8c_source.html	/^<a name="l00179"><\/a>00179     $/;"	a
l00180	html/memoryownershiptable_8c_source.html	/^<a name="l00180"><\/a>00180     <span class="comment">\/\/Traverse EPT PDPT<\/span>$/;"	a
l00181	html/memoryownershiptable_8c_source.html	/^<a name="l00181"><\/a>00181     eptPDPTBasePhysicalAddress = selectedEPTPML4Entry &amp; PAGE_DIRECTORY_POINTER_TABLE_ENTRY_MASK;$/;"	a
l00182	html/memoryownershiptable_8c_source.html	/^<a name="l00182"><\/a>00182     eptPDPTEntryPhysicalAddress = (eptPDPTBasePhysicalAddress | (((gpa &amp; EPT_PDPT_GPA_MASK) &gt;&gt; EPT_PDPT_GPA_SHIFT) &lt;&lt; PDPT_SHIFT));$/;"	a
l00183	html/memoryownershiptable_8c_source.html	/^<a name="l00183"><\/a>00183     eptPDPTEntryVirtualAddress =  mapHPAIntoHVA(eptPDPTEntryPhysicalAddress,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>));<span class="comment">\/\/getVirtualAddressFromPhysiacalAddress(eptPDPTEntryPhysicalAddress);<\/span>$/;"	a
l00184	html/memoryownershiptable_8c_source.html	/^<a name="l00184"><\/a>00184     selectedEPTPDPTEntry = *eptPDPTEntryVirtualAddress;$/;"	a
l00185	html/memoryownershiptable_8c_source.html	/^<a name="l00185"><\/a>00185     unmapHPAFromHVA(eptPDPTEntryVirtualAddress,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>));$/;"	a
l00186	html/memoryownershiptable_8c_source.html	/^<a name="l00186"><\/a>00186     <span class="keywordflow">if<\/span>(!selectedEPTPDPTEntry)$/;"	a
l00187	html/memoryownershiptable_8c_source.html	/^<a name="l00187"><\/a>00187     {$/;"	a
l00188	html/memoryownershiptable_8c_source.html	/^<a name="l00188"><\/a>00188         <span class="keywordflow">return<\/span> 0;$/;"	a
l00189	html/memoryownershiptable_8c_source.html	/^<a name="l00189"><\/a>00189     }$/;"	a
l00190	html/memoryownershiptable_8c_source.html	/^<a name="l00190"><\/a>00190     $/;"	a
l00191	html/memoryownershiptable_8c_source.html	/^<a name="l00191"><\/a>00191     <span class="comment">\/\/Traverse EPT PD<\/span>$/;"	a
l00192	html/memoryownershiptable_8c_source.html	/^<a name="l00192"><\/a>00192     eptPDBasePhysicalAddress = selectedEPTPDPTEntry &amp; PAGE_DIECTORY_ENTRY_MASK;$/;"	a
l00193	html/memoryownershiptable_8c_source.html	/^<a name="l00193"><\/a>00193     eptPDEntryPhysicalAddress = (eptPDBasePhysicalAddress | (((gpa &amp; <a class="code" href="monitor__ept_8h.html#abf806e0ba2ec2f5405e3ef9701d8a737" title="A mask used to extract HPA of EPT entry from GPA.">EPT_PD_GPA_MASK<\/a>) &gt;&gt; <a class="code" href="monitor__ept_8h.html#aa06a29042c653e73fca00adc8fd7d663" title="A right-shift value for EPT-PD entry address calculation.">EPT_PD_GPA_SHIFT<\/a>) &lt;&lt; PD_SHIFT));$/;"	a
l00194	html/memoryownershiptable_8c_source.html	/^<a name="l00194"><\/a>00194     eptPDEntryVirtualAddress =  mapHPAIntoHVA(eptPDEntryPhysicalAddress,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>));<span class="comment">\/\/getVirtualAddressFromPhysiacalAddress(eptPDEntryPhysicalAddress);<\/span>$/;"	a
l00195	html/memoryownershiptable_8c_source.html	/^<a name="l00195"><\/a>00195     selectedEPTPDEntry = *eptPDEntryVirtualAddress;$/;"	a
l00196	html/memoryownershiptable_8c_source.html	/^<a name="l00196"><\/a>00196     unmapHPAFromHVA(eptPDEntryVirtualAddress,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>));$/;"	a
l00197	html/memoryownershiptable_8c_source.html	/^<a name="l00197"><\/a>00197     <span class="keywordflow">if<\/span>(!selectedEPTPDEntry)$/;"	a
l00198	html/memoryownershiptable_8c_source.html	/^<a name="l00198"><\/a>00198     {$/;"	a
l00199	html/memoryownershiptable_8c_source.html	/^<a name="l00199"><\/a>00199         <span class="keywordflow">return<\/span> 0;$/;"	a
l00200	html/memoryownershiptable_8c_source.html	/^<a name="l00200"><\/a>00200     }   $/;"	a
l00201	html/memoryownershiptable_8c_source.html	/^<a name="l00201"><\/a>00201     $/;"	a
l00202	html/memoryownershiptable_8c_source.html	/^<a name="l00202"><\/a>00202     <span class="comment">\/\/Traverse EPT PT<\/span>$/;"	a
l00203	html/memoryownershiptable_8c_source.html	/^<a name="l00203"><\/a>00203     eptPTBasePhysicalAddress = selectedEPTPDEntry &amp; PAGE_TABLE_ENTRY_MASK;$/;"	a
l00204	html/memoryownershiptable_8c_source.html	/^<a name="l00204"><\/a>00204     eptPTEntryPhysicalAddress = (eptPTBasePhysicalAddress | (((gpa &amp; <a class="code" href="monitor__ept_8h.html#a6f24b0fd49793bb5746899f709fbf171" title="A mask used to extract HPA of EPT entry from GPA.">EPT_PT_GPA_MASK<\/a>) &gt;&gt; <a class="code" href="monitor__ept_8h.html#a95ef0343cf64ff4f5c3a519d24d131dc" title="A right-shift value for EPT-PT entry address calculation.">EPT_PT_GPA_SHIFT<\/a>) &lt;&lt; PT_SHIFT));$/;"	a
l00205	html/memoryownershiptable_8c_source.html	/^<a name="l00205"><\/a>00205     eptPTEntryVirtualAddress =  mapHPAIntoHVA(eptPTEntryPhysicalAddress,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>));<span class="comment">\/\/getVirtualAddressFromPhysiacalAddress(eptPTEntryPhysicalAddress); <\/span>$/;"	a
l00206	html/memoryownershiptable_8c_source.html	/^<a name="l00206"><\/a>00206     selectedEPTPTEntry = *eptPTEntryVirtualAddress;$/;"	a
l00207	html/memoryownershiptable_8c_source.html	/^<a name="l00207"><\/a>00207     <span class="keywordflow">if<\/span>(pageTableEntryPhysicalAddress)$/;"	a
l00208	html/memoryownershiptable_8c_source.html	/^<a name="l00208"><\/a>00208     {$/;"	a
l00209	html/memoryownershiptable_8c_source.html	/^<a name="l00209"><\/a>00209         *pageTableEntryPhysicalAddress = eptPTEntryPhysicalAddress;$/;"	a
l00210	html/memoryownershiptable_8c_source.html	/^<a name="l00210"><\/a>00210     }$/;"	a
l00211	html/memoryownershiptable_8c_source.html	/^<a name="l00211"><\/a>00211     unmapHPAFromHVA(eptPTEntryVirtualAddress,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>));            $/;"	a
l00212	html/memoryownershiptable_8c_source.html	/^<a name="l00212"><\/a>00212     <span class="keywordflow">if<\/span>(!selectedEPTPTEntry)$/;"	a
l00213	html/memoryownershiptable_8c_source.html	/^<a name="l00213"><\/a>00213     {$/;"	a
l00214	html/memoryownershiptable_8c_source.html	/^<a name="l00214"><\/a>00214         <span class="keywordflow">return<\/span> 0;$/;"	a
l00215	html/memoryownershiptable_8c_source.html	/^<a name="l00215"><\/a>00215     }$/;"	a
l00216	html/memoryownershiptable_8c_source.html	/^<a name="l00216"><\/a>00216     $/;"	a
l00217	html/memoryownershiptable_8c_source.html	/^<a name="l00217"><\/a>00217     <span class="comment">\/\/Calculate final HPA<\/span>$/;"	a
l00218	html/memoryownershiptable_8c_source.html	/^<a name="l00218"><\/a>00218     hpa = ((selectedEPTPTEntry &amp; PAGE_MASK) | (gpa &amp; <a class="code" href="monitor__ept_8h.html#a666c4ed20e984021f4fd95a52bd2144f" title="A mask used to extract HPA of EPT entry from GPA.">EPT_GPA_MASK<\/a>));$/;"	a
l00219	html/memoryownershiptable_8c_source.html	/^<a name="l00219"><\/a>00219     $/;"	a
l00220	html/memoryownershiptable_8c_source.html	/^<a name="l00220"><\/a>00220     <span class="keywordflow">return<\/span> hpa;$/;"	a
l00221	html/memoryownershiptable_8c_source.html	/^<a name="l00221"><\/a>00221 }$/;"	a
l00222	html/memoryownershiptable_8c_source.html	/^<a name="l00222"><\/a>00222 $/;"	a
l00223	html/memoryownershiptable_8c_source.html	/^<a name="l00223"><\/a>00223 <span class="comment">\/\/Update all VM&#39;s memory ownership table by scanning entire EPT.<\/span>$/;"	a
l00224	html/memoryownershiptable_8c_source.html	/^<a name="l00224"><\/a>00224 <span class="keywordtype">void<\/span> updateOwnershipTable()$/;"	a
l00225	html/memoryownershiptable_8c_source.html	/^<a name="l00225"><\/a>00225 {$/;"	a
l00226	html/memoryownershiptable_8c_source.html	/^<a name="l00226"><\/a>00226     PHYADDR_t *eptPhyAddr;$/;"	a
l00227	html/memoryownershiptable_8c_source.html	/^<a name="l00227"><\/a>00227     <a class="code" href="monitor__types_8h.html#a7d95b1a68a8959f02a82e7b360cd2d2a" title="A type definition for a unsigned 32-bits data.">U32_t<\/a> physicalAddressWidth;$/;"	a
l00228	html/memoryownershiptable_8c_source.html	/^<a name="l00228"><\/a>00228     sec_getEPTPhyAddr(&amp;eptPhyAddr);$/;"	a
l00229	html/memoryownershiptable_8c_source.html	/^<a name="l00229"><\/a>00229     <span class="comment">\/\/printf(&quot;SSLAB : EPT Physical Addr(%d) : %llx\\n&quot;,sizeof(eptPhyAddr), eptPhyAddr);<\/span>$/;"	a
l00230	html/memoryownershiptable_8c_source.html	/^<a name="l00230"><\/a>00230     <span class="comment">\/\/printf(&quot;SSLAB : EPT Traverse...\\n&quot;);<\/span>$/;"	a
l00231	html/memoryownershiptable_8c_source.html	/^<a name="l00231"><\/a>00231 $/;"	a
l00232	html/memoryownershiptable_8c_source.html	/^<a name="l00232"><\/a>00232     <span class="comment">\/\/get physical address width through cpuid<\/span>$/;"	a
l00233	html/memoryownershiptable_8c_source.html	/^<a name="l00233"><\/a>00233     physicalAddressWidth = sec_getPhysicalAddressWidth();$/;"	a
l00234	html/memoryownershiptable_8c_source.html	/^<a name="l00234"><\/a>00234     <span class="comment">\/\/printf(&quot;SSLAB : physicalAddressWidth : %d\\n&quot;,physicalAddressWidth);<\/span>$/;"	a
l00235	html/memoryownershiptable_8c_source.html	/^<a name="l00235"><\/a>00235     <span class="comment">\/\/printf(&quot;\\n----------------------------------------------------------------------\\n&quot;);<\/span>$/;"	a
l00236	html/memoryownershiptable_8c_source.html	/^<a name="l00236"><\/a>00236     updateOwnershipTableForOneVM(0, eptPhyAddr);$/;"	a
l00237	html/memoryownershiptable_8c_source.html	/^<a name="l00237"><\/a>00237 }$/;"	a
l00238	html/memoryownershiptable_8c_source.html	/^<a name="l00238"><\/a>00238 $/;"	a
l00239	html/memoryownershiptable_8c_source.html	/^<a name="l00239"><\/a>00239 $/;"	a
l00240	html/memoryownershiptable_8c_source.html	/^<a name="l00240"><\/a>00240 <span class="comment">\/\/Update one VM&#39;s memory ownership entry<\/span>$/;"	a
l00241	html/memoryownershiptable_8c_source.html	/^<a name="l00241"><\/a>00241 <span class="keywordtype">void<\/span> updateOwnerVMIDofEPTPage(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> pageID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a5e335338bb0cb66eca6ae05e61c526ef" title="A type definition for a unsigned 8-bits data.">U8_t<\/a> originalAttr)$/;"	a
l00242	html/memoryownershiptable_8c_source.html	/^<a name="l00242"><\/a>00242 {$/;"	a
l00243	html/memoryownershiptable_8c_source.html	/^<a name="l00243"><\/a>00243     <span class="keywordflow">if<\/span>(ownershipTable[pageID].ownerVM  != OWNER_VMM)$/;"	a
l00244	html/memoryownershiptable_8c_source.html	/^<a name="l00244"><\/a>00244     {$/;"	a
l00245	html/memoryownershiptable_8c_source.html	/^<a name="l00245"><\/a>00245         <span class="comment">\/\/printf(&quot;Already allocated Page : %x\\n&quot;,pageID);<\/span>$/;"	a
l00246	html/memoryownershiptable_8c_source.html	/^<a name="l00246"><\/a>00246     }$/;"	a
l00247	html/memoryownershiptable_8c_source.html	/^<a name="l00247"><\/a>00247     ownershipTable[pageID].ownerVM = vmid;$/;"	a
l00248	html/memoryownershiptable_8c_source.html	/^<a name="l00248"><\/a>00248     ownershipTable[pageID].originalAttr = originalAttr;$/;"	a
l00249	html/memoryownershiptable_8c_source.html	/^<a name="l00249"><\/a>00249 }$/;"	a
l00250	html/memoryownershiptable_8c_source.html	/^<a name="l00250"><\/a>00250 $/;"	a
l00251	html/memoryownershiptable_8c_source.html	/^<a name="l00251"><\/a>00251 <span class="comment">\/\/Update one App&#39;s memory ownership entry<\/span>$/;"	a
l00252	html/memoryownershiptable_8c_source.html	/^<a name="l00252"><\/a>00252 <span class="keywordtype">void<\/span> updateOwnerAppIDofEPTPage(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> pageID)$/;"	a
l00253	html/memoryownershiptable_8c_source.html	/^<a name="l00253"><\/a>00253 {$/;"	a
l00254	html/memoryownershiptable_8c_source.html	/^<a name="l00254"><\/a>00254     ownershipTable[pageID].ownerVM  = vmid;$/;"	a
l00255	html/memoryownershiptable_8c_source.html	/^<a name="l00255"><\/a>00255     ownershipTable[pageID].ownerApp = appID;$/;"	a
l00256	html/memoryownershiptable_8c_source.html	/^<a name="l00256"><\/a>00256     ownershipTable[pageID].originalAttr = 0x7;$/;"	a
l00257	html/memoryownershiptable_8c_source.html	/^<a name="l00257"><\/a>00257 }$/;"	a
l00258	html/memoryownershiptable_8c_source.html	/^<a name="l00258"><\/a>00258 $/;"	a
l00259	html/memoryownershiptable_8c_source.html	/^<a name="l00259"><\/a>00259 <span class="keywordtype">void<\/span> addCurrentProcessToProctectingApp()$/;"	a
l00260	html/memoryownershiptable_8c_source.html	/^<a name="l00260"><\/a>00260 {$/;"	a
l00261	html/memoryownershiptable_8c_source.html	/^<a name="l00261"><\/a>00261     PHYADDR_t *currentCR3Value;$/;"	a
l00262	html/memoryownershiptable_8c_source.html	/^<a name="l00262"><\/a>00262     sec_getCR3Value(&amp;currentCR3Value);$/;"	a
l00263	html/memoryownershiptable_8c_source.html	/^<a name="l00263"><\/a>00263     printf(<span class="stringliteral">&quot;currentCR3Value : %llx\\n&quot;<\/span>,currentCR3Value);;$/;"	a
l00264	html/memoryownershiptable_8c_source.html	/^<a name="l00264"><\/a>00264     <span class="keywordflow">if<\/span>(currentCR3Value)$/;"	a
l00265	html/memoryownershiptable_8c_source.html	/^<a name="l00265"><\/a>00265     {$/;"	a
l00266	html/memoryownershiptable_8c_source.html	/^<a name="l00266"><\/a>00266         GUEST_PHYADDR_t cr3PDGPA = (<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>)currentCR3Value &amp; <a class="code" href="guest__state_8h.html#a11dd8a149642208c1e97f359d9c7cbf5" title="A mask which is used to extract the base physical address of page table from CR3 control register val...">CR3_MASK<\/a>;$/;"	a
l00267	html/memoryownershiptable_8c_source.html	/^<a name="l00267"><\/a>00267         <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appIDToSwitch = cr3PDGPA;$/;"	a
l00268	html/memoryownershiptable_8c_source.html	/^<a name="l00268"><\/a>00268         targetApplicationPageTableBasePhysicalAddress = appIDToSwitch;$/;"	a
l00269	html/memoryownershiptable_8c_source.html	/^<a name="l00269"><\/a>00269         printf(<span class="stringliteral">&quot;SSLAB : Target application ID initialized (%llx)\\n&quot;<\/span>,appIDToSwitch);$/;"	a
l00270	html/memoryownershiptable_8c_source.html	/^<a name="l00270"><\/a>00270 $/;"	a
l00271	html/memoryownershiptable_8c_source.html	/^<a name="l00271"><\/a>00271     }   $/;"	a
l00272	html/memoryownershiptable_8c_source.html	/^<a name="l00272"><\/a>00272 }$/;"	a
l00273	html/memoryownershiptable_8c_source.html	/^<a name="l00273"><\/a>00273 $/;"	a
l00274	html/memoryownershiptable_8c_source.html	/^<a name="l00274"><\/a>00274 <span class="comment">\/\/ CR3Change handler<\/span>$/;"	a
l00275	html/memoryownershiptable_8c_source.html	/^<a name="l00275"><\/a>00275 <span class="keywordtype">void<\/span> cr3ChangedHandler()$/;"	a
l00276	html/memoryownershiptable_8c_source.html	/^<a name="l00276"><\/a>00276 {$/;"	a
l00277	html/memoryownershiptable_8c_source.html	/^<a name="l00277"><\/a>00277     <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> cr3ValueToWrite;$/;"	a
l00278	html/memoryownershiptable_8c_source.html	/^<a name="l00278"><\/a>00278     cr3ValueToWrite = sec_getCR3ValueToWrite();$/;"	a
l00279	html/memoryownershiptable_8c_source.html	/^<a name="l00279"><\/a>00279     <span class="keywordflow">if<\/span>(cr3ValueToWrite)$/;"	a
l00280	html/memoryownershiptable_8c_source.html	/^<a name="l00280"><\/a>00280     {$/;"	a
l00281	html/memoryownershiptable_8c_source.html	/^<a name="l00281"><\/a>00281         GUEST_PHYADDR_t cr3PDGPA = cr3ValueToWrite &amp; <a class="code" href="guest__state_8h.html#a11dd8a149642208c1e97f359d9c7cbf5" title="A mask which is used to extract the base physical address of page table from CR3 control register val...">CR3_MASK<\/a>;$/;"	a
l00282	html/memoryownershiptable_8c_source.html	/^<a name="l00282"><\/a>00282 $/;"	a
l00283	html/memoryownershiptable_8c_source.html	/^<a name="l00283"><\/a>00283         <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appIDToSwitch = cr3PDGPA;$/;"	a
l00284	html/memoryownershiptable_8c_source.html	/^<a name="l00284"><\/a>00284         <span class="keywordflow">if<\/span>(appIDToSwitch == targetApplicationPageTableBasePhysicalAddress)$/;"	a
l00285	html/memoryownershiptable_8c_source.html	/^<a name="l00285"><\/a>00285         {$/;"	a
l00286	html/memoryownershiptable_8c_source.html	/^<a name="l00286"><\/a>00286             <span class="comment">\/\/Start scanning the page table of application to protect<\/span>$/;"	a
l00287	html/memoryownershiptable_8c_source.html	/^<a name="l00287"><\/a>00287             traverseApplicationPageTable(0, appIDToSwitch, cr3PDGPA);$/;"	a
l00288	html/memoryownershiptable_8c_source.html	/^<a name="l00288"><\/a>00288         }   $/;"	a
l00289	html/memoryownershiptable_8c_source.html	/^<a name="l00289"><\/a>00289 $/;"	a
l00290	html/memoryownershiptable_8c_source.html	/^<a name="l00290"><\/a>00290     }$/;"	a
l00291	html/memoryownershiptable_8c_source.html	/^<a name="l00291"><\/a>00291 $/;"	a
l00292	html/memoryownershiptable_8c_source.html	/^<a name="l00292"><\/a>00292 }$/;"	a
l00293	html/memoryownershiptable_8c_source.html	/^<a name="l00293"><\/a>00293 $/;"	a
l00294	html/memoryownershiptable_8c_source.html	/^<a name="l00294"><\/a>00294 <span class="comment">\/\/Traverse total guest pages<\/span>$/;"	a
l00295	html/memoryownershiptable_8c_source.html	/^<a name="l00295"><\/a>00295 <span class="keywordtype">void<\/span> traverseApplicationPageTable(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <span class="keyword">const<\/span> GUEST_PHYADDR_t cr3PDGPA)$/;"	a
l00296	html/memoryownershiptable_8c_source.html	/^<a name="l00296"><\/a>00296 {$/;"	a
l00297	html/memoryownershiptable_8c_source.html	/^<a name="l00297"><\/a>00297     traverseGuestPD(vmID, appID, cr3PDGPA);$/;"	a
l00298	html/memoryownershiptable_8c_source.html	/^<a name="l00298"><\/a>00298 }$/;"	a
l00299	html/memoryownershiptable_8c_source.html	/^<a name="l00299"><\/a>00299 $/;"	a
l00300	html/memoryownershiptable_8c_source.html	/^<a name="l00300"><\/a>00300 <span class="comment">\/\/Traverse guest page directories<\/span>$/;"	a
l00301	html/memoryownershiptable_8c_source.html	/^<a name="l00301"><\/a>00301 <span class="keywordtype">void<\/span> traverseGuestPD(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <span class="keyword">const<\/span> GUEST_PHYADDR_t cr3PDGPA)$/;"	a
l00302	html/memoryownershiptable_8c_source.html	/^<a name="l00302"><\/a>00302 {$/;"	a
l00303	html/memoryownershiptable_8c_source.html	/^<a name="l00303"><\/a>00303     <span class="keywordtype">int<\/span> pdIndex;$/;"	a
l00304	html/memoryownershiptable_8c_source.html	/^<a name="l00304"><\/a>00304     <span class="keywordflow">for<\/span>(pdIndex = 0 ; pdIndex &lt; PD_INDEX_MAX ; pdIndex++)$/;"	a
l00305	html/memoryownershiptable_8c_source.html	/^<a name="l00305"><\/a>00305     {$/;"	a
l00306	html/memoryownershiptable_8c_source.html	/^<a name="l00306"><\/a>00306         GUEST_PHYADDR_t currentPDEntryGPA = 0;$/;"	a
l00307	html/memoryownershiptable_8c_source.html	/^<a name="l00307"><\/a>00307         PHYADDR_t currentPDEntryHPA = 0;$/;"	a
l00308	html/memoryownershiptable_8c_source.html	/^<a name="l00308"><\/a>00308         VIRTADDR_t *currentPDEntryHVA = 0;$/;"	a
l00309	html/memoryownershiptable_8c_source.html	/^<a name="l00309"><\/a>00309         <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> currentPDEntry;$/;"	a
l00310	html/memoryownershiptable_8c_source.html	/^<a name="l00310"><\/a>00310 $/;"	a
l00311	html/memoryownershiptable_8c_source.html	/^<a name="l00311"><\/a>00311         currentPDEntryGPA = (cr3PDGPA | (pdIndex &lt;&lt; PD_SHIFT));$/;"	a
l00312	html/memoryownershiptable_8c_source.html	/^<a name="l00312"><\/a>00312         currentPDEntryHPA = <a class="code" href="monitor__util_8h.html#a19ca3fbdba02a8a291fbf56b030e7323" title="This function converts guest physical address to host physical address.">gpaToHPA<\/a>(currentPDEntryGPA,0);$/;"	a
l00313	html/memoryownershiptable_8c_source.html	/^<a name="l00313"><\/a>00313         currentPDEntryHVA = mapHPAIntoHVA(currentPDEntryHPA,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>));$/;"	a
l00314	html/memoryownershiptable_8c_source.html	/^<a name="l00314"><\/a>00314         <span class="keywordflow">if<\/span>(currentPDEntryHVA)$/;"	a
l00315	html/memoryownershiptable_8c_source.html	/^<a name="l00315"><\/a>00315         {$/;"	a
l00316	html/memoryownershiptable_8c_source.html	/^<a name="l00316"><\/a>00316             currentPDEntry = *currentPDEntryHVA;$/;"	a
l00317	html/memoryownershiptable_8c_source.html	/^<a name="l00317"><\/a>00317             traversePT(vmID,appID,currentPDEntry);          $/;"	a
l00318	html/memoryownershiptable_8c_source.html	/^<a name="l00318"><\/a>00318         }$/;"	a
l00319	html/memoryownershiptable_8c_source.html	/^<a name="l00319"><\/a>00319         unmapHPAFromHVA(currentPDEntryHVA,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>));   $/;"	a
l00320	html/memoryownershiptable_8c_source.html	/^<a name="l00320"><\/a>00320         $/;"	a
l00321	html/memoryownershiptable_8c_source.html	/^<a name="l00321"><\/a>00321     }$/;"	a
l00322	html/memoryownershiptable_8c_source.html	/^<a name="l00322"><\/a>00322 }$/;"	a
l00323	html/memoryownershiptable_8c_source.html	/^<a name="l00323"><\/a>00323 $/;"	a
l00324	html/memoryownershiptable_8c_source.html	/^<a name="l00324"><\/a>00324 <span class="comment">\/\/Traverse guest page tables<\/span>$/;"	a
l00325	html/memoryownershiptable_8c_source.html	/^<a name="l00325"><\/a>00325 <span class="keywordtype">void<\/span> traversePT(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> currentPDEntry)$/;"	a
l00326	html/memoryownershiptable_8c_source.html	/^<a name="l00326"><\/a>00326 {$/;"	a
l00327	html/memoryownershiptable_8c_source.html	/^<a name="l00327"><\/a>00327     <span class="keywordtype">int<\/span> ptIndex;$/;"	a
l00328	html/memoryownershiptable_8c_source.html	/^<a name="l00328"><\/a>00328     <span class="keywordflow">for<\/span>(ptIndex = 0 ; ptIndex &lt; PT_INDEX_MAX ; ptIndex++)$/;"	a
l00329	html/memoryownershiptable_8c_source.html	/^<a name="l00329"><\/a>00329     {$/;"	a
l00330	html/memoryownershiptable_8c_source.html	/^<a name="l00330"><\/a>00330         GUEST_PHYADDR_t currentPTEntryGPA = 0;$/;"	a
l00331	html/memoryownershiptable_8c_source.html	/^<a name="l00331"><\/a>00331         PHYADDR_t currentPTEntryHPA = 0;$/;"	a
l00332	html/memoryownershiptable_8c_source.html	/^<a name="l00332"><\/a>00332         VIRTADDR_t *currentPTEntryHVA = 0;$/;"	a
l00333	html/memoryownershiptable_8c_source.html	/^<a name="l00333"><\/a>00333         <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> currentPTEntry;$/;"	a
l00334	html/memoryownershiptable_8c_source.html	/^<a name="l00334"><\/a>00334         $/;"	a
l00335	html/memoryownershiptable_8c_source.html	/^<a name="l00335"><\/a>00335 $/;"	a
l00336	html/memoryownershiptable_8c_source.html	/^<a name="l00336"><\/a>00336         currentPTEntryGPA = ((currentPDEntry &amp;  GUEST_PAGE_MASK) | (ptIndex &lt;&lt; PT_SHIFT));$/;"	a
l00337	html/memoryownershiptable_8c_source.html	/^<a name="l00337"><\/a>00337 $/;"	a
l00338	html/memoryownershiptable_8c_source.html	/^<a name="l00338"><\/a>00338         <span class="keywordflow">if<\/span>(gpaToHPACache[(currentPTEntryGPA &gt;&gt; PAGE_ID_SHIFT)])<span class="comment">\/\/Already owned guest page<\/span>$/;"	a
l00339	html/memoryownershiptable_8c_source.html	/^<a name="l00339"><\/a>00339         {$/;"	a
l00340	html/memoryownershiptable_8c_source.html	/^<a name="l00340"><\/a>00340             <span class="keywordflow">continue<\/span>;$/;"	a
l00341	html/memoryownershiptable_8c_source.html	/^<a name="l00341"><\/a>00341         }$/;"	a
l00342	html/memoryownershiptable_8c_source.html	/^<a name="l00342"><\/a>00342         currentPTEntryHPA = <a class="code" href="monitor__util_8h.html#a19ca3fbdba02a8a291fbf56b030e7323" title="This function converts guest physical address to host physical address.">gpaToHPA<\/a>(currentPTEntryGPA, 0);$/;"	a
l00343	html/memoryownershiptable_8c_source.html	/^<a name="l00343"><\/a>00343         <span class="keywordflow">if<\/span>(currentPTEntryHPA)$/;"	a
l00344	html/memoryownershiptable_8c_source.html	/^<a name="l00344"><\/a>00344         {$/;"	a
l00345	html/memoryownershiptable_8c_source.html	/^<a name="l00345"><\/a>00345             gpaToHPACache[(currentPTEntryGPA &gt;&gt; PAGE_ID_SHIFT)] = currentPTEntryHPA;$/;"	a
l00346	html/memoryownershiptable_8c_source.html	/^<a name="l00346"><\/a>00346             currentPTEntryHVA = mapHPAIntoHVA(currentPTEntryHPA,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>));$/;"	a
l00347	html/memoryownershiptable_8c_source.html	/^<a name="l00347"><\/a>00347             <span class="keywordflow">if<\/span>(currentPTEntryHVA)$/;"	a
l00348	html/memoryownershiptable_8c_source.html	/^<a name="l00348"><\/a>00348             {$/;"	a
l00349	html/memoryownershiptable_8c_source.html	/^<a name="l00349"><\/a>00349                 currentPTEntry = *currentPTEntryHVA;$/;"	a
l00350	html/memoryownershiptable_8c_source.html	/^<a name="l00350"><\/a>00350                 updateOwnerAppIDofGuestPage(vmID, appID, currentPTEntry);$/;"	a
l00351	html/memoryownershiptable_8c_source.html	/^<a name="l00351"><\/a>00351             }$/;"	a
l00352	html/memoryownershiptable_8c_source.html	/^<a name="l00352"><\/a>00352             unmapHPAFromHVA(currentPTEntryHVA,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>));$/;"	a
l00353	html/memoryownershiptable_8c_source.html	/^<a name="l00353"><\/a>00353         }$/;"	a
l00354	html/memoryownershiptable_8c_source.html	/^<a name="l00354"><\/a>00354 $/;"	a
l00355	html/memoryownershiptable_8c_source.html	/^<a name="l00355"><\/a>00355     }$/;"	a
l00356	html/memoryownershiptable_8c_source.html	/^<a name="l00356"><\/a>00356 }$/;"	a
l00357	html/memoryownershiptable_8c_source.html	/^<a name="l00357"><\/a>00357 $/;"	a
l00358	html/memoryownershiptable_8c_source.html	/^<a name="l00358"><\/a>00358 $/;"	a
l00359	html/memoryownershiptable_8c_source.html	/^<a name="l00359"><\/a>00359 <span class="keywordtype">void<\/span> updateOwnerAppIDofGuestPage(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> currentPTEntry)$/;"	a
l00360	html/memoryownershiptable_8c_source.html	/^<a name="l00360"><\/a>00360 {$/;"	a
l00361	html/memoryownershiptable_8c_source.html	/^<a name="l00361"><\/a>00361     <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> eptEntryOfCurrentPage;$/;"	a
l00362	html/memoryownershiptable_8c_source.html	/^<a name="l00362"><\/a>00362     PHYADDR_t eptEntryPhysicalAddress;$/;"	a
l00363	html/memoryownershiptable_8c_source.html	/^<a name="l00363"><\/a>00363     eptEntryOfCurrentPage = getEPTEntryIndexOfGuestPage(currentPTEntry, &amp;eptEntryPhysicalAddress);$/;"	a
l00364	html/memoryownershiptable_8c_source.html	/^<a name="l00364"><\/a>00364     <span class="keywordflow">if<\/span>(eptEntryOfCurrentPage)$/;"	a
l00365	html/memoryownershiptable_8c_source.html	/^<a name="l00365"><\/a>00365     {$/;"	a
l00366	html/memoryownershiptable_8c_source.html	/^<a name="l00366"><\/a>00366         <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> *eptEntryVirtualAddress;$/;"	a
l00367	html/memoryownershiptable_8c_source.html	/^<a name="l00367"><\/a>00367         <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> eptEntryValue;$/;"	a
l00368	html/memoryownershiptable_8c_source.html	/^<a name="l00368"><\/a>00368         eptEntryVirtualAddress = mapHPAIntoHVA(eptEntryPhysicalAddress,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>));$/;"	a
l00369	html/memoryownershiptable_8c_source.html	/^<a name="l00369"><\/a>00369         <span class="keywordflow">if<\/span>(eptEntryVirtualAddress)$/;"	a
l00370	html/memoryownershiptable_8c_source.html	/^<a name="l00370"><\/a>00370         {$/;"	a
l00371	html/memoryownershiptable_8c_source.html	/^<a name="l00371"><\/a>00371             <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> currentPageID;$/;"	a
l00372	html/memoryownershiptable_8c_source.html	/^<a name="l00372"><\/a>00372             eptEntryValue = *eptEntryVirtualAddress;$/;"	a
l00373	html/memoryownershiptable_8c_source.html	/^<a name="l00373"><\/a>00373             currentPageID = eptEntryValue &gt;&gt; PAGE_ID_SHIFT;$/;"	a
l00374	html/memoryownershiptable_8c_source.html	/^<a name="l00374"><\/a>00374             protectingPageTable[currentPageID] = appID;$/;"	a
l00375	html/memoryownershiptable_8c_source.html	/^<a name="l00375"><\/a>00375             printf(<span class="stringliteral">&quot;(Before)currentPageID : %llx\\n&quot;<\/span>,currentPageID);$/;"	a
l00376	html/memoryownershiptable_8c_source.html	/^<a name="l00376"><\/a>00376             printf(<span class="stringliteral">&quot;(Before)eptEntryValue : %llx\\n&quot;<\/span>,eptEntryValue);$/;"	a
l00377	html/memoryownershiptable_8c_source.html	/^<a name="l00377"><\/a>00377             eptEntryValue &amp;= (~0x7);$/;"	a
l00378	html/memoryownershiptable_8c_source.html	/^<a name="l00378"><\/a>00378             *eptEntryVirtualAddress = eptEntryValue;$/;"	a
l00379	html/memoryownershiptable_8c_source.html	/^<a name="l00379"><\/a>00379             printf(<span class="stringliteral">&quot;(After)eptEntryValue : %llx\\n&quot;<\/span>,eptEntryValue);$/;"	a
l00380	html/memoryownershiptable_8c_source.html	/^<a name="l00380"><\/a>00380             unmapHPAFromHVA(eptEntryVirtualAddress,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>));$/;"	a
l00381	html/memoryownershiptable_8c_source.html	/^<a name="l00381"><\/a>00381             updateOwnerAppIDofEPTPage(vmID,appID, eptEntryOfCurrentPage);       $/;"	a
l00382	html/memoryownershiptable_8c_source.html	/^<a name="l00382"><\/a>00382         }       $/;"	a
l00383	html/memoryownershiptable_8c_source.html	/^<a name="l00383"><\/a>00383     }$/;"	a
l00384	html/memoryownershiptable_8c_source.html	/^<a name="l00384"><\/a>00384 $/;"	a
l00385	html/memoryownershiptable_8c_source.html	/^<a name="l00385"><\/a>00385 $/;"	a
l00386	html/memoryownershiptable_8c_source.html	/^<a name="l00386"><\/a>00386 }$/;"	a
l00387	html/memoryownershiptable_8c_source.html	/^<a name="l00387"><\/a>00387 $/;"	a
l00388	html/memoryownershiptable_8c_source.html	/^<a name="l00388"><\/a>00388 <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> getEPTEntryIndexOfGuestPage(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> guestPTEntry, <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> *eptEntryValue)$/;"	a
l00389	html/memoryownershiptable_8c_source.html	/^<a name="l00389"><\/a>00389 {$/;"	a
l00390	html/memoryownershiptable_8c_source.html	/^<a name="l00390"><\/a>00390     GUEST_PHYADDR_t currentGuestPageGPA;$/;"	a
l00391	html/memoryownershiptable_8c_source.html	/^<a name="l00391"><\/a>00391     <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> eptpBaseAddr;$/;"	a
l00392	html/memoryownershiptable_8c_source.html	/^<a name="l00392"><\/a>00392     <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> pageID;$/;"	a
l00393	html/memoryownershiptable_8c_source.html	/^<a name="l00393"><\/a>00393     currentGuestPageGPA = guestPTEntry &amp; GUEST_PAGE_MASK;$/;"	a
l00394	html/memoryownershiptable_8c_source.html	/^<a name="l00394"><\/a>00394 $/;"	a
l00395	html/memoryownershiptable_8c_source.html	/^<a name="l00395"><\/a>00395     pageID = <a class="code" href="monitor__util_8h.html#a19ca3fbdba02a8a291fbf56b030e7323" title="This function converts guest physical address to host physical address.">gpaToHPA<\/a>(currentGuestPageGPA, eptEntryValue);$/;"	a
l00396	html/memoryownershiptable_8c_source.html	/^<a name="l00396"><\/a>00396     pageID &gt;&gt;= PAGE_ID_SHIFT;$/;"	a
l00397	html/memoryownershiptable_8c_source.html	/^<a name="l00397"><\/a>00397 $/;"	a
l00398	html/memoryownershiptable_8c_source.html	/^<a name="l00398"><\/a>00398     <span class="keywordflow">return<\/span> pageID;$/;"	a
l00399	html/memoryownershiptable_8c_source.html	/^<a name="l00399"><\/a>00399 }$/;"	a
l00400	html/memoryownershiptable_8c_source.html	/^<a name="l00400"><\/a>00400 $/;"	a
l00401	html/memoryownershiptable_8c_source.html	/^<a name="l00401"><\/a>00401 $/;"	a
l00402	html/memoryownershiptable_8c_source.html	/^<a name="l00402"><\/a>00402 BOOL_t pageIsProtecting(<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> pageID)$/;"	a
l00403	html/memoryownershiptable_8c_source.html	/^<a name="l00403"><\/a>00403 {$/;"	a
l00404	html/memoryownershiptable_8c_source.html	/^<a name="l00404"><\/a>00404     <span class="keywordflow">return<\/span> protectingPageTable[pageID];$/;"	a
l00405	html/memoryownershiptable_8c_source.html	/^<a name="l00405"><\/a>00405 }$/;"	a
l00001	html/memoryownershiptable_8d_source.html	/^<div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 core\/security_module\/memoryownershiptable.o: \\$/;"	a
l00002	html/memoryownershiptable_8d_source.html	/^<a name="l00002"><\/a>00002  core\/security_module\/memoryownershiptable.c \\$/;"	a
l00003	html/memoryownershiptable_8d_source.html	/^<a name="l00003"><\/a>00003 <\/pre><\/div><\/div><!-- contents -->$/;"	a
l00001	html/memoryownershiptable_8h_source.html	/^<div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 <span class="preprocessor">#ifndef __MEMORY_OWNERSHIP_TABLE_H__<\/span>$/;"	a
l00002	html/memoryownershiptable_8h_source.html	/^<a name="l00002"><\/a>00002 <span class="preprocessor"><\/span><span class="preprocessor">#define __MEMORY_OWNERSHIP_TABLE_H__<\/span>$/;"	a
l00003	html/memoryownershiptable_8h_source.html	/^<a name="l00003"><\/a>00003 <span class="preprocessor"><\/span>$/;"	a
l00004	html/memoryownershiptable_8h_source.html	/^<a name="l00004"><\/a>00004 <span class="preprocessor">#include &lt;sec_types.h&gt;<\/span>$/;"	a
l00005	html/memoryownershiptable_8h_source.html	/^<a name="l00005"><\/a>00005 $/;"	a
l00006	html/memoryownershiptable_8h_source.html	/^<a name="l00006"><\/a>00006 <span class="preprocessor">#define PHY_MEM_MAX_SIZE    ((U64_t)8*1024*1024*1024)   \/\/8GB<\/span>$/;"	a
l00007	html/memoryownershiptable_8h_source.html	/^<a name="l00007"><\/a>00007 <span class="preprocessor"><\/span><span class="preprocessor">#define PAGE_SIZE           ((U64_t)1024*4)             \/\/4KB<\/span>$/;"	a
l00008	html/memoryownershiptable_8h_source.html	/^<a name="l00008"><\/a>00008 <span class="preprocessor"><\/span><span class="preprocessor">#define MAX_NUMBER_OF_PAGES ((U64_t)PHY_MEM_MAX_SIZE \/ PAGE_SIZE)<\/span>$/;"	a
l00009	html/memoryownershiptable_8h_source.html	/^<a name="l00009"><\/a>00009 <span class="preprocessor"><\/span><span class="preprocessor">#define NUMBER_OF_PML4_ENTRY                        (1 &lt;&lt; 9)<\/span>$/;"	a
l00010	html/memoryownershiptable_8h_source.html	/^<a name="l00010"><\/a>00010 <span class="preprocessor"><\/span><span class="preprocessor">#define NUMBER_OF_PAGE_DIRECTORY_POINTER_ENTRY      (1 &lt;&lt; 9)<\/span>$/;"	a
l00011	html/memoryownershiptable_8h_source.html	/^<a name="l00011"><\/a>00011 <span class="preprocessor"><\/span><span class="preprocessor">#define NUMBER_OF_PAGE_DIRECTORY_ENTRY              (1 &lt;&lt; 9)<\/span>$/;"	a
l00012	html/memoryownershiptable_8h_source.html	/^<a name="l00012"><\/a>00012 <span class="preprocessor"><\/span><span class="preprocessor">#define ADDRESS_LENGTH_IN_BITS      (32)<\/span>$/;"	a
l00013	html/memoryownershiptable_8h_source.html	/^<a name="l00013"><\/a>00013 <span class="preprocessor"><\/span>$/;"	a
l00014	html/memoryownershiptable_8h_source.html	/^<a name="l00014"><\/a>00014 <span class="preprocessor">#define PML4_SHIFT      (3)<\/span>$/;"	a
l00015	html/memoryownershiptable_8h_source.html	/^<a name="l00015"><\/a>00015 <span class="preprocessor"><\/span><span class="preprocessor">#define PDPT_SHIFT      (3)<\/span>$/;"	a
l00016	html/memoryownershiptable_8h_source.html	/^<a name="l00016"><\/a>00016 <span class="preprocessor"><\/span><span class="preprocessor">#define PD_SHIFT        (3)<\/span>$/;"	a
l00017	html/memoryownershiptable_8h_source.html	/^<a name="l00017"><\/a>00017 <span class="preprocessor"><\/span><span class="preprocessor">#define PT_SHIFT        (3)<\/span>$/;"	a
l00018	html/memoryownershiptable_8h_source.html	/^<a name="l00018"><\/a>00018 <span class="preprocessor"><\/span>$/;"	a
l00019	html/memoryownershiptable_8h_source.html	/^<a name="l00019"><\/a>00019 $/;"	a
l00020	html/memoryownershiptable_8h_source.html	/^<a name="l00020"><\/a>00020 <span class="preprocessor">#define PAGE_ID_SHIFT       (12)<\/span>$/;"	a
l00021	html/memoryownershiptable_8h_source.html	/^<a name="l00021"><\/a>00021 <span class="preprocessor"><\/span>$/;"	a
l00022	html/memoryownershiptable_8h_source.html	/^<a name="l00022"><\/a>00022 <span class="preprocessor">#define EPT_PML4_GPA_MASK   0xFF8000000000<\/span>$/;"	a
l00023	html/memoryownershiptable_8h_source.html	/^<a name="l00023"><\/a>00023 <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_PDPT_GPA_MASK   0x7FC0000000<\/span>$/;"	a
l00024	html/memoryownershiptable_8h_source.html	/^<a name="l00024"><\/a>00024 <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_PD_GPA_MASK     0x3FE00000<\/span>$/;"	a
l00025	html/memoryownershiptable_8h_source.html	/^<a name="l00025"><\/a>00025 <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_PT_GPA_MASK     0x1FF000<\/span>$/;"	a
l00026	html/memoryownershiptable_8h_source.html	/^<a name="l00026"><\/a>00026 <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_GPA_MASK        0xFFF<\/span>$/;"	a
l00027	html/memoryownershiptable_8h_source.html	/^<a name="l00027"><\/a>00027 <span class="preprocessor"><\/span>$/;"	a
l00028	html/memoryownershiptable_8h_source.html	/^<a name="l00028"><\/a>00028 <span class="preprocessor">#define EPT_PML4_GPA_SHIFT  (39)<\/span>$/;"	a
l00029	html/memoryownershiptable_8h_source.html	/^<a name="l00029"><\/a>00029 <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_PDPT_GPA_SHIFT  (30)<\/span>$/;"	a
l00030	html/memoryownershiptable_8h_source.html	/^<a name="l00030"><\/a>00030 <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_PD_GPA_SHIFT    (21)<\/span>$/;"	a
l00031	html/memoryownershiptable_8h_source.html	/^<a name="l00031"><\/a>00031 <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_PT_GPA_SHIFT    (12)<\/span>$/;"	a
l00032	html/memoryownershiptable_8h_source.html	/^<a name="l00032"><\/a>00032 <span class="preprocessor"><\/span>$/;"	a
l00033	html/memoryownershiptable_8h_source.html	/^<a name="l00033"><\/a>00033 <span class="preprocessor">#define PAGE_DIRECTORY_POINTER_TABLE_ENTRY_MASK     0xFFFFFFFFFF000<\/span>$/;"	a
l00034	html/memoryownershiptable_8h_source.html	/^<a name="l00034"><\/a>00034 <span class="preprocessor"><\/span><span class="preprocessor">#define PAGE_DIECTORY_ENTRY_MASK                    0xFFFFFFFFFF000<\/span>$/;"	a
l00035	html/memoryownershiptable_8h_source.html	/^<a name="l00035"><\/a>00035 <span class="preprocessor"><\/span><span class="preprocessor">#define PAGE_TABLE_ENTRY_MASK                       0xFFFFFFFFFF000<\/span>$/;"	a
l00036	html/memoryownershiptable_8h_source.html	/^<a name="l00036"><\/a>00036 <span class="preprocessor"><\/span><span class="preprocessor">#define PAGE_TABLE_MASK                             0xFFFFFFFFFF000<\/span>$/;"	a
l00037	html/memoryownershiptable_8h_source.html	/^<a name="l00037"><\/a>00037 <span class="preprocessor"><\/span><span class="preprocessor">#define PAGE_MASK                                   0xFFFFFFFFFF000<\/span>$/;"	a
l00038	html/memoryownershiptable_8h_source.html	/^<a name="l00038"><\/a>00038 <span class="preprocessor"><\/span>$/;"	a
l00039	html/memoryownershiptable_8h_source.html	/^<a name="l00039"><\/a>00039 $/;"	a
l00040	html/memoryownershiptable_8h_source.html	/^<a name="l00040"><\/a>00040 <span class="preprocessor">#define GUEST_PAGE_MASK                             0xFFFFF000<\/span>$/;"	a
l00041	html/memoryownershiptable_8h_source.html	/^<a name="l00041"><\/a>00041 <span class="preprocessor"><\/span>$/;"	a
l00042	html/memoryownershiptable_8h_source.html	/^<a name="l00042"><\/a>00042 <span class="preprocessor">#define OWNER_VMM       0<\/span>$/;"	a
l00043	html/memoryownershiptable_8h_source.html	/^<a name="l00043"><\/a>00043 <span class="preprocessor"><\/span><span class="preprocessor">#define OWNER_KERNEL    0<\/span>$/;"	a
l00044	html/memoryownershiptable_8h_source.html	/^<a name="l00044"><\/a>00044 <span class="preprocessor"><\/span>$/;"	a
l00045	html/memoryownershiptable_8h_source.html	/^<a name="l00045"><\/a>00045 <span class="preprocessor">#define PD_INDEX_MAX    0x3FF<\/span>$/;"	a
l00046	html/memoryownershiptable_8h_source.html	/^<a name="l00046"><\/a>00046 <span class="preprocessor"><\/span><span class="preprocessor">#define PT_INDEX_MAX    0x3FF<\/span>$/;"	a
l00047	html/memoryownershiptable_8h_source.html	/^<a name="l00047"><\/a>00047 <span class="preprocessor"><\/span>$/;"	a
l00048	html/memoryownershiptable_8h_source.html	/^<a name="l00048"><\/a><a class="code" href="struct_o_w_n_e_r_s_h_i_p_t_a_b_l_e__t.html">00048<\/a> <span class="keyword">typedef<\/span> <span class="keyword">struct <\/span>$/;"	a
l00049	html/memoryownershiptable_8h_source.html	/^<a name="l00049"><\/a>00049 {$/;"	a
l00050	html/memoryownershiptable_8h_source.html	/^<a name="l00050"><\/a>00050     <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> ownerVM;$/;"	a
l00051	html/memoryownershiptable_8h_source.html	/^<a name="l00051"><\/a>00051     <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> ownerApp;$/;"	a
l00052	html/memoryownershiptable_8h_source.html	/^<a name="l00052"><\/a>00052     <a class="code" href="monitor__types_8h.html#a5e335338bb0cb66eca6ae05e61c526ef" title="A type definition for a unsigned 8-bits data.">U8_t<\/a> originalAttr;$/;"	a
l00053	html/memoryownershiptable_8h_source.html	/^<a name="l00053"><\/a>00053 } <a class="code" href="struct_o_w_n_e_r_s_h_i_p_t_a_b_l_e__t.html">OWNERSHIPTABLE_t<\/a>;$/;"	a
l00054	html/memoryownershiptable_8h_source.html	/^<a name="l00054"><\/a>00054 $/;"	a
l00055	html/memoryownershiptable_8h_source.html	/^<a name="l00055"><\/a>00055 $/;"	a
l00056	html/memoryownershiptable_8h_source.html	/^<a name="l00056"><\/a>00056 <span class="keywordtype">void<\/span> initOwnershipTable();$/;"	a
l00057	html/memoryownershiptable_8h_source.html	/^<a name="l00057"><\/a>00057 <span class="comment">\/\/Traverse one VM&#39;s EPT &amp; update memory ownership table<\/span>$/;"	a
l00058	html/memoryownershiptable_8h_source.html	/^<a name="l00058"><\/a>00058 <span class="keywordtype">void<\/span> updateOwnershipTableForOneVM(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, PHYADDR_t *eptPhyBaseAddr);$/;"	a
l00059	html/memoryownershiptable_8h_source.html	/^<a name="l00059"><\/a>00059 <span class="comment">\/\/Traverse EPT PML4<\/span>$/;"	a
l00060	html/memoryownershiptable_8h_source.html	/^<a name="l00060"><\/a>00060 <span class="keywordtype">void<\/span> traverseEPTPML4(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, PHYADDR_t *eptPhyBaseAddr);$/;"	a
l00061	html/memoryownershiptable_8h_source.html	/^<a name="l00061"><\/a>00061 <span class="comment">\/\/Travers one VM&#39;s EPT Page Directory Pointer Table<\/span>$/;"	a
l00062	html/memoryownershiptable_8h_source.html	/^<a name="l00062"><\/a>00062 <span class="keywordtype">void<\/span> traverseEPTPageDirectoryPointerTable(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, PHYADDR_t *currentEPTPageDirectoryPointerTableBasePhysicalAddress);$/;"	a
l00063	html/memoryownershiptable_8h_source.html	/^<a name="l00063"><\/a>00063 <span class="comment">\/\/Traverse one VM&#39;s EPT Page Directory<\/span>$/;"	a
l00064	html/memoryownershiptable_8h_source.html	/^<a name="l00064"><\/a>00064 <span class="keywordtype">void<\/span> traverseEPTPageDirectory(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, PHYADDR_t *currentEPTPageDirectoryBasePhysicalAddress);$/;"	a
l00065	html/memoryownershiptable_8h_source.html	/^<a name="l00065"><\/a>00065 <span class="comment">\/\/Traverse one VM&#39;s EPT Page Table<\/span>$/;"	a
l00066	html/memoryownershiptable_8h_source.html	/^<a name="l00066"><\/a>00066 <span class="keywordtype">void<\/span> traverseEPTPageTable(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, PHYADDR_t *currentEPTPageTableBasePhysicalAddress);$/;"	a
l00067	html/memoryownershiptable_8h_source.html	/^<a name="l00067"><\/a>00067 PHYADDR_t gpaToHPA(<span class="keyword">const<\/span> GUEST_PHYADDR_t gpa, <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> *pageTableEntry);$/;"	a
l00068	html/memoryownershiptable_8h_source.html	/^<a name="l00068"><\/a>00068 <span class="comment">\/\/Update all VM&#39;s memory ownership table by scanning entire EPT.<\/span>$/;"	a
l00069	html/memoryownershiptable_8h_source.html	/^<a name="l00069"><\/a>00069 <span class="keywordtype">void<\/span> updateOwnershipTable();$/;"	a
l00070	html/memoryownershiptable_8h_source.html	/^<a name="l00070"><\/a>00070 <span class="comment">\/\/Update one VM&#39;s memory ownership entry<\/span>$/;"	a
l00071	html/memoryownershiptable_8h_source.html	/^<a name="l00071"><\/a>00071 <span class="keywordtype">void<\/span> updateOwnerVMIDofEPTPage(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> pageID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a5e335338bb0cb66eca6ae05e61c526ef" title="A type definition for a unsigned 8-bits data.">U8_t<\/a> originalAttr);$/;"	a
l00072	html/memoryownershiptable_8h_source.html	/^<a name="l00072"><\/a>00072 <span class="comment">\/\/Update one App&#39;s memory ownership entry<\/span>$/;"	a
l00073	html/memoryownershiptable_8h_source.html	/^<a name="l00073"><\/a>00073 <span class="keywordtype">void<\/span> updateOwnerAppIDofEPTPage(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmid, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> pageID);$/;"	a
l00074	html/memoryownershiptable_8h_source.html	/^<a name="l00074"><\/a>00074 <span class="comment">\/\/ CR3Change handler<\/span>$/;"	a
l00075	html/memoryownershiptable_8h_source.html	/^<a name="l00075"><\/a>00075 <span class="keywordtype">void<\/span> cr3ChangedHandler();$/;"	a
l00076	html/memoryownershiptable_8h_source.html	/^<a name="l00076"><\/a>00076 <span class="comment">\/\/Traverse total guest pages<\/span>$/;"	a
l00077	html/memoryownershiptable_8h_source.html	/^<a name="l00077"><\/a>00077 <span class="keywordtype">void<\/span> traverseApplicationPageTable(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <span class="keyword">const<\/span> GUEST_PHYADDR_t cr3PDGPA);$/;"	a
l00078	html/memoryownershiptable_8h_source.html	/^<a name="l00078"><\/a>00078 <span class="comment">\/\/Traverse guest page directories<\/span>$/;"	a
l00079	html/memoryownershiptable_8h_source.html	/^<a name="l00079"><\/a>00079 <span class="keywordtype">void<\/span> traverseGuestPD(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <span class="keyword">const<\/span> GUEST_PHYADDR_t cr3PDGPA);$/;"	a
l00080	html/memoryownershiptable_8h_source.html	/^<a name="l00080"><\/a>00080 <span class="comment">\/\/Traverse guest page tables<\/span>$/;"	a
l00081	html/memoryownershiptable_8h_source.html	/^<a name="l00081"><\/a>00081 <span class="keywordtype">void<\/span> traversePT(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> currentPDEntry);$/;"	a
l00082	html/memoryownershiptable_8h_source.html	/^<a name="l00082"><\/a>00082 <span class="keywordtype">void<\/span> updateOwnerAppIDofGuestPage(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a> vmID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> currentPTEntry);$/;"	a
l00083	html/memoryownershiptable_8h_source.html	/^<a name="l00083"><\/a>00083 <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> getEPTEntryIndexOfGuestPage(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> guestPTEntry, <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> *eptEntryValue);$/;"	a
l00084	html/memoryownershiptable_8h_source.html	/^<a name="l00084"><\/a>00084 <span class="comment">\/\/Check if we want to protect currently running application.<\/span>$/;"	a
l00085	html/memoryownershiptable_8h_source.html	/^<a name="l00085"><\/a>00085 BOOL_t applicationIsProtectionTarget(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a> appID);$/;"	a
l00086	html/memoryownershiptable_8h_source.html	/^<a name="l00086"><\/a>00086 BOOL_t pageIsProtecting(<a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> pageID);$/;"	a
l00087	html/memoryownershiptable_8h_source.html	/^<a name="l00087"><\/a>00087 <span class="keywordtype">void<\/span> addCurrentProcessToProctectingApp();$/;"	a
l00088	html/memoryownershiptable_8h_source.html	/^<a name="l00088"><\/a>00088 <span class="preprocessor">#endif<\/span>$/;"	a
define-members	html/monitor__ept_8h.html	/^<tr><td colspan="2"><h2><a name="define-members"><\/a>$/;"	a
details	html/monitor__ept_8h.html	/^<hr\/><a name="details" id="details"><\/a><h2>상세한 설명<\/h2>$/;"	a
l00001	html/monitor__ept_8h_source.html	/^<a href="monitor__ept_8h.html">이 파일의 문서화 페이지로 가기<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 $/;"	a
l00162	html/monitor__ept_8h_source.html	/^<a name="l00162"><\/a>00162 <span class="preprocessor">#ifndef __MONITOR_EPT_H__<\/span>$/;"	a
l00163	html/monitor__ept_8h_source.html	/^<a name="l00163"><\/a>00163 <span class="preprocessor"><\/span><span class="preprocessor">#define __MONITOR_EPT_H__<\/span>$/;"	a
l00164	html/monitor__ept_8h_source.html	/^<a name="l00164"><\/a>00164 <span class="preprocessor"><\/span>$/;"	a
l00165	html/monitor__ept_8h_source.html	/^<a name="l00165"><\/a>00165 <span class="preprocessor">#include &lt;<a class="code" href="monitor__types_8h.html" title="Definitions of types that are used in this project.">monitor_types.h<\/a>&gt;<\/span>$/;"	a
l00166	html/monitor__ept_8h_source.html	/^<a name="l00166"><\/a>00166 $/;"	a
l00167	html/monitor__ept_8h_source.html	/^<a name="l00167"><\/a><a class="code" href="monitor__ept_8h.html#a71ab36e768a6cf0cff31a9e288abe306">00167<\/a> <span class="preprocessor">#define EPT_PML4_ENTRY_MASK ((U64_t)0xFFFFFFFFFF000)<\/span>$/;"	a
l00168	html/monitor__ept_8h_source.html	/^<a name="l00168"><\/a><a class="code" href="monitor__ept_8h.html#aca4d6718af5283d4aa065fac24e64e54">00168<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_PDP_ENTRY_MASK  ((U64_t)0xFFFFFFFFFF000)<\/span>$/;"	a
l00169	html/monitor__ept_8h_source.html	/^<a name="l00169"><\/a><a class="code" href="monitor__ept_8h.html#a23ff1894aab21877ab61e8d453aacaec">00169<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_PD_ENTRY_MASK   ((U64_t)0xFFFFFFFFFF000)<\/span>$/;"	a
l00170	html/monitor__ept_8h_source.html	/^<a name="l00170"><\/a><a class="code" href="monitor__ept_8h.html#a369c8c91c392e3da4f0368c4640563df">00170<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_PT_ENTRY_MASK   ((U64_t)0xFFFFFFFFFF000)<\/span>$/;"	a
l00171	html/monitor__ept_8h_source.html	/^<a name="l00171"><\/a><a class="code" href="monitor__ept_8h.html#a666c4ed20e984021f4fd95a52bd2144f">00171<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_GPA_MASK        (0xFFF)<\/span>$/;"	a
l00172	html/monitor__ept_8h_source.html	/^<a name="l00172"><\/a>00172 <span class="preprocessor"><\/span>$/;"	a
l00173	html/monitor__ept_8h_source.html	/^<a name="l00173"><\/a><a class="code" href="monitor__ept_8h.html#ace14d38a20945cb7618b39812883005c">00173<\/a> <span class="preprocessor">#define EPT_PML4_GPA_MASK ((U64_t)0xFF8000000000)<\/span>$/;"	a
l00174	html/monitor__ept_8h_source.html	/^<a name="l00174"><\/a><a class="code" href="monitor__ept_8h.html#a2cc4d274ab4b1835614390ec864191fe">00174<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_PDP_GPA_MASK ((U64_t)0x7FC0000000)<\/span>$/;"	a
l00175	html/monitor__ept_8h_source.html	/^<a name="l00175"><\/a><a class="code" href="monitor__ept_8h.html#abf806e0ba2ec2f5405e3ef9701d8a737">00175<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_PD_GPA_MASK ((U64_t)0x3FE00000)<\/span>$/;"	a
l00176	html/monitor__ept_8h_source.html	/^<a name="l00176"><\/a><a class="code" href="monitor__ept_8h.html#a6f24b0fd49793bb5746899f709fbf171">00176<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_PT_GPA_MASK ((U64_t)0x1FF000)<\/span>$/;"	a
l00177	html/monitor__ept_8h_source.html	/^<a name="l00177"><\/a>00177 <span class="preprocessor"><\/span>$/;"	a
l00178	html/monitor__ept_8h_source.html	/^<a name="l00178"><\/a><a class="code" href="monitor__ept_8h.html#a3ce3f0ab82d640f2e804b9731ad40372">00178<\/a> <span class="preprocessor">#define EPT_PML4_GPA_SHIFT (39 - 3)<\/span>$/;"	a
l00179	html/monitor__ept_8h_source.html	/^<a name="l00179"><\/a><a class="code" href="monitor__ept_8h.html#a945351fadae2a2f125144db6a7e943c0">00179<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_PDP_GPA_SHIFT (30 - 3)<\/span>$/;"	a
l00180	html/monitor__ept_8h_source.html	/^<a name="l00180"><\/a><a class="code" href="monitor__ept_8h.html#aa06a29042c653e73fca00adc8fd7d663">00180<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_PD_GPA_SHIFT (21 - 3)<\/span>$/;"	a
l00181	html/monitor__ept_8h_source.html	/^<a name="l00181"><\/a><a class="code" href="monitor__ept_8h.html#a95ef0343cf64ff4f5c3a519d24d131dc">00181<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define EPT_PT_GPA_SHIFT (12 - 3)<\/span>$/;"	a
l00182	html/monitor__ept_8h_source.html	/^<a name="l00182"><\/a>00182 <span class="preprocessor"><\/span>$/;"	a
l00183	html/monitor__ept_8h_source.html	/^<a name="l00183"><\/a><a class="code" href="monitor__ept_8h.html#af0f9b8645d450175e29fa94945a7f2ab">00183<\/a> <span class="preprocessor">#define EPT_ATTRIBUTE_MASK 0x7<\/span>$/;"	a
l00184	html/monitor__ept_8h_source.html	/^<a name="l00184"><\/a>00184 <span class="preprocessor"><\/span>$/;"	a
l00185	html/monitor__ept_8h_source.html	/^<a name="l00185"><\/a>00185 <span class="preprocessor">#endif<\/span>$/;"	a
details	html/monitor__types_8h.html	/^<hr\/><a name="details" id="details"><\/a><h2>상세한 설명<\/h2>$/;"	a
typedef-members	html/monitor__types_8h.html	/^<tr><td colspan="2"><h2><a name="typedef-members"><\/a>$/;"	a
l00001	html/monitor__types_8h_source.html	/^<a href="monitor__types_8h.html">이 파일의 문서화 페이지로 가기<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 $/;"	a
l00045	html/monitor__types_8h_source.html	/^<a name="l00045"><\/a>00045 <span class="preprocessor">#ifndef __MONITOR_TYPES_h__<\/span>$/;"	a
l00046	html/monitor__types_8h_source.html	/^<a name="l00046"><\/a>00046 <span class="preprocessor"><\/span><span class="preprocessor">#define __MONITOR_TYPES_h__<\/span>$/;"	a
l00047	html/monitor__types_8h_source.html	/^<a name="l00047"><\/a>00047 <span class="preprocessor"><\/span>$/;"	a
l00048	html/monitor__types_8h_source.html	/^<a name="l00048"><\/a><a class="code" href="monitor__types_8h.html#a5e335338bb0cb66eca6ae05e61c526ef">00048<\/a> <span class="keyword">typedef<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">char<\/span>   <a class="code" href="monitor__types_8h.html#a5e335338bb0cb66eca6ae05e61c526ef" title="A type definition for a unsigned 8-bits data.">U8_t<\/a>;$/;"	a
l00049	html/monitor__types_8h_source.html	/^<a name="l00049"><\/a><a class="code" href="monitor__types_8h.html#a94a9bed88b9d616fb24861d14ecc8c97">00049<\/a> <span class="keyword">typedef<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>  <a class="code" href="monitor__types_8h.html#a94a9bed88b9d616fb24861d14ecc8c97" title="A type definition for a unsigned 16-bits data.">U16_t<\/a>;$/;"	a
l00050	html/monitor__types_8h_source.html	/^<a name="l00050"><\/a><a class="code" href="monitor__types_8h.html#a7d95b1a68a8959f02a82e7b360cd2d2a">00050<\/a> <span class="keyword">typedef<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span>   <a class="code" href="monitor__types_8h.html#a7d95b1a68a8959f02a82e7b360cd2d2a" title="A type definition for a unsigned 32-bits data.">U32_t<\/a>;$/;"	a
l00051	html/monitor__types_8h_source.html	/^<a name="l00051"><\/a><a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617">00051<\/a> <span class="keyword">typedef<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span>  <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>;$/;"	a
l00052	html/monitor__types_8h_source.html	/^<a name="l00052"><\/a>00052 $/;"	a
l00053	html/monitor__types_8h_source.html	/^<a name="l00053"><\/a><a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c">00053<\/a> <span class="keyword">typedef<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>   <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a>;$/;"	a
l00054	html/monitor__types_8h_source.html	/^<a name="l00054"><\/a><a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac">00054<\/a> <span class="keyword">typedef<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>   <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a>;$/;"	a
l00055	html/monitor__types_8h_source.html	/^<a name="l00055"><\/a><a class="code" href="monitor__types_8h.html#ac907eebb79dda7ef9e53c39e1b4a721e">00055<\/a> <span class="keyword">typedef<\/span> <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a>   <a class="code" href="monitor__types_8h.html#ac907eebb79dda7ef9e53c39e1b4a721e" title="A type definition for EPT Pointer (HPA). &gt; Note : EPTP_t is equal to HPA.">EPTP_t<\/a>;$/;"	a
l00056	html/monitor__types_8h_source.html	/^<a name="l00056"><\/a>00056 $/;"	a
l00057	html/monitor__types_8h_source.html	/^<a name="l00057"><\/a><a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02">00057<\/a> <span class="keyword">typedef<\/span> <a class="code" href="monitor__types_8h.html#ac907eebb79dda7ef9e53c39e1b4a721e" title="A type definition for EPT Pointer (HPA). &gt; Note : EPTP_t is equal to HPA.">EPTP_t<\/a>  <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a>;$/;"	a
l00058	html/monitor__types_8h_source.html	/^<a name="l00058"><\/a><a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d">00058<\/a> <span class="keyword">typedef<\/span> <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a>   <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a>;$/;"	a
l00059	html/monitor__types_8h_source.html	/^<a name="l00059"><\/a>00059 $/;"	a
l00060	html/monitor__types_8h_source.html	/^<a name="l00060"><\/a><a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0">00060<\/a> <span class="keyword">typedef<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>   <a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a>;$/;"	a
l00061	html/monitor__types_8h_source.html	/^<a name="l00061"><\/a><a class="code" href="monitor__types_8h.html#a0c8a2300d54b9380cad96861cc51469d">00061<\/a> <span class="keyword">typedef<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>   <a class="code" href="monitor__types_8h.html#a0c8a2300d54b9380cad96861cc51469d" title="A type definition for guest page table entry.">PGT_ENTRY_t<\/a>;$/;"	a
l00062	html/monitor__types_8h_source.html	/^<a name="l00062"><\/a>00062 <span class="preprocessor">#endif<\/span>$/;"	a
details	html/monitor__util_8c.html	/^<hr\/><a name="details" id="details"><\/a><h2>상세한 설명<\/h2>$/;"	a
func-members	html/monitor__util_8c.html	/^<tr><td colspan="2"><h2><a name="func-members"><\/a>$/;"	a
l00001	html/monitor__util_8c_source.html	/^<a href="monitor__util_8c.html">이 파일의 문서화 페이지로 가기<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 $/;"	a
l00006	html/monitor__util_8c_source.html	/^<a name="l00006"><\/a>00006 <span class="preprocessor">#include &lt;<a class="code" href="monitor__util_8h.html" title="This file exists for supporting some uiility functions.">monitor_util.h<\/a>&gt;<\/span>$/;"	a
l00007	html/monitor__util_8c_source.html	/^<a name="l00007"><\/a>00007 <span class="preprocessor">#include &lt;<a class="code" href="monitor__ept_8h.html" title="This file declares some EPT-related functions and defines EPT-related constants.">monitor_ept.h<\/a>&gt;<\/span>$/;"	a
l00008	html/monitor__util_8c_source.html	/^<a name="l00008"><\/a>00008 <span class="preprocessor">#include &lt;<a class="code" href="guest__state_8h.html" title="High-level facilities to get guest VM&#39;s information.">guest_state.h<\/a>&gt;<\/span>$/;"	a
l00009	html/monitor__util_8c_source.html	/^<a name="l00009"><\/a>00009 $/;"	a
l00010	html/monitor__util_8c_source.html	/^<a name="l00010"><\/a>00010 <span class="preprocessor">#ifdef CONFIG_BITVISOR<\/span>$/;"	a
l00011	html/monitor__util_8c_source.html	/^<a name="l00011"><\/a>00011 <span class="preprocessor"><\/span><span class="preprocessor">    #include &lt;mm.h&gt;<\/span>$/;"	a
l00012	html/monitor__util_8c_source.html	/^<a name="l00012"><\/a>00012 <span class="preprocessor">#endif<\/span>$/;"	a
l00013	html/monitor__util_8c_source.html	/^<a name="l00013"><\/a>00013 <span class="preprocessor"><\/span>$/;"	a
l00014	html/monitor__util_8c_source.html	/^<a name="l00014"><\/a><a class="code" href="monitor__util_8c.html#a19ca3fbdba02a8a291fbf56b030e7323">00014<\/a> <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> <a class="code" href="monitor__util_8h.html#a19ca3fbdba02a8a291fbf56b030e7323" title="This function converts guest physical address to host physical address.">gpaToHPA<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> gpa, <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> *eptEntryHPA)$/;"	a
l00015	html/monitor__util_8c_source.html	/^<a name="l00015"><\/a>00015 {$/;"	a
l00016	html/monitor__util_8c_source.html	/^<a name="l00016"><\/a>00016     <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> eptBaseHPA;$/;"	a
l00017	html/monitor__util_8c_source.html	/^<a name="l00017"><\/a>00017     <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> currentEPT_PML4_Entry_HPA;$/;"	a
l00018	html/monitor__util_8c_source.html	/^<a name="l00018"><\/a>00018     <a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a> *pCurrentEPT_PML4_Entry, currentEPT_PML4_Entry;$/;"	a
l00019	html/monitor__util_8c_source.html	/^<a name="l00019"><\/a>00019 $/;"	a
l00020	html/monitor__util_8c_source.html	/^<a name="l00020"><\/a>00020     <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> eptBase_PDP_HPA;$/;"	a
l00021	html/monitor__util_8c_source.html	/^<a name="l00021"><\/a>00021     <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> currentEPT_PDP_Entry_HPA;$/;"	a
l00022	html/monitor__util_8c_source.html	/^<a name="l00022"><\/a>00022     <a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a> *pCurrentEPT_PDP_Entry, currentEPT_PDP_Entry;$/;"	a
l00023	html/monitor__util_8c_source.html	/^<a name="l00023"><\/a>00023 $/;"	a
l00024	html/monitor__util_8c_source.html	/^<a name="l00024"><\/a>00024     <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> eptBase_PD_HPA;$/;"	a
l00025	html/monitor__util_8c_source.html	/^<a name="l00025"><\/a>00025     <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> currentEPT_PD_Entry_HPA;$/;"	a
l00026	html/monitor__util_8c_source.html	/^<a name="l00026"><\/a>00026     <a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a> *pCurrentEPT_PD_Entry, currentEPT_PD_Entry; $/;"	a
l00027	html/monitor__util_8c_source.html	/^<a name="l00027"><\/a>00027 $/;"	a
l00028	html/monitor__util_8c_source.html	/^<a name="l00028"><\/a>00028     <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> eptBase_PT_HPA;$/;"	a
l00029	html/monitor__util_8c_source.html	/^<a name="l00029"><\/a>00029     <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> currentEPT_PT_Entry_HPA;$/;"	a
l00030	html/monitor__util_8c_source.html	/^<a name="l00030"><\/a>00030     <a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a> *pCurrentEPT_PT_Entry, currentEPT_PT_Entry;     $/;"	a
l00031	html/monitor__util_8c_source.html	/^<a name="l00031"><\/a>00031 $/;"	a
l00032	html/monitor__util_8c_source.html	/^<a name="l00032"><\/a>00032     <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> pageFrameHPA;$/;"	a
l00033	html/monitor__util_8c_source.html	/^<a name="l00033"><\/a>00033 $/;"	a
l00034	html/monitor__util_8c_source.html	/^<a name="l00034"><\/a>00034     <span class="keywordflow">if<\/span>(eptEntryHPA)$/;"	a
l00035	html/monitor__util_8c_source.html	/^<a name="l00035"><\/a>00035     {$/;"	a
l00036	html/monitor__util_8c_source.html	/^<a name="l00036"><\/a>00036         *eptEntryHPA = 0;$/;"	a
l00037	html/monitor__util_8c_source.html	/^<a name="l00037"><\/a>00037     }$/;"	a
l00038	html/monitor__util_8c_source.html	/^<a name="l00038"><\/a>00038 $/;"	a
l00039	html/monitor__util_8c_source.html	/^<a name="l00039"><\/a>00039     eptBaseHPA = <a class="code" href="guest__state_8c.html#a33fb594e7472da1af81f2abf272a64b2" title="Get the start address of extended page table.">get_ept_base_HPA<\/a>();$/;"	a
l00040	html/monitor__util_8c_source.html	/^<a name="l00040"><\/a>00040     currentEPT_PML4_Entry_HPA = eptBaseHPA | ((gpa &amp; <a class="code" href="monitor__ept_8h.html#ace14d38a20945cb7618b39812883005c" title="A mask used to extract HPA of EPT entry from GPA.">EPT_PML4_GPA_MASK<\/a>) &gt;&gt; <a class="code" href="monitor__ept_8h.html#a3ce3f0ab82d640f2e804b9731ad40372" title="A right-shift value for EPT-PML4 entry address calculation.">EPT_PML4_GPA_SHIFT<\/a>);$/;"	a
l00041	html/monitor__util_8c_source.html	/^<a name="l00041"><\/a>00041     pCurrentEPT_PML4_Entry = (<a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a>*)<a class="code" href="monitor__util_8h.html#ac66e271532851a5737a7968ddc1390e4" title="This function maps host physical address into hypervisor&#39;s virtual memory.">mapHPAintoHVA<\/a>(currentEPT_PML4_Entry_HPA,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a>));$/;"	a
l00042	html/monitor__util_8c_source.html	/^<a name="l00042"><\/a>00042     <span class="keywordflow">if<\/span>(!pCurrentEPT_PML4_Entry)$/;"	a
l00043	html/monitor__util_8c_source.html	/^<a name="l00043"><\/a>00043     {$/;"	a
l00044	html/monitor__util_8c_source.html	/^<a name="l00044"><\/a>00044         <span class="keywordflow">return<\/span> 0;$/;"	a
l00045	html/monitor__util_8c_source.html	/^<a name="l00045"><\/a>00045     }$/;"	a
l00046	html/monitor__util_8c_source.html	/^<a name="l00046"><\/a>00046     currentEPT_PML4_Entry = *pCurrentEPT_PML4_Entry;$/;"	a
l00047	html/monitor__util_8c_source.html	/^<a name="l00047"><\/a>00047     <a class="code" href="monitor__util_8h.html#ae5b8234f7d553177a9d3f932fe1c112b" title="This function maps host physical address into hypervisor&#39;s virtual memory.">unmapHPAintoHVA<\/a>((<span class="keywordtype">void<\/span>*)pCurrentEPT_PML4_Entry,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a>));$/;"	a
l00048	html/monitor__util_8c_source.html	/^<a name="l00048"><\/a>00048     <span class="keywordflow">if<\/span>(!currentEPT_PML4_Entry)$/;"	a
l00049	html/monitor__util_8c_source.html	/^<a name="l00049"><\/a>00049     {$/;"	a
l00050	html/monitor__util_8c_source.html	/^<a name="l00050"><\/a>00050         <span class="keywordflow">return<\/span> 0;$/;"	a
l00051	html/monitor__util_8c_source.html	/^<a name="l00051"><\/a>00051     }$/;"	a
l00052	html/monitor__util_8c_source.html	/^<a name="l00052"><\/a>00052 $/;"	a
l00053	html/monitor__util_8c_source.html	/^<a name="l00053"><\/a>00053     eptBase_PDP_HPA = currentEPT_PML4_Entry &amp; <a class="code" href="guest___i_a32e_page_8h.html#a71ab36e768a6cf0cff31a9e288abe306" title="A mask that is used to extract base HPA of EPT PDP from EPT PML4 entry.">EPT_PML4_ENTRY_MASK<\/a>;$/;"	a
l00054	html/monitor__util_8c_source.html	/^<a name="l00054"><\/a>00054     currentEPT_PDP_Entry_HPA = eptBase_PDP_HPA | ((gpa &amp; <a class="code" href="monitor__ept_8h.html#a2cc4d274ab4b1835614390ec864191fe" title="A mask used to extract HPA of EPT entry from GPA.">EPT_PDP_GPA_MASK<\/a>) &gt;&gt; <a class="code" href="monitor__ept_8h.html#a945351fadae2a2f125144db6a7e943c0" title="A right-shift value for EPT-PDP entry address calculation.">EPT_PDP_GPA_SHIFT<\/a>);$/;"	a
l00055	html/monitor__util_8c_source.html	/^<a name="l00055"><\/a>00055     pCurrentEPT_PDP_Entry = (<a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a>*)<a class="code" href="monitor__util_8h.html#ac66e271532851a5737a7968ddc1390e4" title="This function maps host physical address into hypervisor&#39;s virtual memory.">mapHPAintoHVA<\/a>(currentEPT_PDP_Entry_HPA,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a>));$/;"	a
l00056	html/monitor__util_8c_source.html	/^<a name="l00056"><\/a>00056     <span class="keywordflow">if<\/span>(!pCurrentEPT_PDP_Entry)$/;"	a
l00057	html/monitor__util_8c_source.html	/^<a name="l00057"><\/a>00057     {$/;"	a
l00058	html/monitor__util_8c_source.html	/^<a name="l00058"><\/a>00058         <span class="keywordflow">return<\/span> 0;$/;"	a
l00059	html/monitor__util_8c_source.html	/^<a name="l00059"><\/a>00059     }$/;"	a
l00060	html/monitor__util_8c_source.html	/^<a name="l00060"><\/a>00060     currentEPT_PDP_Entry = *pCurrentEPT_PDP_Entry;$/;"	a
l00061	html/monitor__util_8c_source.html	/^<a name="l00061"><\/a>00061     <a class="code" href="monitor__util_8h.html#ae5b8234f7d553177a9d3f932fe1c112b" title="This function maps host physical address into hypervisor&#39;s virtual memory.">unmapHPAintoHVA<\/a>((<span class="keywordtype">void<\/span>*)pCurrentEPT_PDP_Entry,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a>));$/;"	a
l00062	html/monitor__util_8c_source.html	/^<a name="l00062"><\/a>00062     <span class="keywordflow">if<\/span>(!currentEPT_PDP_Entry)$/;"	a
l00063	html/monitor__util_8c_source.html	/^<a name="l00063"><\/a>00063     {$/;"	a
l00064	html/monitor__util_8c_source.html	/^<a name="l00064"><\/a>00064         <span class="keywordflow">return<\/span> 0;$/;"	a
l00065	html/monitor__util_8c_source.html	/^<a name="l00065"><\/a>00065     }   $/;"	a
l00066	html/monitor__util_8c_source.html	/^<a name="l00066"><\/a>00066 $/;"	a
l00067	html/monitor__util_8c_source.html	/^<a name="l00067"><\/a>00067     eptBase_PD_HPA = currentEPT_PDP_Entry &amp; <a class="code" href="guest___i_a32e_page_8h.html#aca4d6718af5283d4aa065fac24e64e54" title="A mask that is used to extract base HPA of EPT PDP from EPT PDP table entry.">EPT_PDP_ENTRY_MASK<\/a>;$/;"	a
l00068	html/monitor__util_8c_source.html	/^<a name="l00068"><\/a>00068     currentEPT_PD_Entry_HPA = eptBase_PD_HPA | ((gpa &amp; <a class="code" href="monitor__ept_8h.html#abf806e0ba2ec2f5405e3ef9701d8a737" title="A mask used to extract HPA of EPT entry from GPA.">EPT_PD_GPA_MASK<\/a>) &gt;&gt; <a class="code" href="monitor__ept_8h.html#aa06a29042c653e73fca00adc8fd7d663" title="A right-shift value for EPT-PD entry address calculation.">EPT_PD_GPA_SHIFT<\/a>);$/;"	a
l00069	html/monitor__util_8c_source.html	/^<a name="l00069"><\/a>00069     pCurrentEPT_PD_Entry = (<a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a>*)<a class="code" href="monitor__util_8h.html#ac66e271532851a5737a7968ddc1390e4" title="This function maps host physical address into hypervisor&#39;s virtual memory.">mapHPAintoHVA<\/a>(currentEPT_PD_Entry_HPA,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a>));$/;"	a
l00070	html/monitor__util_8c_source.html	/^<a name="l00070"><\/a>00070     <span class="keywordflow">if<\/span>(!pCurrentEPT_PD_Entry)$/;"	a
l00071	html/monitor__util_8c_source.html	/^<a name="l00071"><\/a>00071     {$/;"	a
l00072	html/monitor__util_8c_source.html	/^<a name="l00072"><\/a>00072         <span class="keywordflow">return<\/span> 0;$/;"	a
l00073	html/monitor__util_8c_source.html	/^<a name="l00073"><\/a>00073     }   $/;"	a
l00074	html/monitor__util_8c_source.html	/^<a name="l00074"><\/a>00074     currentEPT_PD_Entry = *pCurrentEPT_PD_Entry;$/;"	a
l00075	html/monitor__util_8c_source.html	/^<a name="l00075"><\/a>00075     <a class="code" href="monitor__util_8h.html#ae5b8234f7d553177a9d3f932fe1c112b" title="This function maps host physical address into hypervisor&#39;s virtual memory.">unmapHPAintoHVA<\/a>((<span class="keywordtype">void<\/span>*)pCurrentEPT_PD_Entry,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a>));$/;"	a
l00076	html/monitor__util_8c_source.html	/^<a name="l00076"><\/a>00076     <span class="keywordflow">if<\/span>(!currentEPT_PD_Entry)$/;"	a
l00077	html/monitor__util_8c_source.html	/^<a name="l00077"><\/a>00077     {$/;"	a
l00078	html/monitor__util_8c_source.html	/^<a name="l00078"><\/a>00078         <span class="keywordflow">return<\/span> 0;$/;"	a
l00079	html/monitor__util_8c_source.html	/^<a name="l00079"><\/a>00079     }$/;"	a
l00080	html/monitor__util_8c_source.html	/^<a name="l00080"><\/a>00080 $/;"	a
l00081	html/monitor__util_8c_source.html	/^<a name="l00081"><\/a>00081     eptBase_PT_HPA = currentEPT_PD_Entry &amp; <a class="code" href="guest___i_a32e_page_8h.html#a23ff1894aab21877ab61e8d453aacaec" title="A mask that is used to extract base HPA of EPT PT from EPT PD table entry.">EPT_PD_ENTRY_MASK<\/a>;$/;"	a
l00082	html/monitor__util_8c_source.html	/^<a name="l00082"><\/a>00082     currentEPT_PT_Entry_HPA = eptBase_PT_HPA | ((gpa &amp; <a class="code" href="monitor__ept_8h.html#a6f24b0fd49793bb5746899f709fbf171" title="A mask used to extract HPA of EPT entry from GPA.">EPT_PT_GPA_MASK<\/a>) &gt;&gt; <a class="code" href="monitor__ept_8h.html#a95ef0343cf64ff4f5c3a519d24d131dc" title="A right-shift value for EPT-PT entry address calculation.">EPT_PT_GPA_SHIFT<\/a>);$/;"	a
l00083	html/monitor__util_8c_source.html	/^<a name="l00083"><\/a>00083     pCurrentEPT_PT_Entry = (<a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a>*)<a class="code" href="monitor__util_8h.html#ac66e271532851a5737a7968ddc1390e4" title="This function maps host physical address into hypervisor&#39;s virtual memory.">mapHPAintoHVA<\/a>(currentEPT_PT_Entry_HPA,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a>));$/;"	a
l00084	html/monitor__util_8c_source.html	/^<a name="l00084"><\/a>00084     <span class="keywordflow">if<\/span>(!pCurrentEPT_PT_Entry)$/;"	a
l00085	html/monitor__util_8c_source.html	/^<a name="l00085"><\/a>00085     {$/;"	a
l00086	html/monitor__util_8c_source.html	/^<a name="l00086"><\/a>00086         <span class="keywordflow">return<\/span> 0;$/;"	a
l00087	html/monitor__util_8c_source.html	/^<a name="l00087"><\/a>00087     }$/;"	a
l00088	html/monitor__util_8c_source.html	/^<a name="l00088"><\/a>00088     currentEPT_PT_Entry = *pCurrentEPT_PT_Entry;$/;"	a
l00089	html/monitor__util_8c_source.html	/^<a name="l00089"><\/a>00089     <span class="keywordflow">if<\/span>(eptEntryHPA)$/;"	a
l00090	html/monitor__util_8c_source.html	/^<a name="l00090"><\/a>00090     {$/;"	a
l00091	html/monitor__util_8c_source.html	/^<a name="l00091"><\/a>00091         *eptEntryHPA = currentEPT_PT_Entry_HPA; $/;"	a
l00092	html/monitor__util_8c_source.html	/^<a name="l00092"><\/a>00092     }$/;"	a
l00093	html/monitor__util_8c_source.html	/^<a name="l00093"><\/a>00093     <a class="code" href="monitor__util_8h.html#ae5b8234f7d553177a9d3f932fe1c112b" title="This function maps host physical address into hypervisor&#39;s virtual memory.">unmapHPAintoHVA<\/a>((<span class="keywordtype">void<\/span>*)pCurrentEPT_PT_Entry,<span class="keyword">sizeof<\/span>(<a class="code" href="monitor__types_8h.html#ae2a9c06a03ebe51122eda7315fbeb5b0" title="A type definition for EPT entry.">EPT_ENTRY_t<\/a>));$/;"	a
l00094	html/monitor__util_8c_source.html	/^<a name="l00094"><\/a>00094     <span class="keywordflow">if<\/span>(!currentEPT_PT_Entry)$/;"	a
l00095	html/monitor__util_8c_source.html	/^<a name="l00095"><\/a>00095     {$/;"	a
l00096	html/monitor__util_8c_source.html	/^<a name="l00096"><\/a>00096         <span class="keywordflow">return<\/span> 0;$/;"	a
l00097	html/monitor__util_8c_source.html	/^<a name="l00097"><\/a>00097     }$/;"	a
l00098	html/monitor__util_8c_source.html	/^<a name="l00098"><\/a>00098 $/;"	a
l00099	html/monitor__util_8c_source.html	/^<a name="l00099"><\/a>00099     pageFrameHPA = ((currentEPT_PT_Entry &amp; <a class="code" href="guest___i_a32e_page_8h.html#a369c8c91c392e3da4f0368c4640563df" title="A mask that is used to extract base HPA of page from EPT page table entry.">EPT_PT_ENTRY_MASK<\/a>) | (gpa &amp; <a class="code" href="monitor__ept_8h.html#a666c4ed20e984021f4fd95a52bd2144f" title="A mask used to extract HPA of EPT entry from GPA.">EPT_GPA_MASK<\/a>));$/;"	a
l00100	html/monitor__util_8c_source.html	/^<a name="l00100"><\/a>00100 $/;"	a
l00101	html/monitor__util_8c_source.html	/^<a name="l00101"><\/a>00101     <span class="keywordflow">return<\/span> pageFrameHPA;$/;"	a
l00102	html/monitor__util_8c_source.html	/^<a name="l00102"><\/a>00102 $/;"	a
l00103	html/monitor__util_8c_source.html	/^<a name="l00103"><\/a>00103 }$/;"	a
l00104	html/monitor__util_8c_source.html	/^<a name="l00104"><\/a>00104 $/;"	a
l00105	html/monitor__util_8c_source.html	/^<a name="l00105"><\/a><a class="code" href="monitor__util_8c.html#a5c5054946f567612d0ad5878def288f3">00105<\/a> <span class="keywordtype">void<\/span> *<a class="code" href="monitor__util_8h.html#ac66e271532851a5737a7968ddc1390e4" title="This function maps host physical address into hypervisor&#39;s virtual memory.">mapHPAintoHVA<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> hpa, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> size)$/;"	a
l00106	html/monitor__util_8c_source.html	/^<a name="l00106"><\/a>00106 {$/;"	a
l00107	html/monitor__util_8c_source.html	/^<a name="l00107"><\/a>00107 <span class="preprocessor">    #ifdef CONFIG_BITVISOR<\/span>$/;"	a
l00108	html/monitor__util_8c_source.html	/^<a name="l00108"><\/a>00108 <span class="preprocessor"><\/span>    <span class="keywordtype">void<\/span> *hva = 0;$/;"	a
l00109	html/monitor__util_8c_source.html	/^<a name="l00109"><\/a>00109     <span class="keywordflow">while<\/span>(!hva)$/;"	a
l00110	html/monitor__util_8c_source.html	/^<a name="l00110"><\/a>00110     {$/;"	a
l00111	html/monitor__util_8c_source.html	/^<a name="l00111"><\/a>00111         hva = mapmem_hphys (hpa, size, 0);$/;"	a
l00112	html/monitor__util_8c_source.html	/^<a name="l00112"><\/a>00112     }$/;"	a
l00113	html/monitor__util_8c_source.html	/^<a name="l00113"><\/a>00113     <span class="keywordflow">return<\/span> hva;$/;"	a
l00114	html/monitor__util_8c_source.html	/^<a name="l00114"><\/a>00114 <span class="preprocessor">    #else<\/span>$/;"	a
l00115	html/monitor__util_8c_source.html	/^<a name="l00115"><\/a>00115 <span class="preprocessor"><\/span>        <span class="keywordflow">return<\/span> 0;$/;"	a
l00116	html/monitor__util_8c_source.html	/^<a name="l00116"><\/a>00116 <span class="preprocessor">    #endif<\/span>$/;"	a
l00117	html/monitor__util_8c_source.html	/^<a name="l00117"><\/a>00117 <span class="preprocessor"><\/span>}$/;"	a
l00118	html/monitor__util_8c_source.html	/^<a name="l00118"><\/a>00118 $/;"	a
l00119	html/monitor__util_8c_source.html	/^<a name="l00119"><\/a><a class="code" href="monitor__util_8c.html#ae5b8234f7d553177a9d3f932fe1c112b">00119<\/a> <span class="keywordtype">void<\/span> <a class="code" href="monitor__util_8h.html#ae5b8234f7d553177a9d3f932fe1c112b" title="This function maps host physical address into hypervisor&#39;s virtual memory.">unmapHPAintoHVA<\/a>(<span class="keywordtype">void<\/span>* hva, <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> size)$/;"	a
l00120	html/monitor__util_8c_source.html	/^<a name="l00120"><\/a>00120 {$/;"	a
l00121	html/monitor__util_8c_source.html	/^<a name="l00121"><\/a>00121 <span class="preprocessor">    #ifdef CONFIG_BITVISOR<\/span>$/;"	a
l00122	html/monitor__util_8c_source.html	/^<a name="l00122"><\/a>00122 <span class="preprocessor"><\/span>        unmapmem (hva, size);$/;"	a
l00123	html/monitor__util_8c_source.html	/^<a name="l00123"><\/a>00123 <span class="preprocessor">    #else<\/span>$/;"	a
l00124	html/monitor__util_8c_source.html	/^<a name="l00124"><\/a>00124 <span class="preprocessor"><\/span>        <span class="comment">\/\/Noop<\/span>$/;"	a
l00125	html/monitor__util_8c_source.html	/^<a name="l00125"><\/a>00125 <span class="preprocessor">    #endif<\/span>$/;"	a
l00126	html/monitor__util_8c_source.html	/^<a name="l00126"><\/a>00126 <span class="preprocessor"><\/span>}$/;"	a
l00001	html/monitor__util_8d_source.html	/^<div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 core\/security_module\/monitor_util.o: core\/security_module\/monitor_util.c \\$/;"	a
l00002	html/monitor__util_8d_source.html	/^<a name="l00002"><\/a>00002 $/;"	a
l00003	html/monitor__util_8d_source.html	/^<a name="l00003"><\/a>00003 core\/security_module\/monitor_util.c \\$/;"	a
l00004	html/monitor__util_8d_source.html	/^<a name="l00004"><\/a>00004 <\/pre><\/div><\/div><!-- contents -->$/;"	a
details	html/monitor__util_8h.html	/^<hr\/><a name="details" id="details"><\/a><h2>상세한 설명<\/h2>$/;"	a
func-members	html/monitor__util_8h.html	/^<tr><td colspan="2"><h2><a name="func-members"><\/a>$/;"	a
l00001	html/monitor__util_8h_source.html	/^<a href="monitor__util_8h.html">이 파일의 문서화 페이지로 가기<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 $/;"	a
l00035	html/monitor__util_8h_source.html	/^<a name="l00035"><\/a>00035 <span class="preprocessor">#ifndef __MONITOR__UTIL_H__<\/span>$/;"	a
l00036	html/monitor__util_8h_source.html	/^<a name="l00036"><\/a>00036 <span class="preprocessor"><\/span><span class="preprocessor">#define __MONITOR__UTIL_H__<\/span>$/;"	a
l00037	html/monitor__util_8h_source.html	/^<a name="l00037"><\/a>00037 <span class="preprocessor"><\/span>$/;"	a
l00038	html/monitor__util_8h_source.html	/^<a name="l00038"><\/a>00038 $/;"	a
l00039	html/monitor__util_8h_source.html	/^<a name="l00039"><\/a>00039 <span class="preprocessor">#include &lt;<a class="code" href="monitor__types_8h.html" title="Definitions of types that are used in this project.">monitor_types.h<\/a>&gt;<\/span>$/;"	a
l00040	html/monitor__util_8h_source.html	/^<a name="l00040"><\/a>00040 $/;"	a
l00041	html/monitor__util_8h_source.html	/^<a name="l00041"><\/a>00041 <span class="keywordtype">void<\/span> *<a class="code" href="monitor__util_8h.html#ac66e271532851a5737a7968ddc1390e4" title="This function maps host physical address into hypervisor&#39;s virtual memory.">mapHPAintoHVA<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> hpa, $/;"	a
l00042	html/monitor__util_8h_source.html	/^<a name="l00042"><\/a>00042                     <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> size $/;"	a
l00043	html/monitor__util_8h_source.html	/^<a name="l00043"><\/a>00043                     );$/;"	a
l00044	html/monitor__util_8h_source.html	/^<a name="l00044"><\/a>00044 $/;"	a
l00045	html/monitor__util_8h_source.html	/^<a name="l00045"><\/a>00045 <span class="keywordtype">void<\/span> <a class="code" href="monitor__util_8h.html#ae5b8234f7d553177a9d3f932fe1c112b" title="This function maps host physical address into hypervisor&#39;s virtual memory.">unmapHPAintoHVA<\/a>(<span class="keywordtype">void<\/span>* hva, $/;"	a
l00046	html/monitor__util_8h_source.html	/^<a name="l00046"><\/a>00046                     <span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> size  $/;"	a
l00047	html/monitor__util_8h_source.html	/^<a name="l00047"><\/a>00047                     );$/;"	a
l00048	html/monitor__util_8h_source.html	/^<a name="l00048"><\/a>00048 $/;"	a
l00049	html/monitor__util_8h_source.html	/^<a name="l00049"><\/a>00049 <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> <a class="code" href="monitor__util_8h.html#a19ca3fbdba02a8a291fbf56b030e7323" title="This function converts guest physical address to host physical address.">gpaToHPA<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> gpa, $/;"	a
l00050	html/monitor__util_8h_source.html	/^<a name="l00050"><\/a>00050                 <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> *eptEntryHPA $/;"	a
l00051	html/monitor__util_8h_source.html	/^<a name="l00051"><\/a>00051                 );$/;"	a
l00052	html/monitor__util_8h_source.html	/^<a name="l00052"><\/a>00052 $/;"	a
l00053	html/monitor__util_8h_source.html	/^<a name="l00053"><\/a>00053 <span class="preprocessor">#endif<\/span>$/;"	a
l00001	html/protected_application_8h_source.html	/^<div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 <span class="preprocessor">#ifndef __PROTECTED_APPLICATION_H__<\/span>$/;"	a
l00002	html/protected_application_8h_source.html	/^<a name="l00002"><\/a>00002 <span class="preprocessor"><\/span><span class="preprocessor">#define __PROTECTED_APPLICATION_H__<\/span>$/;"	a
l00003	html/protected_application_8h_source.html	/^<a name="l00003"><\/a>00003 <span class="preprocessor"><\/span>$/;"	a
l00004	html/protected_application_8h_source.html	/^<a name="l00004"><\/a>00004 <span class="preprocessor">#include &lt;memoryownershiptable.h&gt;<\/span>$/;"	a
l00005	html/protected_application_8h_source.html	/^<a name="l00005"><\/a>00005 <span class="preprocessor">#include &lt;sec_types.h&gt;<\/span>$/;"	a
l00006	html/protected_application_8h_source.html	/^<a name="l00006"><\/a>00006 $/;"	a
l00007	html/protected_application_8h_source.html	/^<a name="l00007"><\/a>00007 $/;"	a
l00008	html/protected_application_8h_source.html	/^<a name="l00008"><\/a>00008 $/;"	a
l00009	html/protected_application_8h_source.html	/^<a name="l00009"><\/a>00009 <span class="preprocessor">#endif<\/span>$/;"	a
searchData	html/search/all_61.js	/^var searchData=$/;"	v
searchData	html/search/all_63.js	/^var searchData=$/;"	v
searchData	html/search/all_65.js	/^var searchData=$/;"	v
searchData	html/search/all_66.js	/^var searchData=$/;"	v
searchData	html/search/all_67.js	/^var searchData=$/;"	v
searchData	html/search/all_68.js	/^var searchData=$/;"	v
searchData	html/search/all_6b.js	/^var searchData=$/;"	v
searchData	html/search/all_6d.js	/^var searchData=$/;"	v
searchData	html/search/all_6e.js	/^var searchData=$/;"	v
searchData	html/search/all_6f.js	/^var searchData=$/;"	v
searchData	html/search/all_70.js	/^var searchData=$/;"	v
searchData	html/search/all_73.js	/^var searchData=$/;"	v
searchData	html/search/all_74.js	/^var searchData=$/;"	v
searchData	html/search/all_75.js	/^var searchData=$/;"	v
searchData	html/search/all_76.js	/^var searchData=$/;"	v
searchData	html/search/classes_6d.js	/^var searchData=$/;"	v
searchData	html/search/classes_6f.js	/^var searchData=$/;"	v
searchData	html/search/defines_63.js	/^var searchData=$/;"	v
searchData	html/search/defines_65.js	/^var searchData=$/;"	v
searchData	html/search/defines_66.js	/^var searchData=$/;"	v
searchData	html/search/defines_67.js	/^var searchData=$/;"	v
searchData	html/search/defines_68.js	/^var searchData=$/;"	v
searchData	html/search/defines_6d.js	/^var searchData=$/;"	v
searchData	html/search/defines_6e.js	/^var searchData=$/;"	v
searchData	html/search/defines_70.js	/^var searchData=$/;"	v
searchData	html/search/enums_6f.js	/^var searchData=$/;"	v
searchData	html/search/enums_70.js	/^var searchData=$/;"	v
searchData	html/search/enumvalues_63.js	/^var searchData=$/;"	v
searchData	html/search/enumvalues_65.js	/^var searchData=$/;"	v
searchData	html/search/enumvalues_6b.js	/^var searchData=$/;"	v
searchData	html/search/enumvalues_6f.js	/^var searchData=$/;"	v
searchData	html/search/enumvalues_70.js	/^var searchData=$/;"	v
searchData	html/search/enumvalues_75.js	/^var searchData=$/;"	v
searchData	html/search/enumvalues_76.js	/^var searchData=$/;"	v
searchData	html/search/files_65.js	/^var searchData=$/;"	v
searchData	html/search/files_67.js	/^var searchData=$/;"	v
searchData	html/search/files_6d.js	/^var searchData=$/;"	v
searchData	html/search/files_75.js	/^var searchData=$/;"	v
searchData	html/search/files_76.js	/^var searchData=$/;"	v
searchData	html/search/functions_61.js	/^var searchData=$/;"	v
searchData	html/search/functions_63.js	/^var searchData=$/;"	v
searchData	html/search/functions_67.js	/^var searchData=$/;"	v
searchData	html/search/functions_68.js	/^var searchData=$/;"	v
searchData	html/search/functions_6d.js	/^var searchData=$/;"	v
searchData	html/search/functions_70.js	/^var searchData=$/;"	v
searchData	html/search/functions_74.js	/^var searchData=$/;"	v
searchData	html/search/functions_75.js	/^var searchData=$/;"	v
SearchBox	html/search/search.js	/^function SearchBox(name, resultsPath, inFrame, label)$/;"	c
SearchBox.Activate	html/search/search.js	/^  this.Activate = function(isActive)$/;"	m
SearchBox.CloseResultsWindow	html/search/search.js	/^  this.CloseResultsWindow = function()$/;"	m
SearchBox.CloseSelectionWindow	html/search/search.js	/^  this.CloseSelectionWindow = function()$/;"	m
SearchBox.DOMPopupSearchResults	html/search/search.js	/^  this.DOMPopupSearchResults = function()$/;"	m
SearchBox.DOMPopupSearchResultsWindow	html/search/search.js	/^  this.DOMPopupSearchResultsWindow = function()$/;"	m
SearchBox.DOMSearchBox	html/search/search.js	/^  this.DOMSearchBox = function()$/;"	m
SearchBox.DOMSearchClose	html/search/search.js	/^  this.DOMSearchClose = function()$/;"	m
SearchBox.DOMSearchField	html/search/search.js	/^  this.DOMSearchField = function()$/;"	m
SearchBox.DOMSearchSelect	html/search/search.js	/^  this.DOMSearchSelect = function()$/;"	m
SearchBox.DOMSearchSelectWindow	html/search/search.js	/^  this.DOMSearchSelectWindow = function()$/;"	m
SearchBox.OnSearchFieldChange	html/search/search.js	/^  this.OnSearchFieldChange = function(evt)$/;"	m
SearchBox.OnSearchFieldFocus	html/search/search.js	/^  this.OnSearchFieldFocus = function(isActive)$/;"	m
SearchBox.OnSearchSelectHide	html/search/search.js	/^  this.OnSearchSelectHide = function()$/;"	m
SearchBox.OnSearchSelectKey	html/search/search.js	/^  this.OnSearchSelectKey = function(evt)$/;"	m
SearchBox.OnSearchSelectShow	html/search/search.js	/^  this.OnSearchSelectShow = function()$/;"	m
SearchBox.OnSelectItem	html/search/search.js	/^  this.OnSelectItem = function(id)$/;"	m
SearchBox.Search	html/search/search.js	/^  this.Search = function()$/;"	m
SearchBox.SelectItemCount	html/search/search.js	/^  this.SelectItemCount = function(id)$/;"	m
SearchBox.SelectItemSet	html/search/search.js	/^  this.SelectItemSet = function(id)$/;"	m
SearchResults	html/search/search.js	/^function SearchResults(name)$/;"	c
SearchResults.FindChildElement	html/search/search.js	/^    this.FindChildElement = function(id)$/;"	m
SearchResults.Nav	html/search/search.js	/^    this.Nav = function(evt,itemIndex) $/;"	m
SearchResults.NavChild	html/search/search.js	/^    this.NavChild = function(evt,itemIndex,childIndex)$/;"	m
SearchResults.NavNext	html/search/search.js	/^    this.NavNext = function(index)$/;"	m
SearchResults.NavPrev	html/search/search.js	/^    this.NavPrev = function(index)$/;"	m
SearchResults.ProcessKeys	html/search/search.js	/^    this.ProcessKeys = function(e)$/;"	m
SearchResults.Search	html/search/search.js	/^    this.Search = function(search)$/;"	m
SearchResults.Toggle	html/search/search.js	/^    this.Toggle = function(id)$/;"	m
convertToId	html/search/search.js	/^function convertToId(search)$/;"	f
createResults	html/search/search.js	/^function createResults()$/;"	f
getXPos	html/search/search.js	/^function getXPos(item)$/;"	f
getYPos	html/search/search.js	/^function getYPos(item)$/;"	f
indexSectionNames.0	html/search/search.js	/^{$/;"	p
indexSectionNames.1	html/search/search.js	/^  0: "all",$/;"	p
indexSectionNames.2	html/search/search.js	/^  1: "classes",$/;"	p
indexSectionNames.3	html/search/search.js	/^  2: "files",$/;"	p
indexSectionNames.4	html/search/search.js	/^  3: "functions",$/;"	p
indexSectionNames.5	html/search/search.js	/^  4: "variables",$/;"	p
indexSectionNames.6	html/search/search.js	/^  5: "typedefs",$/;"	p
indexSectionNames.7	html/search/search.js	/^  6: "enums",$/;"	p
indexSectionNames.8	html/search/search.js	/^  7: "enumvalues",$/;"	p
indexSectionsWithContent.0	html/search/search.js	/^{$/;"	p
indexSectionsWithContent.1	html/search/search.js	/^  0: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101011110010111100111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",$/;"	p
indexSectionsWithContent.2	html/search/search.js	/^  1: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",$/;"	p
indexSectionsWithContent.3	html/search/search.js	/^  2: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010100000100000001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",$/;"	p
indexSectionsWithContent.4	html/search/search.js	/^  3: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000110000100100011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",$/;"	p
indexSectionsWithContent.5	html/search/search.js	/^  4: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",$/;"	p
indexSectionsWithContent.6	html/search/search.js	/^  5: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100010110000000100001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",$/;"	p
indexSectionsWithContent.7	html/search/search.js	/^  6: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",$/;"	p
indexSectionsWithContent.8	html/search/search.js	/^  7: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000010001100001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",$/;"	p
setClassAttr	html/search/search.js	/^function setClassAttr(elem,attr)$/;"	f
setKeyActions	html/search/search.js	/^function setKeyActions(elem,action)$/;"	f
searchData	html/search/typedefs_61.js	/^var searchData=$/;"	v
searchData	html/search/typedefs_65.js	/^var searchData=$/;"	v
searchData	html/search/typedefs_67.js	/^var searchData=$/;"	v
searchData	html/search/typedefs_68.js	/^var searchData=$/;"	v
searchData	html/search/typedefs_70.js	/^var searchData=$/;"	v
searchData	html/search/typedefs_75.js	/^var searchData=$/;"	v
searchData	html/search/typedefs_76.js	/^var searchData=$/;"	v
searchData	html/search/variables_6f.js	/^var searchData=$/;"	v
searchData	html/search/variables_73.js	/^var searchData=$/;"	v
l00001	html/sec__types_8h_source.html	/^<div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 <span class="preprocessor">#ifndef __SEC_TYPES_H__<\/span>$/;"	a
l00002	html/sec__types_8h_source.html	/^<a name="l00002"><\/a>00002 <span class="preprocessor"><\/span><span class="preprocessor">#define __SEC_TYPES_H__<\/span>$/;"	a
l00003	html/sec__types_8h_source.html	/^<a name="l00003"><\/a>00003 <span class="preprocessor"><\/span>$/;"	a
l00004	html/sec__types_8h_source.html	/^<a name="l00004"><\/a>00004 <span class="keyword">typedef<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">char<\/span>       <a class="code" href="monitor__types_8h.html#a5e335338bb0cb66eca6ae05e61c526ef" title="A type definition for a unsigned 8-bits data.">U8_t<\/a>;$/;"	a
l00005	html/sec__types_8h_source.html	/^<a name="l00005"><\/a>00005 <span class="keyword">typedef<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span>       <a class="code" href="monitor__types_8h.html#a7d95b1a68a8959f02a82e7b360cd2d2a" title="A type definition for a unsigned 32-bits data.">U32_t<\/a>;$/;"	a
l00006	html/sec__types_8h_source.html	/^<a name="l00006"><\/a>00006 <span class="keyword">typedef<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span>  <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>;$/;"	a
l00007	html/sec__types_8h_source.html	/^<a name="l00007"><\/a>00007 $/;"	a
l00008	html/sec__types_8h_source.html	/^<a name="l00008"><\/a>00008 <span class="keyword">typedef<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>               VIRTADDR_t;$/;"	a
l00009	html/sec__types_8h_source.html	/^<a name="l00009"><\/a>00009 <span class="keyword">typedef<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>               PHYADDR_t;$/;"	a
l00010	html/sec__types_8h_source.html	/^<a name="l00010"><\/a>00010 $/;"	a
l00011	html/sec__types_8h_source.html	/^<a name="l00011"><\/a>00011 <span class="keyword">typedef<\/span> PHYADDR_t           GUEST_PHYADDR_t;$/;"	a
l00012	html/sec__types_8h_source.html	/^<a name="l00012"><\/a>00012 $/;"	a
l00013	html/sec__types_8h_source.html	/^<a name="l00013"><\/a>00013 <span class="keyword">typedef<\/span> <a class="code" href="monitor__types_8h.html#a5e335338bb0cb66eca6ae05e61c526ef" title="A type definition for a unsigned 8-bits data.">U8_t<\/a>                <a class="code" href="monitor__types_8h.html#ab2e39b8d4a768ded7be5450cc2bffe9d" title="A type definition for ID of a application in a virtual machine. &gt; In this implmentation, this type is equal to GPA_t.">APPID_t<\/a>;$/;"	a
l00014	html/sec__types_8h_source.html	/^<a name="l00014"><\/a>00014 <span class="keyword">typedef<\/span> <a class="code" href="monitor__types_8h.html#a5e335338bb0cb66eca6ae05e61c526ef" title="A type definition for a unsigned 8-bits data.">U8_t<\/a>                <a class="code" href="monitor__types_8h.html#aa4f8aee9bf87a1628e71d07f40352e02" title="A type definition for ID of a virtual machine. &gt; In this implementation, this type is equal to EPTP_t...">VMID_t<\/a>;$/;"	a
l00015	html/sec__types_8h_source.html	/^<a name="l00015"><\/a>00015 $/;"	a
l00016	html/sec__types_8h_source.html	/^<a name="l00016"><\/a>00016 <span class="keyword">typedef<\/span> <a class="code" href="monitor__types_8h.html#a5e335338bb0cb66eca6ae05e61c526ef" title="A type definition for a unsigned 8-bits data.">U8_t<\/a>                BOOL_t;$/;"	a
l00017	html/sec__types_8h_source.html	/^<a name="l00017"><\/a>00017 $/;"	a
l00018	html/sec__types_8h_source.html	/^<a name="l00018"><\/a>00018 <span class="preprocessor">#define FALSE   0<\/span>$/;"	a
l00019	html/sec__types_8h_source.html	/^<a name="l00019"><\/a>00019 <span class="preprocessor"><\/span><span class="preprocessor">#define TRUE    1<\/span>$/;"	a
l00020	html/sec__types_8h_source.html	/^<a name="l00020"><\/a>00020 <span class="preprocessor"><\/span><span class="preprocessor">#endif<\/span>$/;"	a
details	html/struct_o_w_n_e_r_s_h_i_p_t_a_b_l_e__t.html	/^<hr\/><a name="details" id="details"><\/a><h2>상세한 설명<\/h2>$/;"	a
pub-attribs	html/struct_o_w_n_e_r_s_h_i_p_t_a_b_l_e__t.html	/^<tr><td colspan="2"><h2><a name="pub-attribs"><\/a>$/;"	a
details	html/structmemory__ownership__table__entry__t.html	/^<hr\/><a name="details" id="details"><\/a><h2>상세한 설명<\/h2>$/;"	a
pub-attribs	html/structmemory__ownership__table__entry__t.html	/^<tr><td colspan="2"><h2><a name="pub-attribs"><\/a>$/;"	a
details	html/unit__test_8c.html	/^<hr\/><a name="details" id="details"><\/a><h2>상세한 설명<\/h2>$/;"	a
func-members	html/unit__test_8c.html	/^<tr><td colspan="2"><h2><a name="func-members"><\/a>$/;"	a
l00001	html/unit__test_8c_source.html	/^<a href="unit__test_8c.html">이 파일의 문서화 페이지로 가기<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 $/;"	a
l00005	html/unit__test_8c_source.html	/^<a name="l00005"><\/a>00005 <span class="preprocessor">#include &lt;<a class="code" href="monitor__util_8h.html" title="This file exists for supporting some uiility functions.">monitor_util.h<\/a>&gt;<\/span>$/;"	a
l00006	html/unit__test_8c_source.html	/^<a name="l00006"><\/a>00006 <span class="preprocessor">#include &lt;<a class="code" href="guest__state_8h.html" title="High-level facilities to get guest VM&#39;s information.">guest_state.h<\/a>&gt;<\/span>$/;"	a
l00007	html/unit__test_8c_source.html	/^<a name="l00007"><\/a>00007 <span class="preprocessor">#include &lt;<a class="code" href="monitor__types_8h.html" title="Definitions of types that are used in this project.">monitor_types.h<\/a>&gt;<\/span>$/;"	a
l00008	html/unit__test_8c_source.html	/^<a name="l00008"><\/a>00008 <span class="preprocessor">#include &lt;<a class="code" href="unit__test_8h.html" title="This file declares functions for unit test of functions in the security module.">unit_test.h<\/a>&gt;<\/span>$/;"	a
l00009	html/unit__test_8c_source.html	/^<a name="l00009"><\/a>00009 <span class="preprocessor">#include &lt;<a class="code" href="guest___i_a32e_page_8h.html" title="functions and constants to support IA32e paging mode of guest VM">guest_IA32ePage.h<\/a>&gt;<\/span>$/;"	a
l00010	html/unit__test_8c_source.html	/^<a name="l00010"><\/a>00010 <span class="preprocessor">#ifdef CONFIG_BITVISOR<\/span>$/;"	a
l00011	html/unit__test_8c_source.html	/^<a name="l00011"><\/a>00011 <span class="preprocessor"><\/span><span class="preprocessor">    #include &lt;printf.h&gt;<\/span>$/;"	a
l00012	html/unit__test_8c_source.html	/^<a name="l00012"><\/a>00012 <span class="preprocessor">#endif<\/span>$/;"	a
l00013	html/unit__test_8c_source.html	/^<a name="l00013"><\/a>00013 <span class="preprocessor"><\/span>$/;"	a
l00014	html/unit__test_8c_source.html	/^<a name="l00014"><\/a><a class="code" href="unit__test_8c.html#a4b454bbf54829d209850a8efa639b942">00014<\/a> <span class="keywordtype">void<\/span> <a class="code" href="unit__test_8h.html#a4b454bbf54829d209850a8efa639b942" title="A function to start unit test.">test_start<\/a>()$/;"	a
l00015	html/unit__test_8c_source.html	/^<a name="l00015"><\/a>00015 {$/;"	a
l00016	html/unit__test_8c_source.html	/^<a name="l00016"><\/a>00016     <span class="keywordtype">int<\/span> result;$/;"	a
l00017	html/unit__test_8c_source.html	/^<a name="l00017"><\/a>00017     <span class="keywordflow">if<\/span>(<a class="code" href="guest__state_8c.html#a4fe3391f0854e7d1c8b553adb4284436" title="Get the start address of page table.">get_page_table_base_GPA<\/a>())$/;"	a
l00018	html/unit__test_8c_source.html	/^<a name="l00018"><\/a>00018     {$/;"	a
l00019	html/unit__test_8c_source.html	/^<a name="l00019"><\/a>00019         printf(<span class="stringliteral">&quot;Unit test start\\n&quot;<\/span>);$/;"	a
l00020	html/unit__test_8c_source.html	/^<a name="l00020"><\/a>00020 $/;"	a
l00021	html/unit__test_8c_source.html	/^<a name="l00021"><\/a>00021         printf(<span class="stringliteral">&quot;Test &#39;gpaToHPA()&#39;\\n&quot;<\/span>);$/;"	a
l00022	html/unit__test_8c_source.html	/^<a name="l00022"><\/a>00022         result = <a class="code" href="unit__test_8h.html#a9a5ea09666782de7674e77cb9211aa9f" title="A testing function for [gpaToHPA](gpaToHPA)">test_gpaToHPA<\/a>();$/;"	a
l00023	html/unit__test_8c_source.html	/^<a name="l00023"><\/a>00023         printf(<span class="stringliteral">&quot;Test &#39;gpaToHPA()&#39; end; result : %s\\n&quot;<\/span>,result?<span class="stringliteral">&quot;success&quot;<\/span>:<span class="stringliteral">&quot;fail&quot;<\/span>);     $/;"	a
l00024	html/unit__test_8c_source.html	/^<a name="l00024"><\/a>00024 $/;"	a
l00025	html/unit__test_8c_source.html	/^<a name="l00025"><\/a>00025 <span class="comment">\/*      printf(&quot;Test &#39;test_logicalCPUStatus()&#39;\\n&quot;);<\/span>$/;"	a
l00026	html/unit__test_8c_source.html	/^<a name="l00026"><\/a>00026 <span class="comment">        result = test_logicalCPUStatus();<\/span>$/;"	a
l00027	html/unit__test_8c_source.html	/^<a name="l00027"><\/a>00027 <span class="comment">        printf(&quot;Test &#39;test_logicalCPUStatus()&#39; end; result : %s\\n&quot;,result?&quot;success&quot;:&quot;fail&quot;);                *\/<\/span>$/;"	a
l00028	html/unit__test_8c_source.html	/^<a name="l00028"><\/a>00028 $/;"	a
l00029	html/unit__test_8c_source.html	/^<a name="l00029"><\/a>00029         printf(<span class="stringliteral">&quot;Test &#39;test_traverseGuestPages()&#39;\\n&quot;<\/span>);$/;"	a
l00030	html/unit__test_8c_source.html	/^<a name="l00030"><\/a>00030         result = <a class="code" href="unit__test_8h.html#a086ccec56f0e0c8b7a62d3166a3f3aa4" title="A testing function for [traverseGuestPages](traverseGuestPages)">test_traverseGuestPages<\/a>();$/;"	a
l00031	html/unit__test_8c_source.html	/^<a name="l00031"><\/a>00031 $/;"	a
l00032	html/unit__test_8c_source.html	/^<a name="l00032"><\/a>00032         printf(<span class="stringliteral">&quot;Test &#39;test_traverseGuestPages()&#39; end; result : %s\\n&quot;<\/span>,result?<span class="stringliteral">&quot;success&quot;<\/span>:<span class="stringliteral">&quot;fail&quot;<\/span>);$/;"	a
l00033	html/unit__test_8c_source.html	/^<a name="l00033"><\/a>00033     }$/;"	a
l00034	html/unit__test_8c_source.html	/^<a name="l00034"><\/a>00034 $/;"	a
l00035	html/unit__test_8c_source.html	/^<a name="l00035"><\/a>00035 }$/;"	a
l00036	html/unit__test_8c_source.html	/^<a name="l00036"><\/a>00036 $/;"	a
l00037	html/unit__test_8c_source.html	/^<a name="l00037"><\/a><a class="code" href="unit__test_8c.html#a9a5ea09666782de7674e77cb9211aa9f">00037<\/a> <span class="keywordtype">int<\/span> <a class="code" href="unit__test_8h.html#a9a5ea09666782de7674e77cb9211aa9f" title="A testing function for [gpaToHPA](gpaToHPA)">test_gpaToHPA<\/a>()$/;"	a
l00038	html/unit__test_8c_source.html	/^<a name="l00038"><\/a>00038 {$/;"	a
l00039	html/unit__test_8c_source.html	/^<a name="l00039"><\/a>00039     <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> input;$/;"	a
l00040	html/unit__test_8c_source.html	/^<a name="l00040"><\/a>00040     <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> output;$/;"	a
l00041	html/unit__test_8c_source.html	/^<a name="l00041"><\/a>00041     <a class="code" href="monitor__types_8h.html#a35e867d4f252496befeb6d260a03acac" title="A type definition for a host physical address. &gt; Note : The size of this type is __architecture-depen...">HPA_t<\/a> expected;$/;"	a
l00042	html/unit__test_8c_source.html	/^<a name="l00042"><\/a>00042     input = (<a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a>)<a class="code" href="guest__state_8c.html#a4fe3391f0854e7d1c8b553adb4284436" title="Get the start address of page table.">get_page_table_base_GPA<\/a>();$/;"	a
l00043	html/unit__test_8c_source.html	/^<a name="l00043"><\/a>00043     input |= 0xCDE;$/;"	a
l00044	html/unit__test_8c_source.html	/^<a name="l00044"><\/a>00044     output = <a class="code" href="monitor__util_8h.html#a19ca3fbdba02a8a291fbf56b030e7323" title="This function converts guest physical address to host physical address.">gpaToHPA<\/a>(input, 0);$/;"	a
l00045	html/unit__test_8c_source.html	/^<a name="l00045"><\/a>00045 <span class="preprocessor">#ifdef CONFIG_BITVISOR<\/span>$/;"	a
l00046	html/unit__test_8c_source.html	/^<a name="l00046"><\/a>00046 <span class="preprocessor"><\/span>    expected = input;$/;"	a
l00047	html/unit__test_8c_source.html	/^<a name="l00047"><\/a>00047     <span class="keywordflow">return<\/span> expected == output;$/;"	a
l00048	html/unit__test_8c_source.html	/^<a name="l00048"><\/a>00048 <span class="preprocessor">#else<\/span>$/;"	a
l00049	html/unit__test_8c_source.html	/^<a name="l00049"><\/a>00049 <span class="preprocessor"><\/span>    expected = 0;$/;"	a
l00050	html/unit__test_8c_source.html	/^<a name="l00050"><\/a>00050     <span class="keywordflow">return<\/span> 0;$/;"	a
l00051	html/unit__test_8c_source.html	/^<a name="l00051"><\/a>00051 <span class="preprocessor">#endif<\/span>$/;"	a
l00052	html/unit__test_8c_source.html	/^<a name="l00052"><\/a>00052 <span class="preprocessor"><\/span>}$/;"	a
l00053	html/unit__test_8c_source.html	/^<a name="l00053"><\/a>00053 $/;"	a
l00054	html/unit__test_8c_source.html	/^<a name="l00054"><\/a><a class="code" href="unit__test_8c.html#a086ccec56f0e0c8b7a62d3166a3f3aa4">00054<\/a> <span class="keywordtype">int<\/span> <a class="code" href="unit__test_8h.html#a086ccec56f0e0c8b7a62d3166a3f3aa4" title="A testing function for [traverseGuestPages](traverseGuestPages)">test_traverseGuestPages<\/a>()$/;"	a
l00055	html/unit__test_8c_source.html	/^<a name="l00055"><\/a>00055 {$/;"	a
l00056	html/unit__test_8c_source.html	/^<a name="l00056"><\/a>00056     <a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> cr3GPA;$/;"	a
l00057	html/unit__test_8c_source.html	/^<a name="l00057"><\/a>00057     cr3GPA = <a class="code" href="guest__state_8c.html#a4fe3391f0854e7d1c8b553adb4284436" title="Get the start address of page table.">get_page_table_base_GPA<\/a>();$/;"	a
l00058	html/unit__test_8c_source.html	/^<a name="l00058"><\/a>00058     printf(<span class="stringliteral">&quot;Guest CR3 : %llx\\n&quot;<\/span>,cr3GPA);$/;"	a
l00059	html/unit__test_8c_source.html	/^<a name="l00059"><\/a>00059     printf(<span class="stringliteral">&quot;EPT_PML4_ENTRY_MASK : %llx\\n&quot;<\/span>,<a class="code" href="guest___i_a32e_page_8h.html#a71ab36e768a6cf0cff31a9e288abe306" title="A mask that is used to extract base HPA of EPT PDP from EPT PML4 entry.">EPT_PML4_ENTRY_MASK<\/a>);$/;"	a
l00060	html/unit__test_8c_source.html	/^<a name="l00060"><\/a>00060     <span class="comment">\/\/traverseGuestPages(cr3GPA, 0);    <\/span>$/;"	a
l00061	html/unit__test_8c_source.html	/^<a name="l00061"><\/a>00061 $/;"	a
l00062	html/unit__test_8c_source.html	/^<a name="l00062"><\/a>00062     <span class="keywordflow">return<\/span> 1;$/;"	a
l00063	html/unit__test_8c_source.html	/^<a name="l00063"><\/a>00063 }$/;"	a
l00064	html/unit__test_8c_source.html	/^<a name="l00064"><\/a>00064 $/;"	a
l00065	html/unit__test_8c_source.html	/^<a name="l00065"><\/a><a class="code" href="unit__test_8c.html#a3156e95cd80005f4c6f3f70e9914e135">00065<\/a> <span class="keywordtype">int<\/span> <a class="code" href="unit__test_8h.html#a3156e95cd80005f4c6f3f70e9914e135" title="A testing function to see the logical CPU configuration.">test_logicalCPUStatus<\/a>()$/;"	a
l00066	html/unit__test_8c_source.html	/^<a name="l00066"><\/a>00066 {$/;"	a
l00067	html/unit__test_8c_source.html	/^<a name="l00067"><\/a>00067     <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> value_IA32_EFER = 0xFD;$/;"	a
l00068	html/unit__test_8c_source.html	/^<a name="l00068"><\/a>00068     value_IA32_EFER = <a class="code" href="vmcs_8h.html#a38c7d96da94cf9b3fe630936e1c11c0b" title="get a value in the VMCS">monitor_vmcs_read<\/a>(<a class="code" href="vmcs_8h.html#a0df456d45752487755b05fb421a43c4b" title="GUEST IA32_EFER (full) encoding.">FIELD_ENCODING_IA32_EFER<\/a>);$/;"	a
l00069	html/unit__test_8c_source.html	/^<a name="l00069"><\/a>00069     printf(<span class="stringliteral">&quot;IA32_EFER value : %llx\\n&quot;<\/span>,value_IA32_EFER);$/;"	a
l00070	html/unit__test_8c_source.html	/^<a name="l00070"><\/a>00070     <span class="keywordflow">return<\/span> 1;$/;"	a
l00071	html/unit__test_8c_source.html	/^<a name="l00071"><\/a>00071 }$/;"	a
l00001	html/unit__test_8d_source.html	/^<div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 core\/security_module\/unit_test.o: core\/security_module\/unit_test.c \\$/;"	a
l00002	html/unit__test_8d_source.html	/^<a name="l00002"><\/a>00002 $/;"	a
l00003	html/unit__test_8d_source.html	/^<a name="l00003"><\/a>00003 core\/security_module\/unit_test.c \\$/;"	a
l00004	html/unit__test_8d_source.html	/^<a name="l00004"><\/a>00004 <\/pre><\/div><\/div><!-- contents -->$/;"	a
details	html/unit__test_8h.html	/^<hr\/><a name="details" id="details"><\/a><h2>상세한 설명<\/h2>$/;"	a
func-members	html/unit__test_8h.html	/^<tr><td colspan="2"><h2><a name="func-members"><\/a>$/;"	a
l00001	html/unit__test_8h_source.html	/^<a href="unit__test_8h.html">이 파일의 문서화 페이지로 가기<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 $/;"	a
l00045	html/unit__test_8h_source.html	/^<a name="l00045"><\/a>00045 <span class="preprocessor">#ifndef __UNIT_TEST_H__<\/span>$/;"	a
l00046	html/unit__test_8h_source.html	/^<a name="l00046"><\/a>00046 <span class="preprocessor"><\/span><span class="preprocessor">#define __UNIT_TEST_H__<\/span>$/;"	a
l00047	html/unit__test_8h_source.html	/^<a name="l00047"><\/a>00047 <span class="preprocessor"><\/span>$/;"	a
l00048	html/unit__test_8h_source.html	/^<a name="l00048"><\/a>00048 <span class="preprocessor">#include &lt;<a class="code" href="monitor__types_8h.html" title="Definitions of types that are used in this project.">monitor_types.h<\/a>&gt;<\/span>$/;"	a
l00049	html/unit__test_8h_source.html	/^<a name="l00049"><\/a>00049 $/;"	a
l00050	html/unit__test_8h_source.html	/^<a name="l00050"><\/a>00050 <span class="keywordtype">void<\/span> <a class="code" href="unit__test_8h.html#a4b454bbf54829d209850a8efa639b942" title="A function to start unit test.">test_start<\/a>();$/;"	a
l00051	html/unit__test_8h_source.html	/^<a name="l00051"><\/a>00051 <span class="keywordtype">int<\/span> <a class="code" href="unit__test_8h.html#a9a5ea09666782de7674e77cb9211aa9f" title="A testing function for [gpaToHPA](gpaToHPA)">test_gpaToHPA<\/a>();$/;"	a
l00052	html/unit__test_8h_source.html	/^<a name="l00052"><\/a>00052 <span class="keywordtype">int<\/span> <a class="code" href="unit__test_8h.html#a086ccec56f0e0c8b7a62d3166a3f3aa4" title="A testing function for [traverseGuestPages](traverseGuestPages)">test_traverseGuestPages<\/a>();$/;"	a
l00053	html/unit__test_8h_source.html	/^<a name="l00053"><\/a>00053 <span class="keywordtype">void<\/span>* <a class="code" href="unit__test_8h.html#a4ea3f87eb9fc03662de9db8329f04606" title="A helper function for [test_traverseGuestPages](test_traverseGuestPages)">printPageGPA<\/a>(<a class="code" href="monitor__types_8h.html#a25ec30a201a5e2d4bdd7b40a89014d5c" title="A type definition for a guest physical address. &gt; Note : The size of this type is __architecture-depe...">GPA_t<\/a> pageGPA);$/;"	a
l00054	html/unit__test_8h_source.html	/^<a name="l00054"><\/a>00054 <span class="keywordtype">int<\/span> <a class="code" href="unit__test_8h.html#a3156e95cd80005f4c6f3f70e9914e135" title="A testing function to see the logical CPU configuration.">test_logicalCPUStatus<\/a>();$/;"	a
l00055	html/unit__test_8h_source.html	/^<a name="l00055"><\/a>00055 <span class="preprocessor">#endif<\/span>$/;"	a
l00001	html/util_8c_source.html	/^<div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 <span class="preprocessor">#include &lt;util.h&gt;<\/span>$/;"	a
l00002	html/util_8c_source.html	/^<a name="l00002"><\/a>00002 <span class="preprocessor">#include &lt;sec_types.h&gt;<\/span>$/;"	a
l00003	html/util_8c_source.html	/^<a name="l00003"><\/a>00003 <span class="preprocessor">#include &lt;<a class="code" href="vmcs_8h.html" title="Definition of constants related to VMCS.">vmcs.h<\/a>&gt;<\/span>$/;"	a
l00004	html/util_8c_source.html	/^<a name="l00004"><\/a>00004 $/;"	a
l00005	html/util_8c_source.html	/^<a name="l00005"><\/a>00005 <span class="keywordtype">void<\/span> sec_memset(<a class="code" href="monitor__types_8h.html#a5e335338bb0cb66eca6ae05e61c526ef" title="A type definition for a unsigned 8-bits data.">U8_t<\/a> *dst, <a class="code" href="monitor__types_8h.html#a5e335338bb0cb66eca6ae05e61c526ef" title="A type definition for a unsigned 8-bits data.">U8_t<\/a> value, <a class="code" href="monitor__types_8h.html#a7d95b1a68a8959f02a82e7b360cd2d2a" title="A type definition for a unsigned 32-bits data.">U32_t<\/a> size)$/;"	a
l00006	html/util_8c_source.html	/^<a name="l00006"><\/a>00006 {$/;"	a
l00007	html/util_8c_source.html	/^<a name="l00007"><\/a>00007     <span class="keywordtype">int<\/span> index;$/;"	a
l00008	html/util_8c_source.html	/^<a name="l00008"><\/a>00008     <span class="keywordflow">for<\/span>(index = 0 ; index &lt; size ; index++)$/;"	a
l00009	html/util_8c_source.html	/^<a name="l00009"><\/a>00009     {$/;"	a
l00010	html/util_8c_source.html	/^<a name="l00010"><\/a>00010         dst[index] = value;$/;"	a
l00011	html/util_8c_source.html	/^<a name="l00011"><\/a>00011     }$/;"	a
l00012	html/util_8c_source.html	/^<a name="l00012"><\/a>00012 }$/;"	a
l00013	html/util_8c_source.html	/^<a name="l00013"><\/a>00013 $/;"	a
l00014	html/util_8c_source.html	/^<a name="l00014"><\/a>00014 <span class="keywordtype">void<\/span> sec_showDataofPhysicalAddress(PHYADDR_t *physicalAddress)$/;"	a
l00015	html/util_8c_source.html	/^<a name="l00015"><\/a>00015 {$/;"	a
l00016	html/util_8c_source.html	/^<a name="l00016"><\/a>00016     VIRTADDR_t *virtualAddress;$/;"	a
l00017	html/util_8c_source.html	/^<a name="l00017"><\/a>00017     virtualAddress = getVirtualAddressFromPhysiacalAddress(physicalAddress);$/;"	a
l00018	html/util_8c_source.html	/^<a name="l00018"><\/a>00018     printf(<span class="stringliteral">&quot;Physical Address(%llx)\\tVirtual Address(%llx)\\tData(%llx)\\n&quot;<\/span>,physicalAddress,virtualAddress,*virtualAddress);$/;"	a
l00019	html/util_8c_source.html	/^<a name="l00019"><\/a>00019 }$/;"	a
l00001	html/util_8d_source.html	/^<div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 core\/security_module\/util.o: core\/security_module\/util.c \\$/;"	a
l00002	html/util_8d_source.html	/^<a name="l00002"><\/a>00002 $/;"	a
l00003	html/util_8d_source.html	/^<a name="l00003"><\/a>00003 core\/security_module\/util.c \\$/;"	a
l00004	html/util_8d_source.html	/^<a name="l00004"><\/a>00004 <\/pre><\/div><\/div><!-- contents -->$/;"	a
l00001	html/util_8h_source.html	/^<div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 <span class="preprocessor">#ifndef __UTIL_H__<\/span>$/;"	a
l00002	html/util_8h_source.html	/^<a name="l00002"><\/a>00002 <span class="preprocessor"><\/span><span class="preprocessor">#define __UTIL_H__<\/span>$/;"	a
l00003	html/util_8h_source.html	/^<a name="l00003"><\/a>00003 <span class="preprocessor"><\/span>$/;"	a
l00004	html/util_8h_source.html	/^<a name="l00004"><\/a>00004 <span class="preprocessor">#include &lt;sec_types.h&gt;<\/span>$/;"	a
l00005	html/util_8h_source.html	/^<a name="l00005"><\/a>00005 $/;"	a
l00006	html/util_8h_source.html	/^<a name="l00006"><\/a>00006 <span class="keywordtype">void<\/span> sec_memset(<a class="code" href="monitor__types_8h.html#a5e335338bb0cb66eca6ae05e61c526ef" title="A type definition for a unsigned 8-bits data.">U8_t<\/a> *dst, <a class="code" href="monitor__types_8h.html#a5e335338bb0cb66eca6ae05e61c526ef" title="A type definition for a unsigned 8-bits data.">U8_t<\/a> value, <a class="code" href="monitor__types_8h.html#a7d95b1a68a8959f02a82e7b360cd2d2a" title="A type definition for a unsigned 32-bits data.">U32_t<\/a> size);$/;"	a
l00007	html/util_8h_source.html	/^<a name="l00007"><\/a>00007 <span class="keywordtype">void<\/span> sec_showDataofPhysicalAddress(PHYADDR_t *physicalAddress);$/;"	a
l00008	html/util_8h_source.html	/^<a name="l00008"><\/a>00008 $/;"	a
l00009	html/util_8h_source.html	/^<a name="l00009"><\/a>00009 <span class="preprocessor">#endif<\/span>$/;"	a
details	html/vmcs_8c.html	/^<hr\/><a name="details" id="details"><\/a><h2>상세한 설명<\/h2>$/;"	a
func-members	html/vmcs_8c.html	/^<tr><td colspan="2"><h2><a name="func-members"><\/a>$/;"	a
l00001	html/vmcs_8c_source.html	/^<a href="vmcs_8c.html">이 파일의 문서화 페이지로 가기<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 $/;"	a
l00007	html/vmcs_8c_source.html	/^<a name="l00007"><\/a>00007 <span class="preprocessor">#include &lt;<a class="code" href="monitor__types_8h.html" title="Definitions of types that are used in this project.">monitor_types.h<\/a>&gt;<\/span>$/;"	a
l00008	html/vmcs_8c_source.html	/^<a name="l00008"><\/a>00008 <span class="preprocessor">#include &lt;<a class="code" href="vmcs_8h.html" title="Definition of constants related to VMCS.">vmcs.h<\/a>&gt;<\/span>$/;"	a
l00009	html/vmcs_8c_source.html	/^<a name="l00009"><\/a>00009 <span class="preprocessor">    #include &quot;asm.h&quot;<\/span>$/;"	a
l00010	html/vmcs_8c_source.html	/^<a name="l00010"><\/a>00010 $/;"	a
l00011	html/vmcs_8c_source.html	/^<a name="l00011"><\/a><a class="code" href="vmcs_8c.html#a78803919617e6c9fb6020ede0a20efac">00011<\/a> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> <a class="code" href="vmcs_8h.html#a78803919617e6c9fb6020ede0a20efac" title="get the value of the guest CR3 control register">get_guest_cr3_value<\/a>()$/;"	a
l00012	html/vmcs_8c_source.html	/^<a name="l00012"><\/a>00012 {$/;"	a
l00013	html/vmcs_8c_source.html	/^<a name="l00013"><\/a>00013     <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>   guest_cr3_value;$/;"	a
l00014	html/vmcs_8c_source.html	/^<a name="l00014"><\/a>00014     guest_cr3_value = <a class="code" href="vmcs_8h.html#a38c7d96da94cf9b3fe630936e1c11c0b" title="get a value in the VMCS">monitor_vmcs_read<\/a>(<a class="code" href="vmcs_8h.html#a86575429aa53430beb7674c700966c1f" title="GUEST CR3 field encoding.">FIELD_ENCODING_GUEST_CR3<\/a>);$/;"	a
l00015	html/vmcs_8c_source.html	/^<a name="l00015"><\/a>00015     <span class="keywordflow">return<\/span> guest_cr3_value;$/;"	a
l00016	html/vmcs_8c_source.html	/^<a name="l00016"><\/a>00016 }$/;"	a
l00017	html/vmcs_8c_source.html	/^<a name="l00017"><\/a>00017 $/;"	a
l00018	html/vmcs_8c_source.html	/^<a name="l00018"><\/a><a class="code" href="vmcs_8c.html#a5c020f2b6689be533301e18f9b9061ae">00018<\/a> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> <a class="code" href="vmcs_8h.html#a5c020f2b6689be533301e18f9b9061ae" title="get the value of guest&#39;s EPTP field in the VMCS">get_guest_eptp_value<\/a>()$/;"	a
l00019	html/vmcs_8c_source.html	/^<a name="l00019"><\/a>00019 {$/;"	a
l00020	html/vmcs_8c_source.html	/^<a name="l00020"><\/a>00020     <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a>   guest_eptp_value;$/;"	a
l00021	html/vmcs_8c_source.html	/^<a name="l00021"><\/a>00021     guest_eptp_value = <a class="code" href="vmcs_8h.html#a38c7d96da94cf9b3fe630936e1c11c0b" title="get a value in the VMCS">monitor_vmcs_read<\/a>(<a class="code" href="vmcs_8h.html#a5efe7137f70a10312aceba27116da9e3" title="GUEST EPT pointer field (full) encoding.">FIELD_ENCODING_GUEST_EPTP_FULL<\/a>);$/;"	a
l00022	html/vmcs_8c_source.html	/^<a name="l00022"><\/a>00022     <span class="keywordflow">return<\/span> guest_eptp_value;$/;"	a
l00023	html/vmcs_8c_source.html	/^<a name="l00023"><\/a>00023 }$/;"	a
l00024	html/vmcs_8c_source.html	/^<a name="l00024"><\/a>00024 $/;"	a
l00025	html/vmcs_8c_source.html	/^<a name="l00025"><\/a><a class="code" href="vmcs_8c.html#a38c7d96da94cf9b3fe630936e1c11c0b">00025<\/a> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> <a class="code" href="vmcs_8h.html#a38c7d96da94cf9b3fe630936e1c11c0b" title="get a value in the VMCS">monitor_vmcs_read<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> field)$/;"	a
l00026	html/vmcs_8c_source.html	/^<a name="l00026"><\/a>00026 {$/;"	a
l00027	html/vmcs_8c_source.html	/^<a name="l00027"><\/a>00027     <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> value = 0xDF;$/;"	a
l00028	html/vmcs_8c_source.html	/^<a name="l00028"><\/a>00028     <span class="keyword">asm<\/span> <span class="keyword">volatile<\/span> (<span class="stringliteral">&quot;vmread %1,%0&quot;<\/span>$/;"	a
l00029	html/vmcs_8c_source.html	/^<a name="l00029"><\/a>00029               : <span class="stringliteral">&quot;=rm&quot;<\/span> (value)$/;"	a
l00030	html/vmcs_8c_source.html	/^<a name="l00030"><\/a>00030               : <span class="stringliteral">&quot;r&quot;<\/span> (field)$/;"	a
l00031	html/vmcs_8c_source.html	/^<a name="l00031"><\/a>00031               : <span class="stringliteral">&quot;cc&quot;<\/span>);$/;"	a
l00032	html/vmcs_8c_source.html	/^<a name="l00032"><\/a>00032     <span class="keywordflow">return<\/span> value;   $/;"	a
l00033	html/vmcs_8c_source.html	/^<a name="l00033"><\/a>00033 }$/;"	a
l00001	html/vmcs_8d_source.html	/^<div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 core\/security_module\/vmcs.o: core\/security_module\/vmcs.c \\$/;"	a
l00002	html/vmcs_8d_source.html	/^<a name="l00002"><\/a>00002 $/;"	a
l00003	html/vmcs_8d_source.html	/^<a name="l00003"><\/a>00003 core\/security_module\/vmcs.c \\$/;"	a
l00004	html/vmcs_8d_source.html	/^<a name="l00004"><\/a>00004 <\/pre><\/div><\/div><!-- contents -->$/;"	a
define-members	html/vmcs_8h.html	/^<tr><td colspan="2"><h2><a name="define-members"><\/a>$/;"	a
details	html/vmcs_8h.html	/^<hr\/><a name="details" id="details"><\/a><h2>상세한 설명<\/h2>$/;"	a
func-members	html/vmcs_8h.html	/^<tr><td colspan="2"><h2><a name="func-members"><\/a>$/;"	a
l00001	html/vmcs_8h_source.html	/^<a href="vmcs_8h.html">이 파일의 문서화 페이지로 가기<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 $/;"	a
l00045	html/vmcs_8h_source.html	/^<a name="l00045"><\/a>00045 <span class="preprocessor">#ifndef __VMCS_H__<\/span>$/;"	a
l00046	html/vmcs_8h_source.html	/^<a name="l00046"><\/a>00046 <span class="preprocessor"><\/span><span class="preprocessor">#define __VMCS_H__<\/span>$/;"	a
l00047	html/vmcs_8h_source.html	/^<a name="l00047"><\/a>00047 <span class="preprocessor"><\/span>$/;"	a
l00048	html/vmcs_8h_source.html	/^<a name="l00048"><\/a>00048 <span class="preprocessor">#include &lt;<a class="code" href="monitor__types_8h.html" title="Definitions of types that are used in this project.">monitor_types.h<\/a>&gt;<\/span>$/;"	a
l00049	html/vmcs_8h_source.html	/^<a name="l00049"><\/a>00049 $/;"	a
l00050	html/vmcs_8h_source.html	/^<a name="l00050"><\/a><a class="code" href="vmcs_8h.html#a86575429aa53430beb7674c700966c1f">00050<\/a> <span class="preprocessor">#define FIELD_ENCODING_GUEST_CR3        ((U64_t) 0x00006802)<\/span>$/;"	a
l00051	html/vmcs_8h_source.html	/^<a name="l00051"><\/a><a class="code" href="vmcs_8h.html#a5efe7137f70a10312aceba27116da9e3">00051<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define FIELD_ENCODING_GUEST_EPTP_FULL  ((U64_t) 0x0000201A)<\/span>$/;"	a
l00052	html/vmcs_8h_source.html	/^<a name="l00052"><\/a><a class="code" href="vmcs_8h.html#a0df456d45752487755b05fb421a43c4b">00052<\/a> <span class="preprocessor"><\/span><span class="preprocessor">#define FIELD_ENCODING_IA32_EFER        ((U64_t) 0x00002806)<\/span>$/;"	a
l00053	html/vmcs_8h_source.html	/^<a name="l00053"><\/a>00053 <span class="preprocessor"><\/span>$/;"	a
l00054	html/vmcs_8h_source.html	/^<a name="l00054"><\/a>00054 <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> <a class="code" href="vmcs_8h.html#a78803919617e6c9fb6020ede0a20efac" title="get the value of the guest CR3 control register">get_guest_cr3_value<\/a>();$/;"	a
l00055	html/vmcs_8h_source.html	/^<a name="l00055"><\/a>00055 <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> <a class="code" href="vmcs_8h.html#a5c020f2b6689be533301e18f9b9061ae" title="get the value of guest&#39;s EPTP field in the VMCS">get_guest_eptp_value<\/a>();$/;"	a
l00056	html/vmcs_8h_source.html	/^<a name="l00056"><\/a>00056 <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> <a class="code" href="vmcs_8h.html#a38c7d96da94cf9b3fe630936e1c11c0b" title="get a value in the VMCS">monitor_vmcs_read<\/a>(<span class="keyword">const<\/span> <a class="code" href="monitor__types_8h.html#a822913f05423d4a8faac6dfec8bc1617" title="A type definition for a unsigned 64-bits data.">U64_t<\/a> field);$/;"	a
l00057	html/vmcs_8h_source.html	/^<a name="l00057"><\/a>00057 $/;"	a
l00058	html/vmcs_8h_source.html	/^<a name="l00058"><\/a>00058 <span class="preprocessor">#endif<\/span>$/;"	a
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
__EVENT_HANDLER_H__	include/eventHandler.h	19;"	d
EPT_PDP_ENTRY_MASK	include/guest_IA32ePage.h	179;"	d
EPT_PD_ENTRY_MASK	include/guest_IA32ePage.h	180;"	d
EPT_PML4_ENTRY_MASK	include/guest_IA32ePage.h	178;"	d
EPT_PT_ENTRY_MASK	include/guest_IA32ePage.h	181;"	d
GUEST_PDP_INDEX_SHIFT	include/guest_IA32ePage.h	189;"	d
GUEST_PD_INDEX_SHIFT	include/guest_IA32ePage.h	190;"	d
GUEST_PML4_INDEX_SHIFT	include/guest_IA32ePage.h	188;"	d
GUEST_PT_INDEX_SHIFT	include/guest_IA32ePage.h	191;"	d
MAX_GUEST_PDP_INDEX	include/guest_IA32ePage.h	184;"	d
MAX_GUEST_PD_INDEX	include/guest_IA32ePage.h	185;"	d
MAX_GUEST_PML4_INDEX	include/guest_IA32ePage.h	183;"	d
MAX_GUEST_PT_INDEX	include/guest_IA32ePage.h	186;"	d
__IA32E_PAGE_H__	include/guest_IA32ePage.h	173;"	d
CR3_MASK	include/guest_state.h	38;"	d
CS_access_right	include/guest_state.h	/^	U64_t CS_access_right;$/;"	m	struct:guest_sensitive_stats
CS_base	include/guest_state.h	/^	U64_t CS_base;$/;"	m	struct:guest_sensitive_stats
CS_limit	include/guest_state.h	/^	U64_t CS_limit;$/;"	m	struct:guest_sensitive_stats
CS_selector	include/guest_state.h	/^	U64_t CS_selector;$/;"	m	struct:guest_sensitive_stats
DS_access_right	include/guest_state.h	/^	U64_t DS_access_right;$/;"	m	struct:guest_sensitive_stats
DS_base	include/guest_state.h	/^	U64_t DS_base;$/;"	m	struct:guest_sensitive_stats
DS_limit	include/guest_state.h	/^	U64_t DS_limit;$/;"	m	struct:guest_sensitive_stats
DS_selector	include/guest_state.h	/^	U64_t DS_selector;$/;"	m	struct:guest_sensitive_stats
EPTP_MASK	include/guest_state.h	39;"	d
ES_access_right	include/guest_state.h	/^	U64_t ES_access_right;$/;"	m	struct:guest_sensitive_stats
ES_base	include/guest_state.h	/^	U64_t ES_base;$/;"	m	struct:guest_sensitive_stats
ES_limit	include/guest_state.h	/^	U64_t ES_limit;$/;"	m	struct:guest_sensitive_stats
ES_selector	include/guest_state.h	/^	U64_t ES_selector;$/;"	m	struct:guest_sensitive_stats
FS_access_right	include/guest_state.h	/^	U64_t FS_access_right;$/;"	m	struct:guest_sensitive_stats
FS_base	include/guest_state.h	/^	U64_t FS_base;$/;"	m	struct:guest_sensitive_stats
FS_limit	include/guest_state.h	/^	U64_t FS_limit;$/;"	m	struct:guest_sensitive_stats
FS_selector	include/guest_state.h	/^	U64_t FS_selector;$/;"	m	struct:guest_sensitive_stats
GS_access_right	include/guest_state.h	/^	U64_t GS_access_right;$/;"	m	struct:guest_sensitive_stats
GS_base	include/guest_state.h	/^	U64_t GS_base;$/;"	m	struct:guest_sensitive_stats
GS_limit	include/guest_state.h	/^	U64_t GS_limit;$/;"	m	struct:guest_sensitive_stats
GS_selector	include/guest_state.h	/^	U64_t GS_selector;$/;"	m	struct:guest_sensitive_stats
IA32_LSTAR	include/guest_state.h	41;"	d
R10	include/guest_state.h	/^	U64_t R10;$/;"	m	struct:guest_sensitive_stats
R11	include/guest_state.h	/^	U64_t R11;$/;"	m	struct:guest_sensitive_stats
R12	include/guest_state.h	/^	U64_t R12;$/;"	m	struct:guest_sensitive_stats
R13	include/guest_state.h	/^	U64_t R13;$/;"	m	struct:guest_sensitive_stats
R14	include/guest_state.h	/^	U64_t R14;$/;"	m	struct:guest_sensitive_stats
R15	include/guest_state.h	/^	U64_t R15;$/;"	m	struct:guest_sensitive_stats
R8	include/guest_state.h	/^	U64_t R8;$/;"	m	struct:guest_sensitive_stats
R9	include/guest_state.h	/^	U64_t R9;$/;"	m	struct:guest_sensitive_stats
RAX	include/guest_state.h	/^	U64_t RAX;$/;"	m	struct:guest_sensitive_stats
RBP	include/guest_state.h	/^	U64_t RBP; \/* Stack base pointer (User) *\/$/;"	m	struct:guest_sensitive_stats
RBX	include/guest_state.h	/^	U64_t RBX;$/;"	m	struct:guest_sensitive_stats
RCX	include/guest_state.h	/^	U64_t RCX;$/;"	m	struct:guest_sensitive_stats
RDI	include/guest_state.h	/^	U64_t RDI;$/;"	m	struct:guest_sensitive_stats
RDX	include/guest_state.h	/^	U64_t RDX;$/;"	m	struct:guest_sensitive_stats
RFLAGS	include/guest_state.h	/^	U64_t RFLAGS;	\/* Flag registers *\/$/;"	m	struct:guest_sensitive_stats
RIP	include/guest_state.h	/^	U64_t RIP;	\/* Program counter indicating next instruction after return to user*\/$/;"	m	struct:guest_sensitive_stats
RSI	include/guest_state.h	/^	U64_t RSI; $/;"	m	struct:guest_sensitive_stats
RSP	include/guest_state.h	/^	U64_t RSP; \/* Stack pointer (User) *\/$/;"	m	struct:guest_sensitive_stats
SP_User	include/guest_state.h	/^	GVA_t SP_User;$/;"	m	struct:guest_sensitive_stats
SS_access_right	include/guest_state.h	/^	U64_t SS_access_right;$/;"	m	struct:guest_sensitive_stats
SS_base	include/guest_state.h	/^	U64_t SS_base;$/;"	m	struct:guest_sensitive_stats
SS_limit	include/guest_state.h	/^	U64_t SS_limit;$/;"	m	struct:guest_sensitive_stats
SS_selector	include/guest_state.h	/^	U64_t SS_selector;$/;"	m	struct:guest_sensitive_stats
__GUEST_STATE_H__	include/guest_state.h	34;"	d
guest_sensitive_stats	include/guest_state.h	/^struct guest_sensitive_stats$/;"	s
CLOSED	include/memory_ownership_table.h	/^	CLOSED,				\/**< closed state *\/$/;"	e	enum:page_state_t
ENCRYPTED	include/memory_ownership_table.h	/^	ENCRYPTED			\/**< encrypted state *\/$/;"	e	enum:page_state_t
HPA_TO_INDEX_SHIFT	include/memory_ownership_table.h	165;"	d
MAX_MEMORY_SIZE	include/memory_ownership_table.h	163;"	d
NUMBER_OF_MEMORY_OWNERSHIP_TABLE_ENTRY	include/memory_ownership_table.h	164;"	d
NUMBER_OF_PROTECTED_APPLICATIONS	include/memory_ownership_table.h	168;"	d
OPENED	include/memory_ownership_table.h	/^	OPENED,				\/**< opened state *\/$/;"	e	enum:page_state_t
OWNER_OTHER	include/memory_ownership_table.h	142;"	d
OWNER_VMM	include/memory_ownership_table.h	143;"	d
PAGE_SIZE	include/memory_ownership_table.h	162;"	d
PARTIAL	include/memory_ownership_table.h	/^	PARTIAL,			\/**< partialy-opened state *\/$/;"	e	enum:page_state_t
UNPROTECTED	include/memory_ownership_table.h	/^	UNPROTECTED = 0,	\/**< unprotectd state *\/$/;"	e	enum:page_state_t
__MEMORY_OWNERSHIP_TABLE_H__	include/memory_ownership_table.h	128;"	d
guest_sensitive_stats	include/memory_ownership_table.h	/^	struct guest_sensitive_stats guest_sensitive_stats;$/;"	m	struct:protected_application_t	typeref:struct:protected_application_t::guest_sensitive_stats
memory_ownership_table_entry_t	include/memory_ownership_table.h	/^struct memory_ownership_table_entry_t$/;"	s
original_page_address	include/memory_ownership_table.h	/^	HPA_t original_page_address;	\/**< The back-upped original page address storage for partialy-opened state *\/$/;"	m	struct:memory_ownership_table_entry_t
original_permission	include/memory_ownership_table.h	/^	U8_t original_permission;		\/**< Original permission of the page in the corresponding EPT entry *\/$/;"	m	struct:memory_ownership_table_entry_t
owner_APP	include/memory_ownership_table.h	/^	APPID_t owner_APP;				\/**< ID of the application*\/$/;"	m	struct:protected_application_t
owner_APP	include/memory_ownership_table.h	/^	APPID_t owner_APP;				\/**< ID of the owner application of the page *\/$/;"	m	struct:memory_ownership_table_entry_t
owner_VM	include/memory_ownership_table.h	/^	VMID_t owner_VM;				\/**< ID of VM of the application *\/$/;"	m	struct:protected_application_t
owner_VM	include/memory_ownership_table.h	/^	VMID_t owner_VM;				\/**< ID of VM that the owner application of the page is running on *\/$/;"	m	struct:memory_ownership_table_entry_t
page_state_t	include/memory_ownership_table.h	/^enum page_state_t{$/;"	g
protected_application_t	include/memory_ownership_table.h	/^struct protected_application_t$/;"	s
state	include/memory_ownership_table.h	/^	enum page_state_t state;		\/**< Page state *\/$/;"	m	struct:memory_ownership_table_entry_t	typeref:enum:memory_ownership_table_entry_t::page_state_t
EPT_ATTRIBUTE_MASK	include/monitor_ept.h	183;"	d
EPT_GPA_MASK	include/monitor_ept.h	171;"	d
EPT_PDP_ENTRY_MASK	include/monitor_ept.h	168;"	d
EPT_PDP_GPA_MASK	include/monitor_ept.h	174;"	d
EPT_PDP_GPA_SHIFT	include/monitor_ept.h	179;"	d
EPT_PD_ENTRY_MASK	include/monitor_ept.h	169;"	d
EPT_PD_GPA_MASK	include/monitor_ept.h	175;"	d
EPT_PD_GPA_SHIFT	include/monitor_ept.h	180;"	d
EPT_PML4_ENTRY_MASK	include/monitor_ept.h	167;"	d
EPT_PML4_GPA_MASK	include/monitor_ept.h	173;"	d
EPT_PML4_GPA_SHIFT	include/monitor_ept.h	178;"	d
EPT_PT_ENTRY_MASK	include/monitor_ept.h	170;"	d
EPT_PT_GPA_MASK	include/monitor_ept.h	176;"	d
EPT_PT_GPA_SHIFT	include/monitor_ept.h	181;"	d
__MONITOR_EPT_H__	include/monitor_ept.h	163;"	d
APPID_t	include/monitor_types.h	/^typedef GPA_t	APPID_t;$/;"	t
EPTP_t	include/monitor_types.h	/^typedef HPA_t	EPTP_t;$/;"	t
EPT_ENTRY_t	include/monitor_types.h	/^typedef U64_t	EPT_ENTRY_t;$/;"	t
GPA_t	include/monitor_types.h	/^typedef U64_t	GPA_t;$/;"	t
GVA_t	include/monitor_types.h	/^typedef U64_t	GVA_t;$/;"	t
HPA_t	include/monitor_types.h	/^typedef U64_t	HPA_t;$/;"	t
PGT_ENTRY_t	include/monitor_types.h	/^typedef U64_t	PGT_ENTRY_t;$/;"	t
U16_t	include/monitor_types.h	/^typedef unsigned short	U16_t;$/;"	t
U32_t	include/monitor_types.h	/^typedef unsigned long	U32_t;$/;"	t
U64_t	include/monitor_types.h	/^typedef unsigned long long	U64_t;$/;"	t
U8_t	include/monitor_types.h	/^typedef unsigned char	U8_t;$/;"	t
VMID_t	include/monitor_types.h	/^typedef EPTP_t	VMID_t;$/;"	t
__MONITOR_TYPES_h__	include/monitor_types.h	46;"	d
__MONITOR__UTIL_H__	include/monitor_util.h	36;"	d
__PROTECTED_APPLICATION_H__	include/protectedApplication.h	2;"	d
APPID_t	include/sec_types.h	/^typedef U8_t				APPID_t;$/;"	t
BOOL_t	include/sec_types.h	/^typedef U8_t				BOOL_t;$/;"	t
FALSE	include/sec_types.h	18;"	d
GUEST_PHYADDR_t	include/sec_types.h	/^typedef PHYADDR_t			GUEST_PHYADDR_t;$/;"	t
PHYADDR_t	include/sec_types.h	/^typedef U64_t				PHYADDR_t;$/;"	t
TRUE	include/sec_types.h	19;"	d
U32_t	include/sec_types.h	/^typedef unsigned long		U32_t;$/;"	t
U64_t	include/sec_types.h	/^typedef unsigned long long	U64_t;$/;"	t
U8_t	include/sec_types.h	/^typedef unsigned char		U8_t;$/;"	t
VIRTADDR_t	include/sec_types.h	/^typedef U64_t				VIRTADDR_t;$/;"	t
VMID_t	include/sec_types.h	/^typedef U8_t				VMID_t;$/;"	t
__SEC_TYPES_H__	include/sec_types.h	2;"	d
__UNIT_TEST_H__	include/unit_test.h	46;"	d
__UTIL_H__	include/util.h	2;"	d
FIELD_ENCODING_GUEST_CR3	include/vmcs.h	50;"	d
FIELD_ENCODING_GUEST_CS_ACCESS_RIGHT	include/vmcs.h	69;"	d
FIELD_ENCODING_GUEST_CS_BASE	include/vmcs.h	76;"	d
FIELD_ENCODING_GUEST_CS_LIMIT	include/vmcs.h	62;"	d
FIELD_ENCODING_GUEST_CS_SELECTOR	include/vmcs.h	55;"	d
FIELD_ENCODING_GUEST_DS_ACCESS_RIGHT	include/vmcs.h	71;"	d
FIELD_ENCODING_GUEST_DS_BASE	include/vmcs.h	78;"	d
FIELD_ENCODING_GUEST_DS_LIMIT	include/vmcs.h	64;"	d
FIELD_ENCODING_GUEST_DS_SELECTOR	include/vmcs.h	57;"	d
FIELD_ENCODING_GUEST_EPTP_FULL	include/vmcs.h	51;"	d
FIELD_ENCODING_GUEST_ES_ACCESS_RIGHT	include/vmcs.h	68;"	d
FIELD_ENCODING_GUEST_ES_BASE	include/vmcs.h	75;"	d
FIELD_ENCODING_GUEST_ES_LIMIT	include/vmcs.h	61;"	d
FIELD_ENCODING_GUEST_ES_SELECTOR	include/vmcs.h	54;"	d
FIELD_ENCODING_GUEST_FS_ACCESS_RIGHT	include/vmcs.h	72;"	d
FIELD_ENCODING_GUEST_FS_BASE	include/vmcs.h	79;"	d
FIELD_ENCODING_GUEST_FS_LIMIT	include/vmcs.h	65;"	d
FIELD_ENCODING_GUEST_FS_SELECTOR	include/vmcs.h	58;"	d
FIELD_ENCODING_GUEST_GS_ACCESS_RIGHT	include/vmcs.h	73;"	d
FIELD_ENCODING_GUEST_GS_BASE	include/vmcs.h	80;"	d
FIELD_ENCODING_GUEST_GS_LIMIT	include/vmcs.h	66;"	d
FIELD_ENCODING_GUEST_GS_SELECTOR	include/vmcs.h	59;"	d
FIELD_ENCODING_GUEST_RFLAGS	include/vmcs.h	84;"	d
FIELD_ENCODING_GUEST_SS_ACCESS_RIGHT	include/vmcs.h	70;"	d
FIELD_ENCODING_GUEST_SS_BASE	include/vmcs.h	77;"	d
FIELD_ENCODING_GUEST_SS_LIMIT	include/vmcs.h	63;"	d
FIELD_ENCODING_GUEST_SS_SELECTOR	include/vmcs.h	56;"	d
FIELD_ENCODING_GUEST_TR_BASE	include/vmcs.h	83;"	d
FIELD_ENCODING_IA32_EFER	include/vmcs.h	52;"	d
__VMCS_H__	include/vmcs.h	46;"	d
allocateNewAppID	memory_ownership_table.c	/^APPID_t allocateNewAppID()$/;"	f
allocateNewApplicationIdentifiers	memory_ownership_table.c	/^void allocateNewApplicationIdentifiers(VMID_t *new_VMID, APPID_t *new_APPID)$/;"	f
allocateNewVMID	memory_ownership_table.c	/^VMID_t allocateNewVMID()$/;"	f
changePageStatus	memory_ownership_table.c	/^int changePageStatus(const VMID_t vmID, const APPID_t appID, const GPA_t gpa, const enum page_state_t state)$/;"	f
closePage	memory_ownership_table.c	/^void* closePage(const VMID_t vmID, const APPID_t appID, GPA_t gpa)$/;"	f
currentRunningApplication	memory_ownership_table.c	/^APPID_t currentRunningApplication = OWNER_OTHER;$/;"	v
getCurrentProtectedApplication	memory_ownership_table.c	/^struct protected_application_t *getCurrentProtectedApplication()$/;"	f
getMemoryOwnershipTableEntry	memory_ownership_table.c	/^struct memory_ownership_table_entry_t getMemoryOwnershipTableEntry(const U64_t index)$/;"	f
getMemoryOwnershipTableIndex	memory_ownership_table.c	/^U64_t getMemoryOwnershipTableIndex(const HPA_t hpa)$/;"	f
initializeNewProtectedApplication	memory_ownership_table.c	/^void initializeNewProtectedApplication(const VMID_t vmid, const APPID_t appID)$/;"	f
memory_ownership_table	memory_ownership_table.c	/^static struct memory_ownership_table_entry_t memory_ownership_table[NUMBER_OF_MEMORY_OWNERSHIP_TABLE_ENTRY];$/;"	v	typeref:struct:memory_ownership_table_entry_t	file:
numberOfProtectedApplications	memory_ownership_table.c	/^APPID_t numberOfProtectedApplications = 0;$/;"	v
numberOfVMs	memory_ownership_table.c	/^VMID_t numberOfVMs = 0;$/;"	v
openPage	memory_ownership_table.c	/^void* openPage(const VMID_t vmID, const APPID_t appID, GPA_t gpa)$/;"	f
protectCurrentApplication	memory_ownership_table.c	/^void protectCurrentApplication()$/;"	f
protected_application_table	memory_ownership_table.c	/^static struct protected_application_t protected_application_table[NUMBER_OF_PROTECTED_APPLICATIONS];$/;"	v	typeref:struct:protected_application_t	file:
addCurrentProcessToProctectingApp	memoryownershiptable.c	/^void addCurrentProcessToProctectingApp()$/;"	f
cr3ChangedHandler	memoryownershiptable.c	/^void cr3ChangedHandler()$/;"	f
getEPTEntryIndexOfGuestPage	memoryownershiptable.c	/^U64_t getEPTEntryIndexOfGuestPage(const U64_t guestPTEntry, U64_t *eptEntryValue)$/;"	f
gpaToHPA	memoryownershiptable.c	/^PHYADDR_t gpaToHPA(const GUEST_PHYADDR_t gpa, PHYADDR_t *pageTableEntryPhysicalAddress)$/;"	f
gpaToHPACache	memoryownershiptable.c	/^U64_t gpaToHPACache[PD_INDEX_MAX * PT_INDEX_MAX];$/;"	v
initOwnershipTable	memoryownershiptable.c	/^void initOwnershipTable()$/;"	f
ownershipTable	memoryownershiptable.c	/^OWNERSHIPTABLE_t ownershipTable[MAX_NUMBER_OF_PAGES];$/;"	v
pageIsProtecting	memoryownershiptable.c	/^BOOL_t pageIsProtecting(U64_t pageID)$/;"	f
protectingPageTable	memoryownershiptable.c	/^APPID_t protectingPageTable[PD_INDEX_MAX * PT_INDEX_MAX];$/;"	v
stop	memoryownershiptable.c	/^BOOL_t stop = FALSE;$/;"	v
targetApplicationPageTableBasePhysicalAddress	memoryownershiptable.c	/^PHYADDR_t targetApplicationPageTableBasePhysicalAddress = 0;$/;"	v
traverseApplicationPageTable	memoryownershiptable.c	/^void traverseApplicationPageTable(const VMID_t vmID, const APPID_t appID, const GUEST_PHYADDR_t cr3PDGPA)$/;"	f
traverseEPTPML4	memoryownershiptable.c	/^void traverseEPTPML4(const VMID_t vmid, PHYADDR_t *eptPhyBaseAddr)$/;"	f
traverseEPTPageDirectory	memoryownershiptable.c	/^void traverseEPTPageDirectory(const VMID_t vmid, PHYADDR_t *currentEPTPageDirectoryBasePhysicalAddress)$/;"	f
traverseEPTPageDirectoryPointerTable	memoryownershiptable.c	/^void traverseEPTPageDirectoryPointerTable(const VMID_t vmid, PHYADDR_t *currentEPTPageDirectoryPointerTableBasePhysicalAddress)$/;"	f
traverseEPTPageTable	memoryownershiptable.c	/^void traverseEPTPageTable(const VMID_t vmid, PHYADDR_t *currentEPTPageTableBasePhysicalAddress)$/;"	f
traverseGuestPD	memoryownershiptable.c	/^void traverseGuestPD(const VMID_t vmID, const APPID_t appID, const GUEST_PHYADDR_t cr3PDGPA)$/;"	f
traversePT	memoryownershiptable.c	/^void traversePT(const VMID_t vmID, const APPID_t appID, const U64_t currentPDEntry)$/;"	f
updateOwnerAppIDofEPTPage	memoryownershiptable.c	/^void updateOwnerAppIDofEPTPage(const VMID_t vmid, const APPID_t appID, const U64_t pageID)$/;"	f
updateOwnerAppIDofGuestPage	memoryownershiptable.c	/^void updateOwnerAppIDofGuestPage(const VMID_t vmID, const APPID_t appID, const U64_t currentPTEntry)$/;"	f
updateOwnerVMIDofEPTPage	memoryownershiptable.c	/^void updateOwnerVMIDofEPTPage(const VMID_t vmid, const U64_t pageID, const U8_t originalAttr)$/;"	f
updateOwnershipTable	memoryownershiptable.c	/^void updateOwnershipTable()$/;"	f
updateOwnershipTableForOneVM	memoryownershiptable.c	/^void updateOwnershipTableForOneVM(const VMID_t vmid, PHYADDR_t *eptPhyBaseAddr)$/;"	f
gpaToHPA	monitor_util.c	/^HPA_t gpaToHPA(const GPA_t gpa, HPA_t *eptEntryHPA)$/;"	f
mapHPAintoHVA	monitor_util.c	/^void *mapHPAintoHVA(const HPA_t hpa, const U64_t size)$/;"	f
unmapHPAintoHVA	monitor_util.c	/^void unmapHPAintoHVA(void* hva, const U64_t size)$/;"	f
test_gpaToHPA	unit_test.c	/^int test_gpaToHPA()$/;"	f
test_logicalCPUStatus	unit_test.c	/^int test_logicalCPUStatus()$/;"	f
test_start	unit_test.c	/^void test_start()$/;"	f
test_traverseGuestPages	unit_test.c	/^int test_traverseGuestPages()$/;"	f
sec_memset	util.c	/^void sec_memset(U8_t *dst, U8_t value, U32_t size)$/;"	f
sec_showDataofPhysicalAddress	util.c	/^void sec_showDataofPhysicalAddress(PHYADDR_t *physicalAddress)$/;"	f
get_guest_cr3_value	vmcs.c	/^U64_t get_guest_cr3_value()$/;"	f
get_guest_eptp_value	vmcs.c	/^U64_t get_guest_eptp_value()$/;"	f
monitor_vmcs_read	vmcs.c	/^U64_t monitor_vmcs_read(const U64_t field)$/;"	f
monitor_vmcs_write	vmcs.c	/^void monitor_vmcs_write(const U64_t field, const U32_t value)$/;"	f
